#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 5c2d2364-ec9d-46e6-9a1c-ff449cac358a
# Source File: C:\Users\Andreas\Desktop\Projecte\AppBot-Ctstr2AppV-V1.4.0\Ctxstr2msi2appv.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.71
     Generated on:       14.03.2015 21:45
     Generated by:       Andreas Nick
     Organization:       Nick Informationstechnik GmbH
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2014
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

[String[]] $AllowedParameter = @("profilePath","projectpath","autostart","Convertappv","autoexit","ignorerrors")

function Main {
	Param ([String]$Commandline)
    
    #$Commandline = '"-Profile1Path" "C:\temp\citrixStreaming\NotepadPlusPlus\NotepadPlusPlus.profile" "-ProjectPath" "C:\temp\testproject" "-autostart" "-autoexit"'
    Convert-CommandLineToDictionary -CommandLine $Commandline -Dictionary $Global:CommadlineDictionary -ParamIndicator '-'
    
    if($Global:CommadlineDictionary.keys -contains "ignorerrors"){
        $Global:ignorerrors = $true
	}
    
    $Errorcode=0

    if($Global:CommadlineDictionary.count -ge 1){
	
    	try {
	    	foreach($item in $Global:CommadlineDictionary.Keys){
    			if(!($AllowedParameter -contains $item)){
        			Throw "Illegal commandline parameter : $item"
        			$Errorcode=1
				}
			}
		
        	if(!($Global:CommadlineDictionary.keys -contains "ProfilePath")){
            	Throw "Parameter ProfilePath not found"   
			}
       	 	if(!(Test-Path $Global:CommadlineDictionary["ProfilePath"])){
        	   Throw ".Profile file not Found "   
			}
            
		} catch {
    	    Show-ErrorMessage -Message  ("Error : "+ $_.Exception.Message)
    	    $Errorcode=1
		}
	}
    
    
    # Start the Application
    if (!$Global:check) {
        $Errorcode = 1
    }
    
	if(($Errorcode -eq 0) -and ((Call-CtxStr2Msi_Form_psf) -eq "OK"))
	{
		
	}
	
	$global:ExitCode = $Errorcode #Set the exit code for the Packager

}





function Parse-Commandline 
{ 
<#
	.SYNOPSIS
		Parses the Commandline of a package executable

	.DESCRIPTION
		Parses the Commandline of a package executable

	.PARAMETER  Commandline
		The Commandline of the package executable

	.EXAMPLE
		$arguments = Parse-Commandline -Commandline $Commandline

	.INPUTS
		System.String

	.OUTPUTS
		System.Collections.Specialized.StringCollection
#>

	[OutputType([System.Collections.Specialized.StringCollection])]
    Param([string]$CommandLine) 
	
    $Arguments = New-Object System.Collections.Specialized.StringCollection 
	
	if($CommandLine)
	{
	    #Find First Quote 
	    $index = $CommandLine.IndexOf('"') 

	    while ( $index -ne -1) 
	    {#Continue as along as we find a quote 
	        #Find Closing Quote 
	        $closeIndex = $CommandLine.IndexOf('"',$index + 1) 
	        if($closeIndex -eq -1) 
	        { 
	            break #Can’t find a match 
	        } 
	        $value = $CommandLine.Substring($index + 1,$closeIndex – ($index + 1)) 
	        [void]$Arguments.Add($value) 
	        $index = $closeIndex 

	        #Find First Quote 
	        $index = $CommandLine.IndexOf('"',$index + 1) 
	    } 
	}
    return $Arguments 
}

function Convert-CommandLineToDictionary 
{ 
	<#
	.SYNOPSIS
		Parses and converts the commandline of a packaged executable into a Dictionary

	.DESCRIPTION
		Parses and converts the commandline of a packaged executable into a Dictionary

	.PARAMETER  Dictionary
		The Dictionary to load the value pairs into.

	.PARAMETER  CommandLine
		The commandline of the package executable

	.PARAMETER  ParamIndicator
		The character used to indicate what is a parameter.
	
	.EXAMPLE
		$Dictionary = New-Object System.Collections.Specialized.StringDictionary
		Convert-CommandLineToDictionary -Dictionary $Dictionary -CommandLine $Commandline  -ParamIndicator '-'
	#>
    Param(	[ValidateNotNull()]
			[System.Collections.Specialized.StringDictionary]$Dictionary,
			[string]$CommandLine, 
			[char] $ParamIndicator) 

	$Params = Parse-Commandline $CommandLine
	
    for($index = 0; $index -lt $Params.Count; $index++) 
    { 
        [string]$param = $Params[$index] 
        #Clear the values 
        $key = "" 
        $value = "" 

        if($param.StartsWith($ParamIndicator)) 
        { 
            #Remove the indicator 
            $key = $param.Remove(0,1) 
            if($index  + 1 -lt $Params.Count) 
            { 
                #Check if the next Argument is a parameter 
                [string]$param = $Params[$index + 1] 
                if($param.StartsWith($ParamIndicator) -ne $true ) 
                { 
                    #If it isn’t a parameter then set it as the value 
                    $value = $param 
                    $index++ 
                } 
            } 
            $Dictionary[$key] = $value 
        }#else skip 
    } 
}





#endregion Source: Startup.pss

#region Source: CtxStr2Msi_Form.psf
function Call-CtxStr2Msi_Form_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		$local:type = [ProgressBarOverlay]
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainDialog = New-Object 'System.Windows.Forms.Form'
	$progressbaroverlay1 = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$LogOutBox = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol = New-Object 'System.Windows.Forms.TabControl'
	$tabBaseData = New-Object 'System.Windows.Forms.TabPage'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$SelectTemplatePath = New-Object 'System.Windows.Forms.Button'
	$textboxTemplate = New-Object 'System.Windows.Forms.TextBox'
	$checkboxAppVTemplate = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxFullLoad = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxConvertToAppV5 = New-Object 'System.Windows.Forms.CheckBox'
	$buttonBrowseFolderRoot = New-Object 'System.Windows.Forms.Button'
	$labelMSIAPPLICATIONROOTDI = New-Object 'System.Windows.Forms.Label'
	$textboxFolderRootDir = New-Object 'System.Windows.Forms.TextBox'
	$labelRoot = New-Object 'System.Windows.Forms.Label'
	$comboboxInstallDir = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxVersion = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxDisplayName = New-Object 'System.Windows.Forms.ComboBox'
	$checkboxActiveSetup = New-Object 'System.Windows.Forms.CheckBox'
	$check64BitBox = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxCreateMsiDialogs = New-Object 'System.Windows.Forms.CheckBox'
	$RandomCheckGuidBox = New-Object 'System.Windows.Forms.CheckBox'
	$labelInstallDir = New-Object 'System.Windows.Forms.Label'
	$labelDisplayName = New-Object 'System.Windows.Forms.Label'
	$ManufacturerBox = New-Object 'System.Windows.Forms.TextBox'
	$GenUpgradeCodeBut = New-Object 'System.Windows.Forms.Button'
	$UpgradeCodeBox = New-Object 'System.Windows.Forms.TextBox'
	$labelManufacturer = New-Object 'System.Windows.Forms.Label'
	$LanguageComb = New-Object 'System.Windows.Forms.ComboBox'
	$labelLanguage = New-Object 'System.Windows.Forms.Label'
	$labelVersion = New-Object 'System.Windows.Forms.Label'
	$labelUpgradeCode = New-Object 'System.Windows.Forms.Label'
	$PackagenameBox = New-Object 'System.Windows.Forms.TextBox'
	$labelPackagename = New-Object 'System.Windows.Forms.Label'
	$GenProductCodeBut = New-Object 'System.Windows.Forms.Button'
	$labelProductcode = New-Object 'System.Windows.Forms.Label'
	$ProductcodeBox = New-Object 'System.Windows.Forms.TextBox'
	$tabShortcuts = New-Object 'System.Windows.Forms.TabPage'
	$splitcontainer2 = New-Object 'System.Windows.Forms.SplitContainer'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$splitcontainer3 = New-Object 'System.Windows.Forms.SplitContainer'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$splitcontainer4 = New-Object 'System.Windows.Forms.SplitContainer'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$splitcontainer5 = New-Object 'System.Windows.Forms.SplitContainer'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$splitcontainer6 = New-Object 'System.Windows.Forms.SplitContainer'
	$toolstripsplitbutton1 = New-Object 'System.Windows.Forms.ToolStripSplitButton'
	$newProject = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemSavePrpject = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemOpenProject = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$PathText = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$FileBut = New-Object 'System.Windows.Forms.ToolStripButton'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$StartBut = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripbuttonHelp = New-Object 'System.Windows.Forms.ToolStripButton'
	$FileExclList = New-Object 'System.Windows.Forms.ListView'
	$RegExclList = New-Object 'System.Windows.Forms.ListView'
	$PathSubstList = New-Object 'System.Windows.Forms.ListView'
	$RegSubstList = New-Object 'System.Windows.Forms.ListView'
	$EditFileExclBut = New-Object 'System.Windows.Forms.Button'
	$RemoveFileExclBut = New-Object 'System.Windows.Forms.Button'
	$AddFileExclBut = New-Object 'System.Windows.Forms.Button'
	$EditRegExclBut = New-Object 'System.Windows.Forms.Button'
	$RemoveRegExclBut = New-Object 'System.Windows.Forms.Button'
	$AddRegExclBut = New-Object 'System.Windows.Forms.Button'
	$EditPathSubBut = New-Object 'System.Windows.Forms.Button'
	$RemovePathSubBut = New-Object 'System.Windows.Forms.Button'
	$AddPathSubBut = New-Object 'System.Windows.Forms.Button'
	$EditRegSubBut = New-Object 'System.Windows.Forms.Button'
	$RemoveRegSubBut = New-Object 'System.Windows.Forms.Button'
	$AddRegSubBut = New-Object 'System.Windows.Forms.Button'
	$ShortcutList = New-Object 'System.Windows.Forms.ListView'
	$buttonAddShortcut = New-Object 'System.Windows.Forms.Button'
	$buttonRemoveShortcut = New-Object 'System.Windows.Forms.Button'
	$buttonEditShortcut = New-Object 'System.Windows.Forms.Button'
	$selectFolderDialog = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialogProfile = New-Object 'System.Windows.Forms.OpenFileDialog'
	$openProjectDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$folderbrowserdialogRoot = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$ShortcutIconsImageList = New-Object 'System.Windows.Forms.ImageList'
	$buttonSelectIcon = New-Object 'System.Windows.Forms.Button'
	$OpenIconDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$openTemplateDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#=====================================================================================================
	#
	# Citrix Streaming 2 Msi Converter
	# copyright 2013 Andreas Nick Nick Informationstechnik GmbH
	# http://www.nick-it.de
	#
	# Version V0.2
	#
	# Legal
	# This  scritp is copyrighted material.  They may only be downloaded from the
	# links I provide.  You may download them to use, if you want to do
	# anything else with it, you have to ask me first.  Full terms and conditions are
	# available on the download page on the blog http://software-virtualisierung.des
	#
	#=====================================================================================================
	
	
	[System.Reflection.Assembly]::LoadWithPartialName("System.web")
	
	
	#=====================================================================================================
	#Log Window
	#=====================================================================================================
	
	$LogOutBox.ReadOnly = $true
	$LogOutBox.add_LinkClicked({
	    
	    $htmlPath = [System.Web.HttpUtility]::UrlDecode($_.LinkText)
	    #Invoke-Expression "start $($_.LinkText)"
	    Invoke-Expression "start $($htmlPath)"
	})
	
	function write-logbox([STRING] $line) {
	    $LogOutBox.AppendText($line + [CHAR](13))
	    $LogOutBox.ScrollToCaret()
	    [System.Windows.Forms.Application]::DoEvents()
	}
	
	
	
	#=====================================================================================================
	# #Read a Line from a Windows Form View
	#=====================================================================================================
	function read-Viewline ($Listview, [int] $line) {
	    
	    [String[]] $fields = $null;
	    
	    $list = $Listview.get_Items()
	    $item = $list.get_Item($line)
	    
	    foreach ($i in $item.get_SubItems()) {
	        $fields += $i.Text
	    }
	    $fields[0] = [BOOL] $item.get_checked()  #Set checked true or false!
	    return $fields
	}
	
	
	#=====================================================================================================
	# #Add a Line to a Windows Form View
	#=====================================================================================================
	function add-line([string[]]$columns, $Listview) {
	    foreach ($column in $columns) {
	        if ($column -eq $columns[0]) {
	            $item = new-object System.Windows.Forms.ListViewItem("")
	            if ($columns[0] -eq "True") { $item.set_checked($true) }
	            else { $item.set_checked($false) }
	        }
	        else {
	            $item.SubItems.Add($column) | out-null
	        }
	    }
	    #$item.checked = $true
	    
	    $Listview.Items.Add($item) | out-null
	}
	
	
	
	
	#=====================================================================================================
	# Fill a Windows FormView
	#=====================================================================================================
	function Fill-formViewXml {
	    param (#[String[][]] $data,
	        $view,
	        [xml] $xml,
	        [String] $key
	        
	    )
	    
	    $data = Get-XmlTableMatrix -tree $xml -Key $key
	    
	    $view.View = [System.Windows.Forms.View]::Details
	    $view.checkboxes = $true
	    
	    $view.LabelEdit = $false
	    $view.FullRowSelect = $true
	    $View.MultiSelect = $false
	    
	    for ($i = 0; $i -le $data[0].count - 1; $i++) {
	        $view.Columns.Add($data[0][$i], [int] $data[1][$i]) | Out-null
	    }
	    #FillData
	    
	    for ($i = 0; $i -le $data.count - 3; $i++) {
	        add-line $data[2+$i] $view
	    }
	}
	
	
	#=====================================================================================================
	# List2Xml Read dialog list and store it in the xml
	#=====================================================================================================
	function convert-List2Xml {
	    param (
	        $view,
	        [xml] $tree,
	        [String] $Key
	    )
	    
	    $count = $view.Items.Count
	    #Empty xml entry
	    $tree.CtxStr2msi.$Key.RemoveAll()
	    
	    #Columns
	    [String[]] $line = $null
	    [String[]] $size = $null
	    foreach ($item in $view.columns) {
	        $line += $item.Text
	        $size += $item.Width
	    }
	    Set-XmlTableLine -tree $tree $tree.CtxStr2msi -Key $key -row $line
	    Set-XmlTableLine -tree $tree $tree.CtxStr2msi -Key $key -row $size
	    
	    for ($i = 0; $i -lt $view.Items.Count; $i++) {
	        $line = read-Viewline -Listview $view -line $i
	        Set-XmlTableLine -tree $tree $tree.CtxStr2msi -Key $key -row $line
	    }
	}
	
	
	#=====================================================================================================
	# App-V2Msi edit functions
	#=====================================================================================================
	
	function Add-EditEntry($view) {
	    $CRow = @()
	    $COut = @()
	    for ($i = 0; $i -lt (($view.Columns).count - 1); $i++) {
	        $CRow += ""
	    }
	    $COut = GenerateEditForm(($CRow))
	    if (($COut -ne $null)) {
	        $COut = @($false) + $COut
	        if (($COut[1]) -ne "") {
	            add-line -columns $COut -Listview $view
	        }
	    }
	}
	
	function RemoveEditEntry($view) {
	    $a = $View.SelectedItems
	    if ($a -ne "") {
	        $View.items.Remove($a[0])
	    }
	}
	
	function Edit-EditEntry($view) {
	    $CRow = @()
	    $COut = @()
	    $entry = $view.SelectedItems
	    $item = ($view.get_SelectedIndices())[0]
	    if ($entry -ne "") {
	        $CRow = read-Viewline -Listview $view $item
	        #$CRow=$CRow.RemoveAt(0)
	        $CRow = $CRow[1..($CRow.Count - 1)]
	        $COut = GenerateEditForm(($CRow))
	        if ($COut -ne $null) {
	            if ($COut.count -ne 1) {
	                for ($i = 0; $i -lt $COut.count; $i++) {
	                    $View.Items[$item].SubItems[$i + 1].Text = ($COut[$i])
	                }
	            }
	            else {
	                $View.Items[$item].SubItems[1].Text = $COut
	            }
	        }
	    }
	}
	
	
	
	$RemoveFileExclBut.add_Click({ RemoveEditEntry $FileExclList })
	$AddFileExclBut.add_Click({ Add-EditEntry $FileExclList })
	$EditFileExclBut.add_Click({ Edit-EditEntry $FileExclList })
	
	$RemoveRegExclBut.add_Click({ RemoveEditEntry $RegExclList })
	$AddRegExclBut.add_Click({ Add-EditEntry $RegExclList })
	$EditRegExclBut.add_Click({ Edit-EditEntry $RegExclList })
	
	$RemovePathSubBut.add_Click({ RemoveEditEntry $PathSubstList })
	$AddPathSubBut.add_Click({ Add-EditEntry $PathSubstList })
	$EditPathSubBut.add_Click({ Edit-EditEntry $PathSubstList })
	
	$RemoveRegSubBut.add_Click({ RemoveEditEntry $RegSubstList })
	$AddRegSubBut.add_Click({ Add-EditEntry $RegSubstList })
	$EditRegSubBut.add_Click({ Edit-EditEntry $RegSubstList })
	
	
	#=====================================================================================================
	# Read from the dialog fielends and fill the xml
	#=====================================================================================================
	function set-xmlprojectsettingsfromGui() {
	    $Global:projectxml.CtxStr2msi.CtxStrPackagename = $PackagenameBox.Text #Filename of the msi
	    $Global:projectxml.CtxStr2msi.CtxStrDisplayName = $comboboxDisplayName.Text
	    $Global:projectxml.CtxStr2msi.CtxStrInstallDir = $comboboxInstallDir.Text
	    $Global:projectxml.CtxStr2msi.CtxStrProductcode = $ProductcodeBox.Text
	    $Global:projectxml.CtxStr2msi.CtxStrUpgradecode = $UpgradeCodeBox.Text
	    $Global:projectxml.CtxStr2msi.CtxStrVersion = $comboboxVersion.Text
	    $Global:projectxml.CtxStr2msi.CtxStrManufacturer = $ManufacturerBox.Text
	    $Global:projectxml.CtxStr2msi.CtxStrLanguage = $LanguageComb.Text
	    $Global:Projectxml.CtxStr2msi.CtxStrApp64Bit = ($check64BitBox.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.CtxStrAppActiveSetup = ($checkboxActiveSetup.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.CtxStrCreateAppV = ($checkboxConvertToAppV5.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.CtxStrAppMsiDialogs = ($checkboxCreateMsiDialogs.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.CtxStrHashGuid = ($RandomCheckGuidBox.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.ProjectRoot = "$Global:ProjectPath"
	    $Global:Projectxml.CtxStr2msi.CtxStrSourcefile = "$global:Ctxstr2msiFile"
	    
	    #Profile Files
	    $Global:Projectxml.CtxStr2msi.CtxStrPath = "$global:Ctxstr2msisourceFiles"
	    $Global:Projectxml.CtxStr2msi.CtxStrInstallRootDir = "$Global:InstallRootDir"
	    convert-List2Xml -view $FileExclList -tree $Global:projectxml -Key "CtxStr_EXCLUDE_DIR"
	    convert-List2Xml -view $RegExclList -tree $Global:projectxml -Key "CtxStr_EXCLUDE_REG_HIVES"
	    convert-List2Xml -view $PathSubstList -tree $Global:projectxml -Key "CtxStr_PATH_SUBST"
	    convert-List2Xml -view $RegSubstList -tree $Global:projectxml -Key "CtxStr_REG_SUBST"
	    convert-List2Xml -view $ShortcutList -tree $Global:projectxml -Key "CtxStr_Shortcuts"
	    
	    $Global:Projectxml.CtxStr2msi.CtxStrInstallRootDir = $textboxFolderRootDir.Text
	    $Global:Projectxml.CtxStr2msi.CtxStrDevicePath = $Global:CtxStrDevicePath
	    
	    $Global:Projectxml.CtxStr2msi.FullLoad = ($checkboxFullLoad.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.AppVTemplate = ($checkboxAppVTemplate.get_Checked()).toString()
	    $Global:Projectxml.CtxStr2msi.AppVTemplatePath = $textboxTemplate.text
	    
	}
	
	
	function Get-infoFromRegistrydat {
	    param ([STRING] $PATH,
	        [STRING] $HIVE,
	        [STRING] $PARAMETER
	    )
	    
	    
	    [STRING[]] $out = @()
	    try {
	        $HIVE = $HIVE -replace "\\", "/"
	        
	        [String] $Reglookup = "$rootDir\tool\reglookup\reglookup.exe"
	        [Array] $arguments = "-H", "-S", "-p", "$HIVE", "$PATH"
	        $a = @()
	        
	        $ErrorActionPreference = "SilentlyContinue"
	        $a = [string[]](& $Reglookup $arguments | where { $_ -match "/$PARAMETER," })
	        $ErrorActionPreference = "Continue"
	        
	        foreach ($item in $a) {
	            $tmp = @()
	            $tmp = $item.split(",")
	            $out += $tmp[$tmp.count - 2]
	        }
	    }
	    catch { Write-Host "Error" $_ }
	    return $out
	}
	
	
	#=====================================================================================================
	# Create Basedata from manifestFile
	#=====================================================================================================
	#extract XML Data from the .profile File
	
	function Create-BaseentrysfromConfigFile([String] $sourcePath) {
	    $objShell = $null;
	    $objFolder = $null;
	    $shell = $null;
	    $filename = $null;
	    $items = $null;
	    $strItem = $null
	    $zipItem = $null;
	    
	    #InitialData
	    $Global:projectxml = New-Object xml
	    $Global:projectxml.load($Global:ProjectSettingsFile)
	    
	
	    
	    #Clear Views
	    $FileExclList.Clear()
	    $RegExclList.Clear()
	    $PathSubstList.Clear()
	    $RegSubstList.Clear()
	    $ShortcutList.Items.Clear()
	    
	    Fill-formViewXml -xml $Global:projectxml -view $FileExclList -key "CtxStr_EXCLUDE_DIR"
	    Fill-formViewXml -xml $Global:projectxml -view $RegExclList -key "CtxStr_EXCLUDE_REG_HIVES"
	    Fill-formViewXml -xml $Global:projectxml -view $PathSubstList -key "CtxStr_PATH_SUBST"
	    Fill-formViewXml -xml $Global:projectxml -view $RegSubstList -key "CtxStr_REG_SUBST"
	    Fill-formViewXml -xml $Global:projectxml -view $ShortcutList -key "CtxStr_Shortcuts"
	    
	    
	    #Packagename = Profile Name
	    $CtxStr2MsiFileSystem = [xml] (Get-Content "$Global:Ctxstr2msiFile")
	    $PackagenameBox.text = (((Split-Path $sourcePath -Leaf).Split("."))[0])
	    
	    #RootContainer
	    $tmp = Split-Path $sourcePath
	    $CtxstrGUID = (Get-ChildItem ($tmp + "\" + ($CtxStr2MsiFileSystem.Package.Targets.Target.Guid) + "*")).name | Sort-Object | Select-Object -Last 1
	    
	    
	    [String[]] $val = @()
	    
	    #Find Display name
	    #
	    $sourceFiles = Split-Path $Global:Ctxstr2msiFile
	    $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/_ow6432node/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "DisplayName"
	    if ($val.count -eq 0) {
	        #Search in 64 Bit Hive
	        $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "DisplayName"
	    }
	    
	    $comboboxDisplayName.Items.clear()
	    if ($val.count -eq 0) {
	        $comboboxDisplayName.Items.Add($PackagenameBox.Text)
	    }
	    else {
	        $val | where { $comboboxDisplayName.Items.Add($_) }
	    }
	    $comboboxDisplayName.SelectedIndex = 0
	    
	    #
	    #Find Version
	    #
	    $val = @()
	    
	    $sourceFiles = Split-Path $Global:Ctxstr2msiFile
	    $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/_ow6432node/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "DisplayVersion"
	    if ($val.count -eq 0) {
	        #Search in 64 Bit Hive
	        $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "DisplayVersion"
	    }
	    
	    $comboboxVersion.Items.clear()
	    if ($val.count -eq 0) {
	        $comboboxVersion.Items.Add("1.0.0.0")
	    }
	    else {
	        $val | where { $comboboxVersion.Items.Add($_) }
	    }
	    $comboboxVersion.SelectedIndex = 0
	    
	    #
	    #Find Manufactor
	    #
	    $val = @()
	    $sourceFiles = Split-Path $Global:Ctxstr2msiFile
	    $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/_ow6432node/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "Publisher"
	    if ($val.count -eq 0) {
	        #Search in 64 Bit Hive
	        $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "Publisher"
	    }
	    if ($val.count -eq 0) { $ManufacturerBox.Text = "PACKAGE MANUFACTURE" }
	    else { $ManufacturerBox.Text = ($val) }
	    
	    
	    #Codes
	    $Global:GUIDPATH = $comboboxDisplayName.Text
	    $ProductcodeBox.Text = ToGuid -src "$Global:GUIDPATH-PRODUCTCODE"
	    $UpgradeCodeBox.Text = ToGuid -src "$Global:GUIDPATH-UPGRADECTCODE"
	    
	    #Language
	    $val = @()
	    $sourceFiles = Split-Path $Global:Ctxstr2msiFile
	    $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/_ow6432node/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "Language"
	    if ($val.count -eq 0) {
	        #Search in 64 Bit Hive
	        $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "Language"
	    }
	    
	    if ($val.count -eq 0) { $val += "1033" }
	    
	    #1033=english
	    #1031=german
	    $LanguageComb.Items.Clear()
	    
	    if ($LanguageComb.Items.Count -eq 0) {
	        $LanguageComb.Items.Add("de,1031")
	        $LanguageComb.Items.Add("en-us,1033")
	    }
	    
	    $LanguageComb.SelectedIndex = 1
	    if (($val[0]) -eq "1031") {
	        $LanguageComb.SelectedIndex = 0
	    }
	    
	    #
	    #Install Location "Install Root Dir"
	    #
	    $val = @()
	    $sourceFiles = Split-Path $Global:Ctxstr2msiFile
	    $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/_ow6432node/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "InstallLocation"
	    if ($val.count -eq 0) {
	        #Search in 64 Bit Hive
	        $val = Get-infoFromRegistrydat -PATH "$sourceFiles\$CtxstrGUID\InstallRoot.dat" -HIVE "/REGISTRY/MACHINE/software/Microsoft/Windows/CurrentVersion/Uninstall/" -PARAMETER "InstallLocation"
	    }
	    
	    
	    #$Global:InstallRootDir = $val
	    
	    $comboboxInstallDir.Items.Clear()
	    
	    $item = "" #add 2013-02-24
	    
	    if (($val.count -eq 0) -or ($val[0] -eq "")) {
	        $comboboxInstallDir.Items.Add("\nick-it\" + ($PackagenameBox.Text) + "\")
	    }
	    else {
	        
	        foreach ($item in $val) {
	            $item = $item -replace "C:\\Program Files \(x86\)\\", ""
	            $item = $item -replace "C:\\Program Files\\", ""       # Filter the Pathnames
	            $item = $item -replace "C:\\Programme\\", ""       # Filter the Pathnames
	            $item = $item -replace ":", ""
	            
	            $comboboxInstallDir.Items.Add("\nick-it\" + $item)
	        }
	    }
	    $comboboxInstallDir.SelectedIndex = 0
	    
	    $InstallFromRoot = $item #\app\ppdown
	    
	    #
	    #Detect [APPLICATIONROOTDIRECTORY]
	    #$sourceFiles\$CtxstrGUID\
	    #
	    #TestApp
	    $FirstApp = $null
	    $Path = $null
	    $FirstApp = $CtxStr2MsiFileSystem.Package.Targets.Target.Apps.App.InitialExe
	    $Elements = $FirstApp.Split("\")
	    
	    $Path = "$sourceFiles\$CtxstrGUID\" + ($Elements[0]) + "\" + ($Elements[1]) + "\" + ($Elements[2]) + "\" + ($Elements[3])
	    
	    
	    #Check, if there are some supDirectorys
	    if ($InstallFromRoot -match ((get-Matcher -str $Elements[3]) + "\\")) { $path = $path -replace ($Elements[3]), $InstallFromRoot }
	    $Path = $Path -replace "\\$", ""
	    
	    
	    if ($Path -match ".exe$") { $Path = Split-Path $Path }
	    
	    $Global:InstallRootDir = $Path
	    $textboxFolderRootDir.Text = $Path
	    
	    $folderbrowserdialogRoot.SelectedPath = "$sourceFiles\$CtxstrGUID\" + ($Elements[0]) + "\" + ($Elements[1]) + "\" + ($Elements[2])
	    
	    $Global:CtxStrDevicePath = "$sourceFiles\$CtxstrGUID\"
	    
	    #
	    # Icon Section - process Icons
	    #
	    
	    $ShortcutIconsImageList.Images.Clear()
	    
	    $ShortcutList.SmallImageList = $ShortcutIconsImageList
	    
	    Extract-CitrixIcons -BinPath "$sourceFiles\icons.bin" -ProfilePath $sourcePath -OutPath "$Global:ProjectPath\icons"
	    
	    $ctxProfile = New-Object xml
	    $ctxProfile.Load("$sourcePath")
	    $i = 0
	    
	    
	    [String[]] $dataline = New-Object String[] 6
	    $key = 0
	    foreach ($Appnode in $ctxProfile.package.Targets.Target.Apps.ChildNodes) {
	        #AddEntry
	        $dataline[0] = "True" #Checked?
	        $dataline[1] = $Appnode.Name
	        $dataline[2] = "Start Menu"
	        $dataline[3] = $Appnode.InitialExe
	        $dataline[4] = $Appnode.WorkingDir
	        $dataline[5] = ""
	        add-line $dataline $ShortcutList
	        
	        foreach ($Appiconnode in $ctxProfile.package.apps.ChildNodes) {
	            $i = 0
	            
	            # Write-Host "AddIcon: " $Appiconnode.Name "and" $Appnode.Name
	            if ($Appiconnode.Name -eq $Appnode.Name) {
	                foreach ($Iconsnode in $Appiconnode.icons.ChildNodes) {
	                    # Write-Host  $Iconsnode.Size
	                    
	                    if ($Iconsnode.default -eq "1") {
	                        #Copy icon to cache
	                        $GUIDPATH = [System.Guid]::NewGuid()
	                        Copy-Item  ("$Global:ProjectPath\icons\" + $Appiconnode.Name + "\Icon_$i.ico") -Destination "$ENV:appdata\nick-it\ctxstr2msi\iconcache\$GUIDPATH.ico"
	                        
	                        $image = [System.Drawing.Image]::FromFile("$ENV:appdata\nick-it\ctxstr2msi\iconcache\$GUIDPATH.ico")
	                        
	                        $ShortcutIconsImageList.Images.Add([String]$key, $Image)
	                        $ShortcutList.Items[$ShortcutList.Items.Count - 1].ImageIndex = $key
	                        $ShortcutList.Items[$ShortcutList.Items.Count - 1].SubItems[$ShortcutList.Items[$ShortcutList.Items.Count - 1].SubItems.Count - 1].text = ("$Global:ProjectPath\icons\" + $Appiconnode.Name + "\Icon_$i.ico")
	                        
	                        $key++
	                        
	                        break
	                    }
	                    $i++
	                }
	            }
	        }
	    }
	    
	    
	    
	}
	
	
	#=====================================================================================================
	# Set gui fields from the xml
	#=====================================================================================================
	
	function set-guiprojectsettingsfromxml() {
	    $PackagenameBox.Text = $Global:projectxml.CtxStr2msi.CtxStrPackagename  #Filename of the msi
	    $comboboxDisplayName.Text = $Global:projectxml.CtxStr2msi.CtxStrDisplayName
	    
	    $comboboxInstallDir.Text = $Global:projectxml.CtxStr2msi.CtxStrInstallDir
	    $ProductcodeBox.Text = $Global:projectxml.CtxStr2msi.CtxStrProductcode
	    $UpgradeCodeBox.Text = $Global:projectxml.CtxStr2msi.CtxStrUpgradecode
	    $comboboxVersion.Text = $Global:projectxml.CtxStr2msi.CtxStrVersion
	    $ManufacturerBox.Text = $Global:projectxml.CtxStr2msi.CtxStrManufacturer
	    
	    
	    
	    if ($LanguageComb.Items.Count -eq 0) {
	        $LanguageComb.Items.Add("de,1031")
	        $LanguageComb.Items.Add("en-us,1033")
	    }
	    [String]$Lang = ($Global:projectxml.CtxStr2msi.CtxStrLanguage)
	    $Lang.Trim()
	    $LanguageComb.SelectedItem = $Lang
	    #Write-Host "Language" """"$Global:projectxml.CtxStr2msi.CtxStrLanguage""""
	    
	    #$LanguageComb.SelectedItem = "de,1031"
	    
	    $check64BitBox.Checked = ($Global:Projectxml.CtxStr2msi.CtxStrApp64Bit -eq "True")
	    $checkboxActiveSetup.Checked = ($Global:Projectxml.CtxStr2msi.CtxStrAppActiveSetup -eq "True")
	    $checkboxConvertToAppV5.Checked = ($Global:Projectxml.CtxStr2msi.CtxStrCreateAppV -eq "True")
	    $checkboxCreateMsiDialogs.Checked = ($Global:Projectxml.CtxStr2msi.CtxStrAppMsiDialogs -eq "True")
	    
	    $RandomCheckGuidBox.Checked = ($Global:Projectxml.CtxStr2msi.CtxStrHashGuid -eq "True")
	    
	    $global:Ctxstr2msiFile = $Global:Projectxml.CtxStr2msi.CtxStrSourcefile
	    $PathText.Text = $Global:Projectxml.CtxStr2msi.CtxStrSourcefile
	    $Global:CtxStrDevicePath = $Global:Projectxml.CtxStr2msi.CtxStrDevicePath
	    
	    $global:Ctxstr2msisourceFiles = $Global:Projectxml.CtxStr2msi.CtxStrPath
	    
	    #Clear Views
	    $FileExclList.Clear()
	    $RegExclList.Clear()
	    $PathSubstList.Clear()
	    $RegSubstList.Clear()
	    $ShortcutList.Clear()
	    
	    Fill-formViewXml -xml $Global:projectxml -view $FileExclList -key "CtxStr_EXCLUDE_DIR"
	    Fill-formViewXml -xml $Global:projectxml -view $RegExclList -key "CtxStr_EXCLUDE_REG_HIVES"
	    Fill-formViewXml -xml $Global:projectxml -view $PathSubstList -key "CtxStr_PATH_SUBST"
	    Fill-formViewXml -xml $Global:projectxml -view $RegSubstList -key "CtxStr_REG_SUBST"
	    Fill-formViewXml -xml $Global:projectxml -view $ShortcutList -key "CtxStr_Shortcuts"
	    
	    #Load Icons
	    
	    $ShortcutIconsImageList.Images.Clear()
	    $ShortcutList.SmallImageList = $ShortcutIconsImageList
	    
	    $Key = 0
	    foreach ($item in $ShortcutList.Items) {
	        $iconname = Split-Path ($item.SubItems[5].text) -Leaf
	        #Copy icon to cache
	        $GUIDPATH = [System.Guid]::NewGuid()
	        Copy-Item  ("$Global:ProjectPath\icons\" + ($item.SubItems[1].text) + "\$iconname") -Destination "$ENV:appdata\nick-it\ctxstr2msi\iconcache\$GUIDPATH.ico"
	        $image = [System.Drawing.Image]::FromFile("$ENV:appdata\nick-it\ctxstr2msi\iconcache\$GUIDPATH.ico")
	        
	        $item.SubItems[5].text = "$Global:ProjectPath\icons\" + ($item.SubItems[1].text) + "\$iconname"
	        $ShortcutIconsImageList.Images.Add([String]$key, $image)
	        $item.ImageIndex = $key
	        $Key++
	    }
	    
	    $Global:InstallRootDir = $Global:projectxml.CtxStr2msi.ProjectRoot
	    $textboxFolderRootDir.text = $Global:projectxml.CtxStr2msi.CtxStrInstallRootDir
	    $folderbrowserdialogRoot.SelectedPath = [String]($Global:projectxml.CtxStr2msi.CtxStrInstallRootDir)
	    
	    if ($checkboxConvertToAppV5.Checked) {
	        $groupbox1.Enabled = $true
	    }
	    else {
	        $groupbox1.Enabled = $false
	    }
	    
	    $checkboxFullLoad.Checked = ($Global:Projectxml.CtxStr2msi.FullLoad -eq "True")
	    $checkboxAppVTemplate.Checked = ($Global:Projectxml.CtxStr2msi.AppVTemplate -eq "True")
	    $textboxTemplate.text = $Global:Projectxml.CtxStr2msi.AppVTemplatePath
	    
	    
	}
	
	
	#=====================================================================================================
	# CtxStr2Msi Save Project
	#=====================================================================================================
	function Save-Project {
	    set-xmlprojectsettingsfromGui
	    $Global:Projectxml.save($Global:ProjectSettingsFile)
	    write-logbox -line "Project file saved"
	}
	
	
	$ToolStripMenuItemSavePrpject_Click = {
	    set-xmlprojectsettingsfromGui
	    $Global:Projectxml.save($Global:ProjectSettingsFile)
	}
	
	
	function newProject_Commandline([String] $PPath) {
	    
	    $Global:ProjectPath = $PPath
	    $tempArr = $Global:ProjectPath.split("\")
	    $Global:ProjectFolder = ($tempArr[$tempArr.count - 1])
	    $Global:LogDir = "$Global:ProjectPath\Logs"
	    
	    #Copy APP-V File to ProjectFolder
	    $Global:ProjectSettingsFile = ("$Global:ProjectPath\ctxstr2msi_" + $Global:ProjectFolder + "_Settings.xml")
	    
	    #Copy Konfiguration
	    Copy-Item "$rootdir\Ctx2msi_Windows7_64Bit_Settings.xml" -Destination "$Global:ProjectSettingsFile" -Force
	    $Global:FromopenedProject = $false
	    
	    #---------------------
	    $FileExclList.Clear()
	    $RegExclList.Clear()
	    $PathSubstList.Clear()
	    $RegSubstList.Clear()
	    $ShortcutList.Clear()
	    #---------------------
	    $comboboxDisplayName.Items.Clear()
	    $comboboxDisplayName.Text = ""
	    $comboboxInstallDir.Items.Clear()
	    $comboboxInstallDir.Text = ""
	    $comboboxVersion.Items.Clear()
	    $comboboxVersion.Text = ""
	    
	    $checkboxConvertToAppV5.Checked = $flase
	    
	    $groupbox1.Enabled = $false
	    $checkboxAppVTemplate.Checked = $false
	    $checkboxFullLoad.Checked = $false
	    $textboxTemplate.Text = ($Global:rootDir + "\AppBotAppVTemplate.appvt")
	    
	    $PathText.Clear()
	    $PackagenameBox.Clear()
	    $comboboxDisplayName.Items.Clear()
	    $ComboboxInstallDir.Items.Clear()
	    $ProductcodeBox.Clear()
	    $UpgradeCodeBox.Clear()
	    $comboboxVersion.Items.Clear()
	    $ManufacturerBox.Clear()
	    $LanguageComb.ResetText()
	    $check64BitBox.Checked = $false
	    $checkboxCreateMsiDialogs.Checked = $false
	    $checkboxActiveSetup = $true
	    $RandomCheckGuidBox.Checked = $false
	    
	    $PathText.Enabled = $trues
	    $FileBut.Enabled = $true
	    $ToolStripMenuItemSavePrpject.Enabled = $true
	    $Global:projectxml = New-Object xml
	}
	
	
	function Open-Profile([String] $profile) {
	    
	    $global:Ctxstr2msiFile = $profile
	    $global:Ctxstr2msisourceFiles = Split-Path $global:Ctxstr2msiFile -Parent
	    $PathText.set_Text($Ctxstr2msiFile)
	    if ($Global:FromopenedProject -eq $false) {
	        Create-BaseentrysfromConfigFile($global:Ctxstr2msiFile)
	        $PathText.Enabled = $false
	        Save-Project
	    }
	    
	    
	}
	
	
	#=====================================================================================================
	#
	# Process Commandline Parameter
	#
	#=====================================================================================================
	
	function Process-Commandline {
	    
	    try {
	        #Disable Button
	        if (($Global:CommadlineDictionary.keys -contains "autostart")) {
	            $FileBut.Enabled = $false
	        }
	        
	        if ($Global:CommadlineDictionary.count -ge 1) {
	            #ProjectPath
	            if ($Global:CommadlineDictionary.keys -contains "ProjectPath") {
	                if ($Global:CommadlineDictionary["ProjectPath"].length -gt 1) {
	                    #Create Projectpath
	                    $ppath = ($Global:CommadlineDictionary["ProjectPath"])
	                    New-Item  $ppath -Type directory -Force
	                    newProject_Commandline -PPath $ppath
	                }
	                else {
	                    Throw "Pojectpath value not defined"
	                }
	            } # Commandline is defined! Create default Project!
	            else {
	                $ppath = ($Global:ProjectDefaultPath + (Split-Path $Global:CommadlineDictionary["ProfilePath"] -Leaf))
	                New-Item  $ppath -Type directory -Force
	                newProject_Commandline -PPath $ppath
	            }
	        }
	        if ($Global:CommadlineDictionary.keys -contains "ProfilePath") {
	            Open-Profile -profile $Global:CommadlineDictionary["ProfilePath"]
	            if (!($Global:CommadlineDictionary.keys -contains "autostart")) {
	                #No Autostart, enable some Fields
	                $TabControl.Enabled = $true
	                $StartBut.Enabled = $true
	            }
	        }
	        
	        #Start the Process
	        if (($Global:CommadlineDictionary.keys -contains "autostart")) {
	            & $StartBut_Click
	        }
	        
	        if (($Global:CommadlineDictionary.keys -contains "autoexit")) {
	            $MainDialog.Close()
	        }
	        
	        
	    }
	    catch {
	        show-message ("Error processing commandline : " + $_)
	        Write-logbox ("Error processing commandline : " + $_)
	    }
	    
	    #Open-Profile -profile $Global:CommadlineDictionary["ProfilePath"]
	    
	}
	
	
	
	#=====================================================================================================
	# Initail Parameters in the Mail Dialog
	#=====================================================================================================
	
	$MainDialog_Shown = {
	    
	    $TabControl.Enabled = $false
	    $PathText.Enabled = $false
	    $FileBut.Enabled = $false
	    $StartBut.Enabled = $false
	    $ToolStripMenuItemSavePrpject.Enabled = $false
	    $selectFolderDialog.SelectedPath = [System.Environment]::GetFolderPath("mydocuments") + "\ctxstr2msi\Projects\"
	    $openProjectDialog.InitialDirectory = [System.Environment]::GetFolderPath("mydocuments") + "\ctxstr2msi\Projects\"
	    $LogOutBox.ReadOnly = $true
	    $LogOutBox.AppendText("Streaming Profile converter to App-V 5 and to msi" + [CHAR](13))
	    $LogOutBox.AppendText("Copyright 2013 Nick Informationstechnik GmbH" + [CHAR](13))
	    $LogOutBox.AppendText("http://www.nick-it.de" + [CHAR](13))
	    $LogOutBox.AppendText("" + [CHAR](13))
	    $LogOutBox.AppendText("Ctxstr2msi is copyrighted material. They may only be downloaded from the")
	    $LogOutBox.AppendText("links I provide.  You may download them only use for tests, if you want to do")
	    $LogOutBox.AppendText("anything else with it, you have to ask me first.  Full terms and conditions are")
	    #$LogOutBox.AppendText("available in the textfile {\rtf1\ansi file:////$RootDir\Licence.rtf \v # file:////$RootDir\Licence.rtf \v0}"+[CHAR](13)+[CHAR](13))
	    [System.Reflection.Assembly]::LoadWithPartialName("System.web")
	    $htmlPath = [System.Web.HttpUtility]::UrlPathEncode($RootDir)
	    $LogOutBox.AppendText("available in the textfile file:////$htmlPath\Licence.rtf" + [CHAR](13) + [CHAR](13))
	    
	    $textboxTemplate.Enabled = $false
	    $SelectTemplatePath.Enabled = $false
	    
	    
	    #CreateRegKeys
	    if (test-path -Path HKCU:\software\nick-it){
	}
	else {
	    New-Item -Path HKCU:\software\nick-it
	    New-Item -Path HKCU:\software\nick-it\AppBot
	    New-ItemProperty -Name "Initial" -Value "true" -Path HKCU:\software\nick-it\AppBot
	}
	
	#Image-Cache
	if ((Test-Path "$ENV:appdata\nick-it\ctxstr2msi\iconcache")) { Remove-Item "$ENV:appdata\nick-it\ctxstr2msi\iconcache\" -Recurse -Force }
	if (!(Test-Path "$ENV:appdata\nick-it\ctxstr2msi\iconcache")) { new-Item "$ENV:appdata\nick-it\ctxstr2msi\iconcache" -Type Directory -force }
	
	Process-Commandline
	
	}
	
	
	
	
	$newProject_Click = {
	    if ($selectFolderDialog.ShowDialog() -eq "OK") {
	        $Global:ProjectPath = $selectFolderDialog.SelectedPath
	        $tempArr = $Global:ProjectPath.split("\")
	        $Global:ProjectFolder = ($tempArr[$tempArr.count - 1])
	        $Global:LogDir = "$Global:ProjectPath\Logs"
	        
	        #Copy APP-V File to ProjectFolder
	        $Global:ProjectSettingsFile = ("$Global:ProjectPath\ctxstr2msi_" + $Global:ProjectFolder + "_Settings.xml")
	        
	        #Copy Konfiguration
	        Copy-Item "$rootdir\Ctx2msi_Windows7_64Bit_Settings.xml" -Destination "$Global:ProjectSettingsFile" -Force
	        $Global:FromopenedProject = $false
	        
	        #---------------------
	        $FileExclList.Clear()
	        $RegExclList.Clear()
	        $PathSubstList.Clear()
	        $RegSubstList.Clear()
	        $ShortcutList.Clear()
	        #---------------------
	        $comboboxDisplayName.Items.Clear()
	        $comboboxDisplayName.Text = ""
	        $comboboxInstallDir.Items.Clear()
	        $comboboxInstallDir.Text = ""
	        $comboboxVersion.Items.Clear()
	        $comboboxVersion.Text = ""
	        $checkboxCreateMsiDialogs.Checked = $false
	        $checkboxConvertToAppV5.Checked = $flase
	        
	        $checkboxFullLoad.Checked = $flase
	        $checkboxAppVTemplate = $false
	        $textboxTemplate.Text = ($Global:rootDir + "\AppBotAppVTemplate.appvt")
	        $groupbox1.Enabled = $false
	        
	        $PathText.Clear()
	        $PackagenameBox.Clear()
	        $comboboxDisplayName.Items.Clear()
	        $ComboboxInstallDir.Items.Clear()
	        $ProductcodeBox.Clear()
	        $UpgradeCodeBox.Clear()
	        $comboboxVersion.Items.Clear()
	        $ManufacturerBox.Clear()
	        $LanguageComb.ResetText()
	        $check64BitBox.Checked = $false
	        $checkboxCreateMsiDialogs.Checked = $false
	        $checkboxActiveSetup = $true
	        $RandomCheckGuidBox.Checked = $false
	        $PathText.Enabled = $trues
	        $FileBut.Enabled = $true
	        $ToolStripMenuItemSavePrpject.Enabled = $true
	        $Global:projectxml = New-Object xml
	    }
	}
	
	
	
	#=====================================================================================================
	# Open a Citrix Profile File
	#=====================================================================================================
	$FileBut_Click = {
	    
	    $openfiledialogProfile.set_Filter("Citrix Profile (*.profile)|*.profile")
	    
	
	    
	    if ($PathText.Text -ne "") {
	        $temppath = ($PathText.Text).split("\")
	        $temppath = ($PathText.Text) -replace ("\\" + ($temppath[$temppath.count - 1])), ""
	        $openfiledialogProfile.InitialDirectory = "$temppath\"
	    }
	    
	    if ($openfiledialogProfile.ShowDialog() -eq "OK") {
	        $global:Ctxstr2msiFile = $openfiledialogProfile.get_FileName()
	        $global:Ctxstr2msisourceFiles = Split-Path $global:Ctxstr2msiFile -Parent
	        
	        $PathText.set_Text($Ctxstr2msiFile)
	        
	        if ($Global:ueberpruefungsvariante) {
	            $FileCount = (Get-ChildItem (Split-Path "$global:Ctxstr2msiFile") -recurse | where-object { -not ($_.PSIsContainer) }).Count
	            if ($FileCount -gt 70) {
	                [System.Windows.Forms.MessageBox]::Show("This Trial version accept max 50 files in your project. Filecount = $FileCount.")
	            }
	        }
	        
	        if ($Global:FromopenedProject -eq $false) {
	            Create-BaseentrysfromConfigFile($global:Ctxstr2msiFile)
	            $PathText.Enabled = $false
	            $TabControl.Enabled = $true
	            $StartBut.Enabled = $true
	            Save-Project
	        }
	    }
	}
	
	
	#=====================================================================================================
	#Open Project
	#=====================================================================================================
	$ToolStripMenuItemOpenProject_Click = {
	    
	    $openProjectDialog.set_Filter("App2msi Projectfile (*.xml)|*.xml")
	    #$openFileDialog2.InitialDirectory = $Global:ProjectDefaultPath_oshlash
	    
	    if ($openProjectDialog.ShowDialog() -eq "OK") {
	        
	        $Global:projectxml = New-Object xml
	        $Global:ProjectSettingsFile = $openProjectDialog.get_FileName()
	        $Global:projectxml.load($Global:ProjectSettingsFile)
	        $Global:ProjectPath = $Global:Projectxml.CtxStr2msi.ProjectRoot
	        set-guiprojectsettingsfromxml
	        $Global:FromopenedProject = $true
	        $PathText.Enabled = $trues
	        $FileBut.Enabled = $true
	        $ToolStripMenuItemSavePrpject.Enabled = $true
	        $TabControl.Enabled = $true
	        $StartBut.Enabled = $true
	        
	        
	        if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
	            #[System.Windows.Forms.MessageBox]::Show("You need admin rights to create a App-V package. Plese run this application ""As Administrator""")
	            $checkboxConvertToAppV5.Checked = $false
	            
	        }
	    }
	}
	
	$exitToolStripMenuItem_Click = {
	    if ($PackagenameBox.Text -ne "") {
	        Save-Project
	    }
	    $MainDialog.Close()
	}
	
	
	$buttonBrowseFolderRoot_Click = {
	    if ($folderbrowserdialogRoot.ShowDialog() -eq 'OK') {
	        $textboxFolderRootDir.Text = $folderbrowserdialogRoot.SelectedPath
	    }
	}
	
	
	#
	# Generate the msi
	#
	
	$StartBut_Click = {
	    
	    $FileCount = 0
	    if ($Global:ueberpruefungsvariante) {
	        $FileCount = (Get-ChildItem (Split-Path "$global:Ctxstr2msiFile") -recurse | where-object { -not ($_.PSIsContainer) }).Count
	        if ($FileCount -gt 70) {
	            [System.Windows.Forms.MessageBox]::Show("This Trial version accept max 50 files in your project. Filecount = $FileCount.")
	        }
	    }
	    
	    if((!$Global:ueberpruefungsvariante) -or ($FileCount -lt 70)) {
	        
	        $TabControl.Enabled = $false
	        $PathText.Enabled = $false
	        $FileBut.Enabled = $false
	        $StartBut.Enabled = $false
	        $toolstripsplitbutton1.Enabled = $false
	        
	        Save-Project
	        Generate-CtxStrMSIXml -Projectfile $Global:Projectxml
	        $TabControl.Enabled = $true
	        $PathText.Enabled = $true
	        $FileBut.Enabled = $true
	        $StartBut.Enabled = $true
	        $toolstripsplitbutton1.Enabled = $true
	    }
	}
	
	$OnLoadFormEvent = {
	    #TODO: Place custom script here
	    
	}
	
	
	#$progressbaroverlay1.Style = "Marquee"
	$buttonSelectIcon_Click = {
	    $a = $ShortcutList.SelectedItems
	    if ($a -ne "") {
	        $OpenIconDialog.set_Filter("Icon File (*.ico)|*.ico")
	        $OpenIconDialog.FileName = ($ShortcutList.SelectedItems[0].SubItems[5].text)
	        $OpenIconDialog.InitialDirectory = Split-Path ($ShortcutList.SelectedItems[0].SubItems[5].text)
	        #Write-Host "$Iconpath" $iconpath
	        
	        
	        if ($openIconDialog.ShowDialog() -eq "OK") {
	            $index = $ShortcutList.SelectedItems[0].ImageIndex
	            #Copy icon to cache
	            $GUIDPATH = [System.Guid]::NewGuid()
	            Copy-Item  ($OpenIconDialog.FileName) -Destination "$ENV:appdata\nick-it\ctxstr2msi\iconcache\$GUIDPATH.ico"
	            
	            $ShortcutIconsImageList.Images[$index] = [System.Drawing.Image]::FromFile("$ENV:appdata\nick-it\ctxstr2msi\iconcache\$GUIDPATH.ico")
	            $ShortcutList.SelectedItems[0].SubItems[5].text = $OpenIconDialog.FileName
	            $MainDialog.Refresh()
	        }
	        
	    }
	}
	
	$checkboxConvertToAppV5_CheckedChanged = {
	    
	    #64Bit Application on 64 Bit OS or 32Bit on 32 BitOS?
	    if ((([IntPtr]::Size -eq 8) -and ((Get-WmiObject Win32_OperatingSystem).OSArchitecture -like "64*")) -or
	    (([IntPtr]::Size -eq 4) -and ((Get-WmiObject Win32_OperatingSystem).OSArchitecture -like "32*"))) {
	        
	        
	        if ($checkboxConvertToAppV5.Checked -eq $true) {
	            $app = $null
	            
	            $app = Get-ChildItem "hklm:\software\microsoft\windows\currentversion\uninstall" | foreach { Get-ItemProperty $_.PSPath } | select DisplayVersion, DisplayName | where { $_.DisplayName -match "\(App-V\).Sequencer" }
	            
	            $build = (([regex] "^\d+\.\d+\.(?<build>\d+)\.\d+").Match($app[0].DisplayVersion))
	            $ibuild = [int] $build.Groups["build"].Value
	            
	            if (!($app) -or ($ibuild -lt 285)) {
	                [System.Windows.Forms.MessageBox]::Show("Please install a App-V Sequencer 5.0 or greater on this machine")
	                $checkboxConvertToAppV5.Checked = $false
	                $groupbox1.Enabled = $false
	            }
	            else {
	                
	                if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
	                    [System.Windows.Forms.MessageBox]::Show("You need admin rights to create a App-V package. Plese run this application ""As Administrator""")
	                    #LogInfo -Path $LogFile -Wert "INFO" -Ausg "Twice"
	                    $checkboxConvertToAppV5.Checked = $false
	                    $groupbox1.Enabled = $false
	                }
	                else {
	                    $checkboxCreateMsiDialogs.Checked = $false
	                    $checkboxConvertToAppV5.Checked = $true
	                    $groupbox1.Enabled = $true
	                }
	                
	            }
	        }
	        else {
	            $groupbox1.Enabled = $false
	        }
	    }
	    else {
	        if ($checkboxConvertToAppV5.Checked) {
	            $checkboxConvertToAppV5.Checked = $false
	            $groupbox1.Enabled = $false
	            [System.Windows.Forms.MessageBox]::Show("Please use for App-V the 64 Bit version of AppBot on a 64 Bit OS and the 32 Bit Version of AppBot on a 32 Bit OS")
	        }
	    }
	}
	
	
	
	$toolstripbuttonHelp_Click = {
	    & "C:\Program Files\Internet Explorer\iexplore.exe" "http://www.software-virtualisierung.de/entry/appbot-citrix-application-streaming-to-app-v-converter.html"
	    
	}
	
	$checkboxCreateMsiDialogs_CheckedChanged = {
	    if ($checkboxConvertToAppV5.Checked) {
	        $checkboxConvertToAppV5.Checked = $false
	        $groupbox1.Enabled = $false
	    }
	}
	
	$GenProductCodeBut_Click = {
	    $ProductcodeBox.text = [system.Guid]::newGuid()
	    
	}
	
	$GenUpgradeCodeBut_Click = {
	   $UpgradeCodeBox.text = [system.Guid]::newGuid()
	    
	}
	
	
	$checkboxAppVTemplate_CheckedChanged={
	    if ($checkboxAppVTemplate.Checked -eq $true) {
	        $textboxTemplate.Enabled = $true
	        $SelectTemplatePath.Enabled = $true
	    }
	    else {
	        $textboxTemplate.Enabled = $false
	        $SelectTemplatePath.Enabled = $false
	        
	    }
	    
	}
	
	$SelectTemplatePath_Click={
	    $openTemplateDialog.set_Filter("App-V template file (*.appvt)|*.appvt")
	    $openTemplateDialog.InitialDirectory = $Global:rootDir
	    if ($openTemplateDialog.ShowDialog() -eq "OK") {
	        $textboxTemplate.Text = $openTemplateDialog.FileName
	        
	    }
	    
	    
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainDialog.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:CtxStr2Msi_Form_LogOutBox = $LogOutBox.Text
		$script:CtxStr2Msi_Form_textboxTemplate = $textboxTemplate.Text
		$script:CtxStr2Msi_Form_checkboxAppVTemplate = $checkboxAppVTemplate.Checked
		$script:CtxStr2Msi_Form_checkboxFullLoad = $checkboxFullLoad.Checked
		$script:CtxStr2Msi_Form_checkboxConvertToAppV5 = $checkboxConvertToAppV5.Checked
		$script:CtxStr2Msi_Form_textboxFolderRootDir = $textboxFolderRootDir.Text
		$script:CtxStr2Msi_Form_comboboxInstallDir = $comboboxInstallDir.Text
		$script:CtxStr2Msi_Form_comboboxInstallDir_SelectedItem = $comboboxInstallDir.SelectedItem
		$script:CtxStr2Msi_Form_comboboxVersion = $comboboxVersion.Text
		$script:CtxStr2Msi_Form_comboboxVersion_SelectedItem = $comboboxVersion.SelectedItem
		$script:CtxStr2Msi_Form_comboboxDisplayName = $comboboxDisplayName.Text
		$script:CtxStr2Msi_Form_comboboxDisplayName_SelectedItem = $comboboxDisplayName.SelectedItem
		$script:CtxStr2Msi_Form_checkboxActiveSetup = $checkboxActiveSetup.Checked
		$script:CtxStr2Msi_Form_check64BitBox = $check64BitBox.Checked
		$script:CtxStr2Msi_Form_checkboxCreateMsiDialogs = $checkboxCreateMsiDialogs.Checked
		$script:CtxStr2Msi_Form_RandomCheckGuidBox = $RandomCheckGuidBox.Checked
		$script:CtxStr2Msi_Form_ManufacturerBox = $ManufacturerBox.Text
		$script:CtxStr2Msi_Form_UpgradeCodeBox = $UpgradeCodeBox.Text
		$script:CtxStr2Msi_Form_LanguageComb = $LanguageComb.Text
		$script:CtxStr2Msi_Form_LanguageComb_SelectedItem = $LanguageComb.SelectedItem
		$script:CtxStr2Msi_Form_PackagenameBox = $PackagenameBox.Text
		$script:CtxStr2Msi_Form_ProductcodeBox = $ProductcodeBox.Text
		$script:CtxStr2Msi_Form_FileExclList = $FileExclList.SelectedItems
		$script:CtxStr2Msi_Form_RegExclList = $RegExclList.SelectedItems
		$script:CtxStr2Msi_Form_PathSubstList = $PathSubstList.SelectedItems
		$script:CtxStr2Msi_Form_RegSubstList = $RegSubstList.SelectedItems
		$script:CtxStr2Msi_Form_ShortcutList = $ShortcutList.SelectedItems
		$script:CtxStr2Msi_Form_ShortcutList_Checked = $ShortcutList.CheckedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$MainDialog.remove_Load($OnLoadFormEvent)
			$MainDialog.remove_Shown($MainDialog_Shown)
			$SelectTemplatePath.remove_Click($SelectTemplatePath_Click)
			$checkboxAppVTemplate.remove_CheckedChanged($checkboxAppVTemplate_CheckedChanged)
			$checkboxConvertToAppV5.remove_CheckedChanged($checkboxConvertToAppV5_CheckedChanged)
			$buttonBrowseFolderRoot.remove_Click($buttonBrowseFolderRoot_Click)
			$checkboxCreateMsiDialogs.remove_CheckedChanged($checkboxCreateMsiDialogs_CheckedChanged)
			$GenUpgradeCodeBut.remove_Click($GenUpgradeCodeBut_Click)
			$GenProductCodeBut.remove_Click($GenProductCodeBut_Click)
			$newProject.remove_Click($newProject_Click)
			$ToolStripMenuItemSavePrpject.remove_Click($ToolStripMenuItemSavePrpject_Click)
			$ToolStripMenuItemOpenProject.remove_Click($ToolStripMenuItemOpenProject_Click)
			$FileBut.remove_Click($FileBut_Click)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$StartBut.remove_Click($StartBut_Click)
			$toolstripbuttonHelp.remove_Click($toolstripbuttonHelp_Click)
			$buttonSelectIcon.remove_Click($buttonSelectIcon_Click)
			$MainDialog.remove_Load($Form_StateCorrection_Load)
			$MainDialog.remove_Closing($Form_StoreValues_Closing)
			$MainDialog.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainDialog.SuspendLayout()
	$splitcontainer1.SuspendLayout()
	$tabcontrol.SuspendLayout()
	$tabBaseData.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabShortcuts.SuspendLayout()
	$splitcontainer2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$splitcontainer3.SuspendLayout()
	$tabpage4.SuspendLayout()
	$splitcontainer4.SuspendLayout()
	$tabpage2.SuspendLayout()
	$splitcontainer5.SuspendLayout()
	$tabpage1.SuspendLayout()
	$splitcontainer6.SuspendLayout()
	#
	# MainDialog
	#
	$MainDialog.Controls.Add($progressbaroverlay1)
	$MainDialog.Controls.Add($splitcontainer1)
	$MainDialog.Controls.Add($toolstrip1)
	$MainDialog.AutoSize = $True
	$MainDialog.BackColor = 'Gray'
	$MainDialog.ClientSize = '921, 591'
	$MainDialog.Font = "Segoe UI Semilight, 9.75pt"
	#region Binary Data
	$MainDialog.Icon = [System.Convert]::FromBase64String('
AAABAAQAQEAAAAEAIAAoQAAARgAAACAgAAABACAAKBAAAG5AAAAYGAAAAQAgACgJAACWUAAAEBAA
AAEAIAAoBAAAvlkAACgAAABAAAAAgAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////
/////////////////////////v////3////+/////v////7///////z+/v/8/v7//f////z+///4
+/z/9fn6/+/19f/j6+7/2uXo/8/d4P/F1dj/vMzS/7nIzv+vvcP/pbK4/6Kttf+dp6//lqCo/5Kc
pP+QmqL/i5Wd/4uUnf+LlZ3/i5Wd/4uVnP+MnKP/jJ+l/46ip/+Tp6z/mq+x/6G0t/+rvsH/uMjL
/8HN0//I09n/1N7k/9/n7P/n7fL/7vP3//P3+//6+/7//Pv9///+/////f7///z9///9/v//////
//////////////////////////////////////////////////////////////7////+/////v//
//7//v////7////8/v//+/7///r+/v/3+/z/8Pb2/+Xu7v/a5ef/0t7g/8fW2P+6y83/rr/C/6Sz
t/+hrrT/m6iu/5ahqf+gqrX/rbXB/7fAzP+6w8//uMHN/7jAzP+4wMz/t8DM/7fAzP+3wMv/q7vC
/5Olq/+Ak5j/fpKX/4GWmv+FmZ3/jJ6j/5iprv+msrf/s77D/8HM0P/H1Nj/0d3h/93n6//o7/L/
7/X4//b5/P/8/f7///7////+////////////////////////////////////////////////////
///////////////////////+/////v////7//f/+//3////8////+v7///j8/f/z+Pr/6/Lz/+Dr
7P/U4+P/ytrb/7vMzf+qvb7/obO1/5usr/+ks7b/sr/E/8bQ1v/P2uH/ydni/8vb5P/L2+X/ytvk
/8na4//K2uT/ytrk/8ra5P/K2uT/y9rj/83a4P/M2t//y9zg/8LU2v+pvcL/m660/4eZn/+Ckpf/
jpqe/5qkqP+ls7f/rb/D/7rM0P/K2Nz/1+Tn/+Ls7//r8vX/9fn7//r7/f/+/P7///7/////////
/////////////////////////////////////////////////////////////v////7//v/+//3/
///7////+f7///b8/f/x+Pn/6fH0/+Do6//Q3eD/wNLU/7LGx/+lubr/pbq7/7bKzP/B09b/zdzf
/8/b3v/Q2t3/z9vd/8rd3v/K3t7/yNzd/8nd3f/K3d7/yt7e/8rd3v/J3d7/yt3e/8ze3v/R3Nz/
1Nzd/9Le4P/O3OD/yt3h/8XY3v/B0tn/tMTK/5Whpf+LlZn/j56j/5Sprv+itrv/ssTI/8PS1v/Q
3eD/3ujr/+zy9f/z9/n/+Pv8//r7/P//////////////////////////////////////////////
///////////////////+/v7//v7+//3+/v/8////9/z8//X7/P/s9fb/4+3v/9nk5v/J1Nf/s8HF
/6i6vf+mubz/tcnM/8bb3f/J3d//ydzf/9De4P/P293/09ve/9Xd2//Y39b/09rO/8TKv/+/xrr/
usG2/7vCtv+7wbb/vMO3/7/Hu//Fyr//1dfP/9ja1P/T2NX/1d/f/8zb3v/L3OH/y93i/8nZ3//N
2t7/vMfL/5Wlqf94jpP/gZab/5Smq/+jtbn/u8vO/8nW2v/c5uj/5Ozv//H3+P/1+vr//P39////
//////////////////////////////////////////////////////////////3+/v/8/v7/+f3+
//P4+f/u9ff/3+nr/9Le4P/E0dT/tcLF/6y7v/+6ys//yNnf/8rc3//L3eD/yNrd/87f4P/L2dv/
z9vd/7K7vf+ampX/h3pm/29dR/9oV0D/YE84/2FQOf9gTjj/X043/19ON/9gTzn/YlE8/2BUQf97
dGX/lZOJ/6quqf/BzMz/zt3g/8zd4//K2uD/z93i/9Pf4//J2N3/s8bN/4qco/9/kpf/jp+l/5qq
r/+uvL//x9LW/9Tg4v/f6ev/7vb2//f5+f/9/f3//v7+////////////////////////////////
///////////////////+///9/v7/+/3+//f7/P/v9Pb/4uvt/9Le4P/C0NL/s8LF/7fIy//H1dr/
z9zi/87b4f/J19z/ytre/8zc3//Q3+H/ztvd/83X2f+jrK3/UE1F/19GK/9jRCb/ZUco/2FCJP9m
SCn/ZUco/2RGJ/9iRCb/YkQl/2JEJv9aQyf/UEAp/0pBL/9TUUb/t7+7/8/c3f/N3eL/y9vh/83b
4f/P3OH/y9jf/8zc4//G197/pbO6/4OSmP+PnaP/oK6z/7PBxf/Bz9L/1eLl/9/q6//z9fX/+/v7
//39/f/+/v7////////////////////////////////////////////9/P7/+/v9//b4+v/u8/T/
4Ojr/9Pc3/+5xsn/tcPH/7/R1P/H2dz/0Nzi/9HY4P/P2N//093k/9Pf5P/M2t3/zNrc/9Xi4//Q
29v/0NnZ/7e1q/9nUTL/ZEkl/2NIJP9jSCT/YEYi/2FGI/9hRiL/YUcj/2FGIv9hRiL/X0Qh/1pC
I/9dTTX/qKKR/9jc1P/U3t7/zt3h/8vb4f/O3eP/z9zi/9Db4v/O2eH/zdjg/87a4v+/zNP/ipie
/4COlP+aqq3/q7q9/7vLzv/Q3N7/6Ovr//Pz8//5+fn//Pz8//7+/v//////////////////////
/////////////////P3+//f5+//v8/X/4+ns/9Pb3f/Ays3/tsPG/8PS1f/M3uH/ytzf/9Xe4v/T
1dj/xcrN/8rU2f/P3OH/zNrf/8/e4f/M2dr/097e/9Pe3v/U2ND/kIdr/1lKKP9ZSSP/Y1Ao/1xJ
If9dSiP/XEol/1tKJf9aSST/W0gi/19GIf9hSCf/cGFH/9vWxv/b39n/0tzc/83c4P/N3OL/zNrh
/8za4P/O2uH/z9ri/8/a4v/O2uL/zdrh/8LQ1v+Zp63/gI+U/5enqv+ks7b/wMzP/9rf3//m6ur/
8vT0//n6+v/+/v7//////////////v////3+///+/v//////+/z8//T6+v/u9/f/4evr/9Xg4P/C
zc7/u8jH/83b2//N3Nz/zt3d/8/d3f/Nz8T/lY18/3l2bv/M09b/ydjh/8jb5P/K2+L/zdzf/87d
3f/O3dz/0Nzc/8XLxv9kX03/Wkkp/2hNIf9pTR//ZEwi/15KJv9aSSn/XEkn/15JJP9cSCL/WEkp
/4eCb//Z3tf/0t3g/83c4P/N3N//z9vf/8/b3//O3N//zd3g/8ra3v/N3eP/zNzj/8nZ4P/P3eX/
zNng/5qmrP+Fj5X/maOn/665vf/A0dL/0N/g/+Pu7v/w9/j/+f39//z+/v/+//////7////+/v//
/////v////n8/P/0+/v/5/Lz/9jk5f/Dz9H/wc7R/8za2v/R393/0dzZ/9Le2P+4wbf/dXJf/1hM
Nf+Df3L/1dzc/8nY4P/H2eP/ydvi/8zc3//O3d3/zt3d/83c3v/R29z/k5GF/1xMMP9rUSf/aUwf
/2VMI/9gSyf/XUop/15KJ/9hSiT/Xkkk/1VIKP+bl4b/1NvW/8/c4P/M2+H/ztzf/8/c3v/Q3N7/
z9vf/8va3f/O3eD/zNvf/83c4P/R4OT/y9je/9Hd5P/K1tz/nKet/4qUm/+cqK7/r8LE/8LT1P/X
5OT/7PX1//L3+P/6/Pz//f/////+/////v7///////z+/v/2+vn/6vPz/9rm6f/G09f/vczR/8rZ
3//S4OL/0dvY/9je1v+vsqL/YWBM/1lQNf9aTTP/ko1//9PZ2P/K2N7/ytzk/8rb4f/N3N//z9zd
/87c3v/N297/0tzg/8bHv/9xZ0//Yk0n/2hQJf9mTib/Yk0o/2BMKP9iTCb/ZEwj/2FLI/9YSCn/
rqmX/9fd2P/P29//zNrg/87c3//P3N7/z9ze/87c3//Q3eH/0dzg/9Db3v/S3N//0Nrb/9Lc3v/R
3OD/y9jd/83b4v+VpK3/gJGY/5qtr/+wwsP/w9HS/9/o6f/t8/T/9vr6//r9/f///v///v7+//3+
/v/4+/v/7/X0/+Dp6//Q3OH/vs7U/8TW3f/N3uT/z9ze/9ng2P+xsqH/X1k//1lPLf9gUCz/XU4x
/4uEc//V29f/0N7i/8na4v/L2+H/ztzf/8/c3v/O3N7/zdvg/87a4P/X3Nn/o5+P/15QMv9hTSn/
ZE8p/2RPKf9lTif/Zk8l/2dOIv9kTCP/W0oq/52YhP/Z3tj/0d3g/8za3//O3N//0Nze/8/c3v/O
2+D/ztne/9Pb3//O1Nb/xMnI/9LX1f/b4N7/0dnY/9Hd3//J2N7/wtbf/5Knr/+EmJv/na+w/7rI
yv/T3uD/5Ozt//D29v/2+/v///////7+/v/6/fz/8/n4/+rx8P/X4uX/xdLY/8bV3f/O3+b/0N7i
/9ji4P+lqJv/ZWBH/15QLP9nUyf/ZlEn/2NTMf98dF7/0dXO/9Ld4P/K2uD/zNvg/87c3v/P3N7/
ztze/83b4f/M2+L/0Nrb/9LUyv9sZVD/W04w/2JQLP9lUCn/aFAm/2lQJP9pUCP/Z08k/1tKJ/99
d2L/1trT/9Lf4P/M297/z9zf/9Dc3v/P3N7/ztvg/9Hb4f/U2t3/tLi4/15fW/98e3P/0dHH/9jb
0//V3tz/zNzf/8nd5v+5z9n/jJ+j/46fov+su73/xdHT/9ni5f/q8vP/8/j5///////8/v7/9vv6
/+308//d5ub/ytfb/8nX3f/Q3uP/09/j/9Pe2/+1u7H/VlM9/11SMf9nVCj/cFcl/2xTJP9hUCr/
WlE4/8zOxP/U397/z97h/9Df4v/S3uD/0t7g/8/d4P/O3eL/ytng/9Lf4f/T3Nj/qaqd/1tUPf9f
UC//Z1Iq/2RNIP9sVCf/aFAi/2hQI/9fTSj/aWJL/8vPxv/R3Nz/z9zf/8/b3//Q3N7/z9vf/83b
4P/O2t//1dvd/7m6uP9MST//SEEx/2hhT/+9uqn/2d3T/9Ld2v/H2d//yNzk/7HEyP+HmZz/l6eq
/7fEx//K19n/3ufq/+709f/+/v7/+f38//P5+P/l7+3/0t7c/8LR1v/T4ej/0t3g/9be3f/JzML/
cG5b/1VMLv9mVi//ZlAj/29WI/9wVyb/ZlQq/11SNv+4uq3/1N7b/9Lf4v/S3uL/09/h/9Le4f/R
3eL/z93j/83c4P/O3N//09/f/87Uzv90cmD/XFEy/2VRKv9sVCf/aVIk/2hQI/9qUiT/ZVIq/2Vd
RP+8vrT/0dva/8/b3v/P29//0Nze/87b3//N2+D/zdrg/9Td3//GyMT/VVBC/01CLP9SRSz/YVc+
/7+8q//c4dr/z93e/8jZ3//L3OH/nq6z/4eYm/+isrX/v83Q/9Lf4f/l7fD//P7+//b6+f/v9vX/
3ujn/8nW1v/M3eP/z93i/9nh3//c3dP/f3lj/2BUNf9pWDH/aVUq/25ZK/9sVyj/cFkp/2pVKf9e
UzP/mZmJ/9ng3P/U4OL/1ODj/9Tf4v/U3+L/0t7j/9He4//S4OH/z+Dj/8ra3//R3d3/tLes/1tS
N/9lUy3/ZU8i/2tVKP9nUij/alEk/2dRKf9cUzn/pKaa/9Pc2//P297/z9ze/9Dc3v/O29//zdvh
/8vb4f/T3uL/19vU/29oVf9URCb/XEgj/1tHJP9iVTz/rqqb/9vg3P/R3N//ydjd/8fW3P+MnaL/
laeq/629wP/H1df/3Obp//v9/f/z+Pf/6fHw/9bi4P/L2dn/zd7k/9Ph5f/e493/qqeU/2daOv9n
Uyv/bFUo/21XKf9sWS3/aFcs/3BbLf9sVyn/YFMy/4GAbv/Y39r/1ODg/9Xh4//X4OP/1d/j/9Pe
5P/U3uT/0t7e/8zd4P/P4uj/zt3g/9Xb0/9/eF//Xk4q/2tWKv9nUyj/ZVIq/2pRJP9lTyb/V00y
/42Ogf/S29j/z9zd/8/c3v/Q3N7/ztvf/83b4f/L2+L/0N7h/9vg2f+RinP/Wkcl/2JJHv9fRhz/
WEUl/2JYQ/+4t67/1NrZ/87b4P/K2uD/qrvB/4yfo/+jtLf/vczP/9Tf4v/4+/v/7/X0/+Dq6f/O
29n/0d/f/9Li6P/W4+X/xce+/3BpUf9oVS//cVkr/3RaKP9xWir/Z1Ur/2daNP9qVyv/cVst/2da
Nv9ua1f/0dbP/9Xg4P/W4uT/1uDl/9Xg5f/U3+X/09/k/9Th4f/N3eD/ytvg/8bV2P/W3tn/vryn
/2xfPv9rWS7/ZlMq/2NRKv9oUSP/alQq/1tPM/95d2n/0NfT/9Hd3v/P3N7/z9ze/87b3//N2+D/
ytzj/8vb3//W3tf/sKqU/11KJv9lShz/akwe/1xEHf9WRSr/W1JE/7m5tP/Q2t7/zdvg/8bY3f+S
par/kqSo/7C/w//J1dj/9Pj6/+r09v/V4+X/ztzf/9Xh5f/Y5Ob/2OHb/5SUg/9kWT3/a1Ys/3Ja
Kf91Wyn/cVor/2pXL/9oWTX/bFow/3FcLf9rXDP/amNH/8PEtf/X4t//0uLn/8/h6//Q4ej/1OHl
/9Hg5v/H3ev/0+Di/9jf2P+hqKL/0Nza/9Hb1f+GhG//ZFUv/2hVKP9pViz/aVQn/2ZSJ/9gUjD/
ZFxG/9LTyv/S3Nv/zNvh/8rc4f/M3d7/z93b/8/d3f/O3d//0tzZ/72+sv9XTDX/XUck/2ZJIP9j
RBz/XkMh/1lEK/9yZ1X/0tXO/9Te3P/K293/scTK/4ebof+ltLn/wMzP//L3+v/k7vL/0eDk/9Hf
5f/X4uj/3OPg/8XJvP9zcFr/Z1s8/3BcMv91XS//cloq/3NcLv9wXjT/a1oz/2xbMP9vWy3/bVwx
/2lgP/+qqZT/2uTf/9Di6P/M4ez/zuHq/9Ph5f/Q4Ob/xN3u/9Pg4//j5tv/m56T/7nDwv/U4N//
yMu+/2lePv9pViz/aVYp/21aLP9oVir/YlMt/1xTNv/Av7D/093a/8rb4f/I2+L/yt3e/8/e2v/P
3Nr/z93f/9Dc2//Izsb/bGdW/1xJLf9kSSP/aEgf/2ZGIf9gRSb/WUgw/56djv/W3db/0N7f/73R
1/+Ooqr/na6y/7vHyf/x9fn/3Ofq/9Df4//W4uj/2+To/97h1v+Pjnr/ZV9E/21hQP92ZT3/gW1C
/3dhNP92YTT/cl8z/21bMf9wXjL/dGI1/25eNf9kWjn/mJV//9rk3P/T4+j/zeHs/8/i6v/T4uX/
1OHl/8/i7f/W4+j/3+bg/6Wpn/9/hHz/2N7X/93h1P+Tjnf/YlY1/2tZLv9pVyj/a1kr/2ZWLf9f
VDT/qKWU/9nh3P/K2+H/x9vj/8nc4P/M3dz/ztzc/83c3v/R3d3/0NbQ/357a/9YSCv/ZEkk/2pL
Iv9oSSP/X0Ul/1RCKf9va1v/zNHI/9Hd3f/L3eP/o7a9/5Gip/+xvsD/7fL2/9jj5v/S4OL/2eXo
/97l5f/a18X/cGhM/2xjQ/9nXDn/cGE8/3ZlPv92ZDr/fWtA/31qPv98aTz/gW9C/21dMf9vYDf/
amA//4KAaP/a4tn/1eTm/9Dj6//Q4ur/1OLn/9jj5P/U4eT/1ePo/9fi4/+8wbn/YGBS/8nJuv/g
5Nn/xce5/2diSP9oWTH/algp/2xZKv9oVy3/YFMx/4yIc//X3Nb/zNvg/8fb4//I2+L/ytze/83d
3//M293/0d7e/9Xc1/+Rj4H/Wkwy/2FJJv9mSSD/ZUgg/2BIJf9aRyz/Uks4/7y+sv/U3tz/ydre
/7nM0v+KnKD/prS2/+jw8v/W4+X/1ePk/9nl5f/g5eD/qqKH/2teOf9uYj7/aFw4/3FkQP9sXzr/
cWI8/3RkO/95aD3/fms//3xrQP96a0L/hnlQ/2xhPv9taE7/1tzP/9nl5P/S4+n/0uPp/9Xj5v/Z
4+L/3uXi/9Ph5v/T4un/ytHL/3dzYP+Kh2//1dnM/9bf1v+cn43/YVYy/2laLP9tWyv/bVsu/2VX
Mf93cFj/0NLJ/87c3//I2+P/x9vj/8jc4f/K3N//zd7h/8za3P/Y4N7/s7On/1xQN/9fSij/ZUsi
/2RKIf9gSCX/Wkcp/1JGLf+RjX3/2uDb/8vb3f/K3eL/kKKm/6CusP/j7O//1uPk/9nn5v/e6ef/
4+bf/5CGZ/9yYTj/cWE5/2tdN/9vYz//b2M//3BkQP92aUP/dmdA/3tqQv9zZT3/e25H/3ltRP93
a0j/eXNX/7q8rf/c5uL/1ubq/9Xl6//W5Of/3OTj/+Dl4P/U4uf/0OHp/9Tc1/+JhG//aGBG/7a3
qP/d5+D/ydDD/3BqTP9oWjD/bFss/3BdMf9kVC3/c2pQ/83NwP/Q2tv/zN3j/8fb4//L3uX/ytzh
/8vb4P/M2t7/093c/8vNw/9WTTf/XEop/2RLI/9jSiH/XUYi/15KKf9ZSSz/amNP/9HVzP/O3N3/
ydzg/6W3u/+aqKv/4Ovu/9nm5//a5+X/3ebh/87Qxf98cU7/dGM2/3JiN/9yYzr/cmU+/3JmQf9x
aEP/bWI//3ZrSf9wZ0X/dWtJ/3dsSP95bkj/em9K/3duUP+lpZL/3uXd/9fl5f/X5+r/1ePl/9vm
5f/e5OH/1+Xq/9Hh6P/b5N//oJyI/2VdQv9vbVr/1t3S/93l2v+hoo7/Y1s3/29gM/9mVin/bVw0
/2RaPP+4taP/1dzZ/9Hf5P/J3OP/y97l/8vc4//K2uD/zdzh/9Hd3f/W2tL/amNO/1xMK/9lTyb/
ZU4l/2BJJP9bRiP/XEgm/2JWPv/Fxbr/0Nzb/8rc4P+yxcn/kqKl/93n6//Z6Oj/2+jl/+Lq5P++
v7L/cGZD/3FiNf9zZDb/dWU5/3VmO/90aD//cWhD/3RtTP9va0//fXth/25qTf92bUv/eG1I/3pt
SP92bEz/lZN9/9/l2v/b5+X/2+rr/9Xj5v/b5+j/2+Tk/9rn6//U4uf/3OXh/7u7rP9kXkX/XVhA
/7a2pP/a4NT/0NfL/3d1V/9pXzT/aVou/25dNP9hVjb/pZ+K/9re2P/U4OL/zN3j/8rb4v/N3eT/
y9vh/83c4v/Q3N7/2d7Y/4eDb/9ZTC3/YU0l/2FLIv9iTib/YUsm/2BHI/9eTjP/sK2f/9Hb2P/M
3eH/uszR/5Okp//a5un/1+fm/9zo5P/k6+P/q6yd/2piQv9wZDr/dWY5/3dnOP93Zzj/eGk8/3Jo
Qf9xbU7/rrCa/9TZyP+Mjnf/cmxL/3dsSf9+cUz/fHJQ/4iDa//R1cf/2eTh/9nn6P/X5ej/2ebr
/9Ti6P/a5+n/2ePj/9zk4f/R1s7/a2dU/2hgQ/95c1j/1NbH/9Pg3P+qrJT/Ylw0/2lfNP9pWjH/
Zlk4/4uDbP/d39b/1+Hh/8/d4v/N2+H/zt7k/83d5P/L2uH/ztre/9bc2f+koY//WU4v/2RRK/9l
UCb/YU0l/2NMJf9lSSH/XEkr/5eRgv/S2df/zdzg/8HU2P+drrH/2+fr/9nn5//f6+b/4Ojd/5SU
hP9oYkP/b2U9/3VnO/97aDn/fWo4/3trO/92akP/qKSG/+Pp1//h7eH/z9XD/5KOcP94bk3/fHBL
/31yT/9+eF//ycu8/+Hq5f/Z5eb/2Ofq/9Pj6f/R4+z/2+fp/+Dn5P/c4+D/3OPg/4KAcP+Cd1j/
eGtK/6amk//R4uH/1NvH/4OAXf9mXTX/Zlgx/2lbOf9qYUn/3d3R/9rh3//S3uH/0N7j/8/d5P/N
3OT/ytri/8/d4v/T3Nj/ubin/15TN/9dSiT/Z1Io/2FMI/9kTST/aUsi/15JKf+Ffm3/0djV/8va
3v/G2N3/obO2/9vn7v/Z5+n/4+7p/+Dl1/+KiHL/a2NA/3JmPP93aTr/fGo6/35sO/98bD7/d21I
/5KOcf/j6Nb/5O7j/+bv4//Jzr3/g4Nt/3VvVf93blH/e3Ja/7OvnP/n6+D/3Obi/9vq7P/V5ev/
2OTs/93l6//f5un/2+Pm/97l5v+enJH/gXZe/4N2Wf+Efmj/yMzE/+Dn2/+usZ7/aGNJ/2NYOP9s
XT3/Ylc6/9fSwP/f4tr/0t7h/87e6P/O3Ob/0dzk/83b4//O3eT/0dzd/8rNwf9za1T/ZFEv/2RN
Jf9pTiX/Z0si/2pNI/9fSSr/c2lY/9DU0P/O297/ydzg/6C0tv/a6O//2ejs/+Pu6P/h5NP/iYZq
/29mPP91aTn/eWo6/3tsO/98bD3/eWo+/3huSf9zblD/m5uG/+Tn1//k7uX/3Onj/8XNw/+AgXD/
eXRh/3RtWP+moI3/6evd/9/m4P/Z6On/2Ofr/9/l6v/d5Ov/2uPt/9nj6//e5Of/trOs/352Zf+E
eWL/gnhg/6ujkP/d4dr/2uDb/3x8bf9nX0n/Y1c7/2ZbP/+/uqX/3+HX/9bj5v/H3On/0N/r/9Xd
5P/R2+X/zdvm/8/c4f/Q1c//enZk/15NLv9nTij/bU8m/2xOJP9lSyH/YU0u/3JnVv/R0c3/ztvc
/8nd4P+dtLX/2+jw/9zp7f/k7ej/4uXV/4yJbf9vZz7/dmo7/3psPP98bTz/fW49/4BxQ/94bET/
eXFP/3JvVf+qqpb/5u7g/+Dr4//k7OL/wcW4/4eGeP91c2X/oqGW/+To4P/j7On/2unr/9fm6f/f
5ur/3OXs/9nk7f/Z5ez/3ubn/8fGvv9/eWj/gnli/392Xv+Gf2r/xci+/+Lo4f/Hyb3/iYdz/3Fq
Vf9cV0H/vbyu/+Dl3//R3+P/yt7o/9Hf6f/V3eP/0Nzl/8zc5v/P3eL/1t3W/5GOff9YSir/aFEt
/2hMJP9tUCf/Z08k/1xJKf9dU0L/x8jE/9Pf4f/J3d//nLS1/93p8P/e6u//4+3o/+Xo2f+QjHT/
cWlB/3dsPP97bT3/fm8+/4BwPf96azv/hHdJ/3dsRP95c1D/dnJT/7K0n//g6Nv/6vLn/+ft5f/i
6OL/0NbU/93k4//j7O3/3Ofq/9rn6//c6Oz/3+jr/9vn7f/X5u//1+bt/93n6P/W2c7/jop4/4J7
ZP+Ce2L/fnpk/4uMfv/Z3dL/5ebb/9TVyf+jpZn/pamf/9LY1P/b5eb/z93j/83f6P/R3+b/09/j
/8/e5f/M3eb/zd7i/9jg2f+zsZ//YFMz/2RQK/9oTyf/aVAm/2ZOJP9fTC3/UUc2/8jJxf/R3d//
yt3g/5+0tv/e6vD/3+vv/+Ls6P/m6t3/ko93/3JqQ/94bT3/e24+/39wPf+CcT7/hHVB/39xQf+B
dEf/fnRL/3pyTP98el3/vsOv/+Lo2v/m7eb/4erp/+Dr7v/f6/H/3uvx/+Ds8f/c6Oz/3Ojr/9/p
7P/b6O7/1+fv/9jn7f/c6Oj/3uLX/5qXhf9+eWH/gHxh/4B8ZP+Afmz/uLer/+Dh1//j6N//2+Pf
/9vm5f/V4OT/1OHm/9Hh5//Q4Of/0t/k/9Pg4v/P3+X/zN3m/87e4//X4Nr/wcCu/19TNf9jUS3/
ZlEq/2dRJ/9nUCf/Wkgp/1VMO//Iysb/0d7g/8ve4f+htrj/3+ru/+Hu8P/j6+n/5enf/5ORfP9z
a0T/eW4+/3xwPv9/cj7/gnM+/4ByPf+Fd0P/g3ZD/4R4SP+DeEr/f3pT/3+AZf/GyrX/5ezi/+Pu
6//c6e3/3Ovz/9jo7//b6e//3urt/+Ht7//f6uv/3Ovu/9jp8P/Y6O3/3urp/+Tr3/+urZr/gHxi
/4J/Y/+Cf2b/gHtl/4eEcv/LzcH/4ujh/9nk5P/R3+T/0uLp/9Li6v/P3uX/1ePo/9Tg4v/T4eL/
0eDl/8ze5f/Q4OT/19/Z/8XDsv9cUDL/YlIu/2NRKv9kUCj/Yk0j/11MLf9vZlX/0NLO/87b3f/K
3eD/prq8/+Ht8P/i7fD/4+vq/+bq4f+dm4f/dGtE/3pvPf98cD7/f3I+/4N1QP+EdkH/hHdB/4V4
Q/+GeUb/hXtH/4B6Tf99e1j/goRn/8vRv//l7uX/4Ozr/97s8P/f7fL/3Ont/97r7P/g7Oz/4ezr
/9zq7f/W5+7/1ubr/93q6P/o7eD/xsWx/4J+ZP+CfmL/gHxi/4V/Zv+EfWj/l5eI/87Tyv/d6Of/
1OHl/9Dg5v/S4un/1+br/9Xi5f/W4+L/1OHh/9Hg5P/O3uX/0+Hl/9rf2v+rp5f/X1M1/15OK/9l
Uy3/Y1Ip/2NQJv9cTS3/dm9d/9DTz//Q3N7/ydzf/6q/wP/l7/L/3+rt/+Xu7P/o7Ob/qqiX/3Vs
Q/99cDz/fnE9/4BzP/+Dd0H/hHhC/4N4Qv+DekP/hXtF/4Z8R/+Be0r/gH1S/3x8V/+MjnH/yc26
/+rx5v/m7+v/4+7u/+Lv7v/i8O//3urq/+Dq6f/e6+3/2uvv/9vr7v/e6ub/5+ve/97cx/+Ff2T/
hoBk/398YP+IgGX/iYBo/4J+a/+hoZX/1tzW/97o5//a5ej/1+To/9Xi5f/X4+X/2OPi/9fj4f/Y
5un/0d/m/9bi5v/U19P/e3Zl/2RWOv9hUC7/Y1It/19OJ/9lUyn/Wkws/4N+bP/S19L/z9zd/8fa
3f+qv8D/5/Dx/9/q7f/o7/D/6u7p/7u5qf96cUf/f3E8/39zPv+BdED/gndC/4J4RP+BeUT/gXtG
/4N8R/+Efkf/gn9J/4J/Tf98ekz/hIFa/4aEZP/DxK3/5OfW/+jw5//i7ej/3+3r/+Dt7P/j6+v/
4e3v/9rn7P/b6ez/4ern/+7v4f/DwKn/iIFl/4eAY/+Gf2T/ioBk/4l/ZP+Hf2j/f3to/6Ghk//N
0Mj/3OTf/9rl4v/X4+T/1uPl/9bi4f/Z5OP/09/i/9Ld5P/V3OH/rKyo/3FpWf9mVjr/Y1Av/2FP
K/9lUy7/YlEm/1tOLv+QjHn/2N3Y/8/c3f/B1Nf/p7y9/+rx8//i7PD/5+7w/+3x7P/T0cL/hXpQ
/4ByPP+AdD7/gXVB/4J4Rf+BeUb/f3pG/4B7SP+CfUj/g39J/4OASf+DgEr/ioZS/4N9Tv+BfFL/
h4Ni/6Oiif/Y3Mz/5vHn/+Dw6//d6+n/5Ovq/+Hp7P/c6O3/4+7y/+Lp5v/MzL3/kox2/4mAZf+I
f2P/iYBl/42CZ/+Ogmf/iX9k/4V+Zv+Ef2z/kI+A/8HEuv/b4t3/1uHf/9Th4v/Y4uL/2eLh/9zm
6f/S2uH/sre7/4SAff+LgHD/f21S/3RgQP9lUi//Yk8q/2JRJ/9jVjb/qqaT/9ne2f/P3N7/vM/S
/6W6u//x9Pb/6e7y/+bs7//t8fH/5+je/4mEXP97cTz/gXVC/4F2RP+Ed0f/hXlJ/4N6Sf+Ee0n/
hH5J/4SASf+Df0n/iIRP/4N9Sf+LhVT/iIJU/4qEWv+Ef1z/hINl/5uehv++xbH/0tjH/9zdzf/f
4dT/2t3S/8fKvv+srZ3/h4Ns/4uEaf+HfmH/jIFl/4uCZf+JgGP/iX9j/42DZv+KgWX/iIFn/4V/
av+EgXH/jY1//6+yp//Jzcb/0NPN/8zOyP++wb3/lZiU/3p8d/+BfXP/hHpq/5GDbf+Pfmb/f29W
/2xdQf9eUTD/ZlxD/8bEtf/X3tn/z93e/7rMz/+pu73/9vb4/+3v8v/q7fH/6+/y/+rw7P+jo37/
d3RB/4B4R/9/c0T/h3ZI/4p4S/+Lekz/iXxL/4h/Sv+GgUn/hoFM/4WBT/+GgVD/h4FS/4iCU/+I
glT/h4FV/4qFWv+KhVz/iYRc/5eRbP+ak3D/o517/56Xdv+Oh2b/h4Bg/4uDYv+Lg2L/jINj/4yD
Y/+LgmT/i4Nk/4qEZP+KhGX/iYRl/4mDZv+IgWf/ioJs/4iBa/+Efmj/jYZz/5ePgP+Si3//h4J0
/4F9bf+Cfm7/hIBu/4R/bv+IgHD/hn1u/4d8b/+Dd2j/bWVR/25qWf/X2s7/1d/Z/8vZ2f+xwsX/
ssPF//n4+v/x8fX/6+7y/+vv8//q8O3/zs+x/3d0Rv97dUb/f3VE/4l6Sv+JeUf/i3xI/4p9SP+I
f0n/hoBK/4aBTP+FgE//hoFQ/4eBUv+IglP/iYNV/4iCVf+Jg1b/j4hc/4uEWf+Lg1v/jYZg/4qC
Xf+Lg17/j4dj/5CHZf+NhGL/jYRj/42EY/+NhGP/jIRj/4uEY/+JhGT/iYRl/4mEZf+Jg2b/iYJo
/4eAaP+JgWr/i4Ns/4h/a/+Ee2v/hXxv/4Z/cP+Hf2//hn9t/4V+bP+Ffm3/h35w/4Z8cP+Ge3L/
g3lv/4J9cP+rqp//2d/Y/9Hd2v/P3uD/qLm8/77O0P/7+vz/9PT4/+zv8//r8PP/6/Hv/+bnz/+N
i2X/e3ZM/4J6Sf+GekT/iHxD/4p+RP+Kf0X/iH9J/4Z/TP+GgE7/hYBP/4aBUP+HgVL/iIJT/4mD
VP+Jg1b/i4VY/46HW/+Nhlv/j4de/4yFXv+NhmD/jodh/46GYf+NhWD/joVj/46FY/+OhWP/joVk
/42FZP+LhWT/ioVl/4qFZv+KhWb/ioRn/4qEaf+Kg2r/iYFq/4iAaf+JgGv/iX9u/4l/cP+JgHD/
iYBv/4d+bf+Gfmz/iH5t/4h9b/+HfXL/hXty/4R7cv+Hhn//wsbA/9jh3v/O3N3/wNHV/6/Bxf/H
1tn//fz+//f3+//u8fX/6u/y/+vx8f/w8eL/uLeb/3h1T/98d0f/hH1C/4mAQP+JgED/iIBE/4d/
Sv+Gfk7/hn9P/4WAT/+GgVD/h4FS/4iCU/+IglT/i4VY/4uFWP+Kg1j/i4RZ/46HXP+Nhl//jodg
/46GYP+NhmD/kIhj/4+HY/+PhmT/j4Zk/4+GZf+OhmX/jIVk/4qFZf+KhWb/ioVm/4qEZ/+IgWf/
ioNr/42Fbv+MhG3/ioJt/4uBb/+KgHD/iX9u/4h+bP+Jfmz/in9t/4l+bf+IfW//iH1z/4V6cv+D
fHb/mp2b/9Pb3P/P293/zNzg/7nL0f+9z9T/0N7h//79///5+f3/8PP3/+vw8//r8fL/8PPs/9/f
zf+Dg2T/e3pM/4F+Qf+FgD3/iII+/4iBQv+Hf0n/hn5O/4V+T/+FgE//hoFQ/4eBUv+IglP/iYNU
/4mDVv+KhFf/jIZa/4+IXf+Nhlv/ioRc/42GX/+QiWL/kotk/5GJZP+Ph2L/j4dj/4+GZP+PhmT/
jodk/42GZf+Lhmb/i4Zn/4uGZ/+LhWj/jIVr/4uEa/+JgWr/ioJr/4qCbf+KgW7/ioBv/4qAb/+L
gG7/jIBu/4x/bv+Lfm7/hntv/4h+dP+Ee3P/hoF+/7vDxf/M2d3/0eDm/8TV2/+0x8z/xdXa/9jk
5//+/f//+/z///P2+v/s8fT/7PL0/+7x8f/z9ev/qquT/3l5Uf9+fUT/hIJB/4eDP/+IgUP/h4BI
/4V+Tf+Ffk//hYBP/4aBUP+HgVL/iIJT/4iCVP+KhFf/ioRX/4uEWf+MhVr/jYZb/4yGXf+Nh17/
j4hg/5CJYv+RimP/kIhj/5CIY/+QiGT/kIdl/4+HZf+Oh2b/jIdn/4yHaP+Lhmf/i4Vo/4uFav+L
hGv/i4Ns/4qCa/+KgWz/iYFu/4iAbv+KgG7/jIBu/42Abv+Nf27/in5v/4V8b/+GfnT/gnx1/5aV
k//Q2uD/zt3k/83d5P+/0df/t8nN/87c4P/h6+7//v3///39///2+f3/7/T3/+rw9P/s8fb/7PDu
/+Tn1v+Ki2v/fHxL/4KARv+FgUP/hoFE/4eASP+Ffkv/hX9O/4WAT/+GgVD/h4FS/4iCU/+IglT/
ioRX/4qEV/+LhFn/jIVa/42GW/+Mhl3/jYde/4+JYP+QimH/kYpj/5GKY/+RiWT/kYlk/5GJZP+Q
iWX/j4hn/42IaP+Mh2j/jIdo/4uFaP+MhWv/jIRs/4uDbP+Lg2z/ioFt/4mBbf+HgW7/iYFt/4uB
bf+NgG7/jYBu/4t/cP+Hf3P/g310/4eFfv/Gycf/0+Dk/9De5P/L2+H/vc3S/8fW2v/b5+r/6vL1
//79///9/v//+fz///L3+v/q8fX/6vL4/+rx8v/w9Or/xcev/3d1T/+AfEz/hX9H/4Z/Rv+HgEf/
hYBJ/4WATP+FgE//hoFQ/4eBUv+IglP/iIJU/4qEV/+KhFf/i4RZ/4yFWv+Nhlv/jIZc/42HXf+P
iV//kIph/5GLYv+RimP/kYpj/5GJZP+RiWT/kIlk/4+IZv+NiGj/jYhp/4yHaP+Mhmn/jIVr/4yF
bP+MhG3/i4Ns/4uCbf+Igm7/hoJu/4eCbv+Kgm7/jYFu/4yAbv+LgXL/gXtv/4J/dv+nqaT/1NzZ
/9Pf4v/R3uL/xNHU/8bT1v/X5OX/5vDx//H3+P///v///P3///r9///2+/7/7fX4/+Tu9f/q8/j/
7/Tv//P05P+tqoz/f3lS/4N9TP+Ffkn/h4BH/4WBR/+FgUv/hYBP/4aBUP+HgVL/iIJT/4iCVP+K
hFf/ioRX/4uEWf+MhVr/jYZb/4yGW/+Nh1z/j4lf/5CKYf+Ri2L/kotk/5KLZP+Si2T/kopl/5GK
Zf+QiWf/jYho/42Iaf+Mh2j/jIZp/42GbP+NhW3/jIRt/4yEbf+Lgm7/h4Ju/4SDbv+Gg27/iYJu
/4uBb/+MgnD/gntr/4WBdf+UlYz/197Y/9rk4f/W4uP/ztrb/8LNzv/T3t7/4evq/+/29v/1+vr/
//7///38/v/7/f//+fz+//L4+//r9Pr/6PD1/+/08//x8+r/5+bU/5mUdv+Ae1H/gn1M/4aASP+H
gkb/hYFK/4WAUP+FgVH/h4FS/4iCVP+Ig1b/ioRX/4qEV/+LhVn/jIZa/4yGW/+Mhlz/jYde/46I
X/+QimH/kYti/5KLZP+Si2T/kopl/5KJZv+Rimf/kIpn/46JaP+NiGj/jYhp/4yHaP+Mhmv/i4Zs
/4uFbP+KhWz/ioRt/4iEbP+GhGz/h4Rs/4mDbv+JgW//hn9w/4iEdv+Li4H/x8vF/9vj3//W4d//
1uDg/8fR0f/K1dT/3ebl/+z08//2+/v/+fz8/////////////v////3+/v/8/f7/9ff6//D0+P/v
8vb/7vPz//D27//g5NT/hIZo/359Uv+Cfkb/ioVF/4aBSf+EgFP/hIBU/4WBVf+Hg1b/h4NW/4iE
V/+JhVb/ioZW/4uHV/+Mh1r/i4Ve/4uGX/+NiGH/jopi/4+LYv+PimP/kIpk/5CKZv+QiWj/kYpp
/5GLaP+Qimf/kIpn/46JaP+MiGj/i4hp/4mIav+Hh2r/h4Zq/4aHav+Mhmr/joNn/4yEav+Kg3D/
gX1v/4CAd/+DhoH/vcTD/9vk5P/W4OH/1uLj/8zZ2P/K19X/2uTj/+rx8P/2+vn//v//////////
///////////////+/v7//f39//r6/P/19/n/7/L2/+3y9P/v9fL/8Pbt/9TYwv+Qkm7/g4FQ/4J+
Rf+HhEv/hIJP/4aCUf+Gg1L/hoJS/4aCU/+JhFf/ioRY/4uEWf+MhVv/jIZd/4qFXv+Lhl//jYhg
/46KYf+PjGH/j4ti/5CLY/+Qimb/kIpn/5GKaf+Rimn/kIpp/5CIaf+PiGr/jYdq/4uHav+Kh2v/
iIZs/4iFbP+Hhmz/iYNp/4+Fav+Lg2v/hYBu/4KCdv+Dh3//r7ay/9rj4//Y4uT/2OTm/9Hd4P/I
1tT/0t/d/+Xu7f/x9/b/+fz8/////////////////////////////v7+//7+/v/+/v7/+vv8//H1
9//u8/b/7vT1//L49f/x9uj/2dzE/4mJZf+DgVb/gIBK/4OESP+GhUv/h4VO/4iEUf+Ig1P/i4NW
/4uDWf+Mglz/joJf/46DYP+LhV7/i4df/42JYP+Oi1//j4xg/4+MYf+Pi2L/kItk/5CKZv+Rimn/
kYlr/5CIa/+QiGv/j4dr/46GbP+OhWz/jIVt/4uEbv+Lg2//ioJv/4yFb/+KhG7/i4Rz/4KBc/+H
ioH/tLm1/9vk4//W4OP/1+Ll/9Hd4P/I1Nb/0N3c/+Dr6f/u9fT/9vv6//z+/v//////////////
///////////////////////////+//39/f/3+fr/8fb5/+/09//u8/X/8vfz//H16f/d38v/k5R4
/4CBVP+Fhkv/hYRL/4eETv+JhVL/i4VV/4yDVv+Ng1n/joJc/5GCX/+Pg1//i4Ve/4uHXv+NiV7/
jotf/4+MX/+PjGD/kIxi/5CLZP+QimX/kYto/5GJav+QiWr/kIhr/5CHa/+Phmv/j4Vt/4+Ebv+O
g2//joJw/4yCcP+JgnH/hoNz/359cP+Nj4b/vMG9/+Dn5//Z5Ob/1+Lm/9jj5//I1Nj/0d3f/+Lt
7P/s9vX/8/n4//n9/f/9/////////////////////////////////////////////v/+/v3/+/z9
//X4/P/w8/r/8fX6/+nu8f/2+vj/7/Pr/+Tn2P+jpIT/h4dX/4SEUv+EgVH/h4JU/4qEV/+Lg1f/
joNY/4+EWf+RhVv/kIVc/4uGXf+Lh17/jYpe/46LXv+PjF//j4xf/5CMYv+Qi2T/kIpm/5GLaP+R
i2j/kYpo/5CJaf+QiGr/j4dq/4+Ga/+PhW3/joRt/46Db/+NgnD/h4Jz/4CAdf+WmZH/ys/M/9/m
5f/Z5Ob/2eTo/9vn6//O2d3/1eDk/+Dq7f/s9vX/9fz7//j9/P/8/////f39////////////////
//////////////////////////7////+//39/v/5+///9fj///Dz+//t8fj/7vP3/+/09f/x9vT/
8/Pm/8zJsP+TkHP/gn1e/4N+XP+GgFr/h4FY/4uEV/+Nhlb/j4lX/42GV/+Lhl3/jIdf/42KX/+O
i1//j4xg/46LYP+QjGL/j4pj/5GLZv+Ri2j/kY5o/4+MZv+NiWX/jYln/42Iav+Mh2r/jIVr/42H
b/+LhG7/i4Nv/46NgP+wta//2d/c/9zl5P/c5uj/2+bq/9fi5v/O2dz/1N3g/+Pr7f/q8/P/9v38
//j+/f/8/v7////////////////////////////////////////////////////+///+/v/+/v7/
+/z///n7///19/7/8fT8/+/z+f/v9Pf/8PX2//b39P/38+v/5OHW/6uolv+Bfmj/hoJm/4SBXv+G
g1n/iIZW/4mFU/+Pi1v/jolh/42IYf+MiF//jYlf/46KYf+Pi2L/kItk/5GLZ/+SjGr/k4xr/4+L
aP+Mimb/jIpn/4uJaP+LiGr/i4lu/4qIcP+IhnH/g4Jv/6alk//V2M3/3+bk/97n5v/a5Ob/3Ofr
/9bh5f/Q29//2OLl/+Pr7f/w9vb/9Pr5//n+/f/6/v3//v///////////v////7/////////////
///////////////////////+/v/+/v7//v7+//79///9/f///fz///j6/v/09/r/8PX2//D19f/v
8/T/9PX4//Dx8f/08/D/4+PZ/6qrmf+Qj3f/fXxd/4mHZP+Hhl//hYRb/4iDXv+LhWH/johi/5CL
ZP+Qi2X/j4lk/46IZP+Ri2n/kIhq/5CJbP+NiWz/jIls/4qIbP+HhWz/hoZw/4GDb/+Ii3r/oqaY
/9LXzP/l6uH/3uXh/93m5//d6On/2uXp/9jj5//T3uL/3Obp/+vz9P/z+fj/9/v4//j9+v/7//7/
/f7+//////////////7////+///////////////////////////////////+/v7//v7+//7+/v//
/v////7////+///9/f//+vv8//b5+P/y9/X/8Pb3/+zz9//q8PP/8PX1//P38//x8+v/4+TY/8PD
sf+joo3/iohx/4+LcP+Mhmb/johm/4+JZf+OiGP/jYdi/5KMaP+PiWf/k4xt/5CHav+Ph23/jYdx
/4yIdP+LiXb/j45+/5mbj/+vtKn/0tnS/+Do5P/h6+n/4u3t/+Dq7P/g6u3/2ubo/9Pf4v/W4eX/
3+rt/+rz9P/1+/r/+f36//z++P/9//r//v/+///////////////////+/////v//////////////
//////////////////////7////+/////v////7////9/////P7//v7+//7//v/8/vv/9/v2/+71
9f/o8/b/7ff5/+319f/p8fD/7/Ty//P28v/z9e7/9fXt/+bl2//Mybv/u7ac/7Gsj/+loIL/nZl6
/5qWd/+Khmf/i4Zp/5uVfP+gmYL/qaGN/6ummP+3sqj/yMa9/9fX0f/o6+f/6vHv/+Ps7v/f6e7/
3+vy/93q8v/c6O7/2OLl/9Te4f/c5ur/5e/z/+z1+P/y+vr/+P38//3/+/////n////5/////v//
///////////+/////v////7/////////////////////////////////////////////////////
///////////////////////////+//7+/f/4/f3/8Pr6/+/4+P/v9/b/7fX0/+719P/u9PP/7vTx
/+708f/u8/H/7vPw/+3z7P/r7+j/5+vk/+Po4f/i5+D/2+DY/9zg2f/f5N7/4eXg/+Tn4//l6uj/
5+3s/+fv7v/m7u7/4+3t/+Hr7P/h7O//4Ovv/97p7f/c6Oz/3ufq/+Xp6v/q7u//8fX2//b6/P/6
/f7//P7+//3///////7////+/////v//////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////+/7+
//b9/P/1/Pv/8/n4//H49//v9vX/7vX0/+719P/u9fT/7vX0/+319P/q8vX/6fH0/+nx9P/p8fT/
6fH0/+jw8//o8PP/6PDz/+jw8//n8PP/5e7x/+Tu8P/j7fD/4uzv/+Hr7v/g6+3/3+rs/9/p7P/g
6u3/4uzu/+vx8f/09fX/+Pj4//z8/P/+/v7/////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////////////////////////3////6//7/+f7+//j9/P/3/Pv/9fr5//H29f/x9fX/
7/Tz/+7z8v/t8vL/7fP2/+zy9f/r8vX/6/H0/+rx9P/p7/L/6e/y/+nv8v/p7/L/6e/y/+jv8v/n
7vH/5Ozv/+Pq7f/i6ez/4ejr/+Lp7P/l7fD/6/P2//D3+v/2+fr/+vv7//z8/P/9/f3//f39//39
/f//////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////+////
/f////z////8/////P7+//v+/v/6/f3/+Pv7//b4+P/z9vb/8fT0/+7y9f/t8vX/7PH0/+vw8//r
8PP/6e7x/+nu8f/p7vH/6e7x/+nu8f/m7O//5uvu/+fs8P/p7vH/6u/y/+zx9P/v9Pf/8vf7//b6
/f/2+v3/+Pv8//39/f/+/v7/////////////////////////////////////////////////////
////////////////////////////KAAAACAAAABAAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAP39/d79/f3u/f397v39/O79/f3u/P397vv9/e73+vvu6PLy7tTe4u65ycruqrm97qKvt+6m
rrruqbK97qavu+6jrbnupq667pmqsO6LnqLujaCj7pmrru61v8Xuzdnc7uLp7e7z9vnu+/v97v38
/e79/f3u/f397v39/e79/f3e/f398///////////////////////////+v///+Xv8P/F19j/scXG
/7HFx/+/zdD/0t3i/9bp7v/X6vD/1unv/9bp8P/Z6/D/3Ojt/9Dg5P+2ytD/o7S6/5mkqP+crLH/
t8rO/9vo6//z+v3///////////////////////39/fT9/f3t/////////v/+/v//+v7+/+329v/T
3uH/tsTH/7LEyf/A1Nb/zd/h/9Lf4v+3vbz/o5+P/5ONfP+PiXj/j4l4/5KMe/+gnJD/sray/8ra
3f/Q4ef/x9TY/6Gzuf+FmZ//m6yw/8fU1//l7vD/+Pv7/////////////f397v39/e3/////////
//z8/v/v9Pb/zdjb/7fHyv/F1dn/1uHq/9Dd4v/P3t//1OHj/56gm/9aPx7/WTsX/1o9G/9ZPBr/
WDsY/001Fv9uZVL/zNXS/9Dg5v/Q3uX/0t/n/77M1P+Uoqn/k6Kn/73N0P/l6+z//Pr6///////9
/f3u/fz97f/////8/v7/7/X2/9Ha2/+9ysv/zN/i/9Db2v+sq6f/yNLY/8zd4//R3+D/2ePg/4V/
av9YQhr/Y0sg/1xJJv9bRyL/V0Ac/6iikf/d6On/zdzg/87b4P/N2+D/0uDn/8va4f+dq7H/j5yg
/8HMzv/l7e7//v////39/e79/P3t//////X6+v/V4uT/wM/T/9fk5P/M1c7/dnRe/3JoVP/M19v/
yt3m/83c3v/U4+f/vMLA/2dUMv9lSh7/YEwp/19JIv9dSyf/uLuw/9Tj6f/O3N//z9ze/83b3v/U
4eT/2ubq/9Hc4v+fq7P/kqOn/8PU1f/y+vr/+fz87v39/e3/////4+vs/8TT2f/P4en/ytTP/3dx
Vf9SQBb/dmpQ/9DZ2P/N3uX/ztze/83c4f/Y4+f/kox5/1hFIf9mUCf/Z04h/15JIv+vrqL/1+Xp
/8/c3v/P3OD/1N3i/6eqqf+0trD/3+fl/8rd5P+TqLD/na2v/93n6f/z9/fu/P397fb9+//O293/
0N7l/9Te3f93dmL/Wkgd/21SH/9mWDb/w8nD/9Xj5//S3uD/z9zh/9Pi5//EzMf/ZVxC/2NMIf9r
USL/XUgd/5WSgf/X5Ob/0Nzf/87c4P/a5Oj/gYB4/0k+KP+sqZf/3erq/8HV3P+RoaX/usnL/+Lq
7O74+/rt6PHv/8ra3v/c6Ov/nZeC/15LI/9rVij/bVco/2JSK/+tsqf/3ens/9bf4//T3uP/z9/h
/9fo7v+amIf/Xkkf/2lSJv9gSR7/fnlm/9Ld3v/R3eD/zdvg/9fm7f+pqJn/UjsU/1lEIP+mpJj/
3Ojt/66/xv+crrH/ytna7vH39+3b6On/2Ofr/8DHwf9pWjf/cFUi/21YLP9pWC//ZVIn/5uaiP/c
6ev/0+Hp/9Lg5v/Q4OX/ydXV/8jQyf90aEb/Y04i/2ROIv9sYkn/y9PR/9Df5P/N3N7/0uLm/7/D
uf9kTyv/XT8T/1dDKf+zs6z/0+Pm/5ywtv+wvsTu5u3y7dnn7v/e5+f/jYx3/2dXMv95YjL/c14y
/29dMv9nVSn/iIJm/9bl5f/P4+7/0OHn/9bn7v+6vrT/vcbD/62rmP9hTyT/aFUm/2NWMv++wbj/
zuLp/8vd3f/S4OD/y9XS/2xhS/9iQxv/WzwY/3JnU//V4N3/s8fP/56tse7d6Ort4e/y/83NwP9u
Yj//al46/3RkPv96aDz/fGo8/3NkOf95clT/0dzX/9Pm7v/X4+X/2+jr/77Hxv+UkoD/1tvQ/3hx
VP9lUiH/YlIp/6momf/S5Ov/x9zi/8zd4P/W4eH/gntp/1tCGv9hRh//Vkct/7i9tf/N4OX/mqqs
7tvo6e3o9fT/rqqT/2tZLf9vYTv/cGVB/29jPv9wYz7/eGxF/3duTP/Cx7z/3Ozw/9rk5f/c5uj/
0t/h/313X/+1uaz/tbmo/2NVKf9iUCT/l5F7/9bj5v/K3eb/ytvi/9nm6f+Zl4j/V0Md/2FKIf9T
Px3/mZSE/9nr7f+hsrju2ujp7efz7/+TkHf/a1wu/3dmOP9yZj3/ioht/5SVff9xZ0P/dWhE/7Ky
oP/g7u7/2OXp/9jl6f/i7Ov/kpB+/3lzWv/W39T/gH5d/11NIP+CeFz/2N/d/8/f5v/L3OP/1ePp
/7Kzp/9cTCf/YUwj/1pBGv+Ed2H/2OXn/63Axu7b6ezt4+3l/4J+Y/9uYTT/fGk3/3RmO/+9wKr/
7Pbr/5aVff9rYD//nZiB/+Lr5f/W5+z/2OXr/+Xt7v+2t7D/dGZJ/7i6rf+9w7D/XVMv/2tdPv/S
08f/1ePp/87c5f/R4Oj/xcvE/2lbPP9jSiD/YkYb/3RlS//T3d7/uMvO7tzq8+3k6+H/g3xZ/3Nl
NP99bTz/d2pA/4J+Yv/X3dH/4ezl/4+QgP+SjXz/4+jg/9vp7P/d5ev/3uny/8rNy/9/dmH/jYVv
/9fd1f+Uk4P/ZVtB/8jIuv/U5e3/0N3o/9He6P/P29v/eG9W/2NIH/9nSh//aFg//87W1f+5zdDu
3+zz7ebt5v+HgWH/dGg3/39wPf+BckH/dWtB/4iGaP/d5Nf/6PDr/9Xf4f/e6u7/3ejs/93o7f/a
6fL/2ODb/46JdP91cFf/qqqc/+Tn3v+/xL7/0dzd/9Hh6P/S3+T/zt/n/9jm5v+RinH/XUcg/2VM
If9fUDj/ytLS/7vP0+7j7fLt6O/q/4uGaP91aTb/gXM+/4R2QP+FeET/enJE/5KTd//g6d//5/b8
/9zr8v/f6+z/3uvs/9fp7//k7ef/pKGK/3l1Wf+CfGf/xci9/+Xy9v/S4+z/1OLn/9Xi4v/Q4ef/
3Ofo/46Gb/9ZSCL/X0sg/2xgR//R2dn/vNDV7uTt8u3u9fT/mpR2/3hpNP+CdkD/gnlD/4N7Rf+D
fUf/eXZJ/5iZev/b4NP/7Pj2/+Ty8v/h7fD/3u70/+317f+uqZD/fnhb/4V8Yf+KhXP/xcrD/+Ds
7f/b6Ov/2ufm/9zq8f/IzdD/cmZQ/11KJf9bSR7/eG5U/9bg3/+5zc/u6O7z7fb8/f+yrpP/d2s0
/4J2RP+CeUj/g31J/4SASf+GgUz/gHpL/4+LZ/+2u6b/0dvP/9/j3P/X3tr/t7ep/4yEaP+Jf2L/
jIFk/4V8YP+Ig23/q6yh/8fOyf/T2db/vsPE/42Niv+DdmL/emhL/1tKJ/+Oh2//3unn/7HGye7y
8/bt9/v//83Rvv95c0H/g3VF/4t6Sv+Jfkn/hoFL/4WBT/+IglP/hX5R/4R+Uv+QiWH/mpNv/5SN
a/+Hf17/i4Fh/42DZP+Kg2T/ioRl/4eAZP+CemP/ioJt/5CIev+Efm//gHpo/4iBcP+Kf3P/d25f
/7Gypv/Z5+X/scTH7vf3+u30+P7/6+/l/5GPav98cz7/in9B/4l/R/+Gfk7/hYBQ/4eCUv+Jg1X/
jIVY/4uEWf+Kglr/jIRd/4+GYv+PhWP/joVk/4uFZf+KhWb/ioRo/4qDav+JgGr/h3xr/4h+bf+J
fmz/iH5u/4N3bv+OioT/z9nX/8rc3/+9zdPu+/r97fX6/v/1+fr/wMCs/3V0QP+Ggjz/iIBF/4V+
T/+FgFD/h4FS/4mDVf+LhFj/jIZb/42GXf+QiWL/kIlj/5CHZP+Qh2X/jYdm/4uGZ/+LhWn/i4Rr
/4qCbP+JgW7/i4Bu/42Abv+JfW//f3Vt/6qtrv/T4+r/wdTa/87c4u78/P3t+/7//+zz+f/r8Ov/
lZVw/3t3PP+IgEb/hX9M/4WAUP+HgVL/iYNV/4uEWP+MhVv/jYdc/4+KYP+Ri2P/kYlk/5GJZP+O
iGf/jIdo/4yFav+MhGz/i4Jt/4eBbv+Jgm7/joFu/4N5a/+OjIT/0Nnb/8zb4f/M3N//5u7y7vz8
/e3/////6/T5//H5+//c3Mv/hYBY/395Qf+Ggkj/hYBR/4eBU/+Jg1b/i4VY/4yGWv+Mhl3/j4pg
/5KLY/+SimX/kopm/4+KaP+NiGj/jIdq/4yFbP+KhG3/h4Nt/4iDbf+GfWz/hIBz/8LHwf/c5+b/
yNPT/+Xv7f/3+vru/f397f/////6+/3/8PP4//b7+//Lzrv/gX9P/4F9Qf+FglH/hoJU/4iDVv+K
hVj/jIZb/4uGX/+NiWD/j4xi/5CKZf+Rimj/kYpp/4+IaP+Mh2r/iYZr/4eGa/+NhWn/h39p/318
cf+zubf/3ujq/83a2v/V4N7/+/7+//39/e79/f3t/////////v/4+fv/7/T4//f9+f/Mz7j/hIRX
/319QP+IhE7/ioRV/42CW/+Pgl//i4Ze/42KXv+PjGD/kItj/5GKZ/+RiWr/kIhr/4+GbP+OhG7/
jIJv/4N9af+DgnP/tby3/97p6//R3eL/0d7f/+v18////////f397v39/e3////////+//7+/v/1
9/3/7vP6//b7/P/b3c3/nZt0/314T/+EfFL/jINV/4+GWP+Mh17/jYpe/4+MX/+Qi2P/kYtn/5CM
Z/+PiWf/jYdp/4qBaP+GfGf/lJOH/8PKxv/h6+7/1eHl/9Xf4//s9fX/+v/+///////9/f3u/f39
7f////////7///7+//z9///3+P7/8PX5//j8/f/x7+3/wb+z/5SSeP+CgFj/gn9S/4eBWv+KhVz/
jIhf/46IY/+Oh2b/iYVk/4SBYv+Cgmj/kpJ//7m7rP/d49//4Ovu/9Xh5f/b5ef/7/X0//r+/f/+
//////////39/e79/f3t///////////+/v////7////+///7/Pv/8ff2/+32+v/2/Pz/6+7o/9DR
xP+zsZ//pZ+C/52Yd/+Uj27/lpBy/56Wf/+ino3/r66j/8TIwf/a4+P/5fH1/97p7f/Y4ub/4evu
//T6+v/+//v////8/////////////f397v39/fP/////////////////////////////////////
+f////b+/f/3/v3//P////n//v/x9/T/6/Hu/+Xr6P/k6ef/6e7t/+vy8//v9/n/7vj6/+jz9//l
8fX/7vT1//r7/P/////////////////////////////////9/f30/f393P39/e39/f3t/f397f39
/e39/f3t/f397f39/e36/f3t+Pz87fb5+e3z9/bt7vX17ez09+3s9Pft6/P37ery9u3p8vXt6O7z
7ebr7u3l6u3t6e7z7fH3+O34+vvt/f387f39/e39/f3t/f397f39/e39/f3t/f397f39/d0oAAAA
GAAAADAAAAABACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/f393f39/e39/fzt/f397fz9/e33
+vvt3Ojp7bzMze2su7/trbrB7bPAze20wc3tsr/N7bC/yO2dsLTtkqWr7Z6ssO29yc3t3uns7fb5
++39/f3t/f397f39/e39/f3c/f399P////////////////X+///T3+L/uMzO/7vQ0v/L2dz/zdbW
/8PNyP+8xsH/vMbB/8bNyf/P2dn/xNfc/7bEyf+crLH/n7O4/9He4f/4/f/////////////9/f3z
/f397v/////+////7PL0/8TS1P+/z9T/z9zk/9Df4v/V4+f/lpOH/15DIf9gRib/X0Ul/1tCI/93
bVv/ztna/9Tk6//L2eD/p7a+/5Ggpf+8ys3/7/P0///////9/f3t/f397v/////u9fX/ydTV/8ra
3P/CzMn/q6ql/83c5P/R4eT/ytPO/2pbPf9fQxf/W0cj/1I7FP+Xj3v/2ufp/83b4P/P3OH/1+Xs
/7rI0P+RnaP/vcrM//b9/f/9/f3t/f397v3////Q3eH/zN7k/8TLw/9jWTv/hX5r/9Pj6//M3N//
1+fs/6Wjl/9cRR3/ZE0m/1tDGf+koZL/1+bs/8/c3//P297/xMzN/9zl5v+8y9P/j6Oo/9He3//2
+frt/P397ujx8P/O3eT/x9HQ/2phRP9cQxD/f3VZ/9Th4//S3+L/0N/l/9Dc3f9yalL/Ykkd/2FH
GP+OiHP/1+To/8/d4f/W4eb/eHVr/4eAbf/c6Of/rsLJ/6W1t//d6ert9Pf37tno6f/W4+X/iH1i
/2FKHP9qVCX/b2I//8vU0//Y5On/0t7i/9Xo7f+tsaX/YEwh/2JKHP93blX/0Nze/9Dd4v/X5+3/
lpF9/0owBv+MhHH/1OHm/6S3vP+5yMvt5ezx7uDu8/+ytq3/Z1Qs/3RbKv9rWC7/aVkv/7rBtv/X
6fL/0eLq/8rW1v/Gz8n/hXxe/19JGf9pXDr/xs7M/87g5f/W5ef/r7Op/11CG/9VNxT/paOY/8bZ
3v+gsLTt3Ojs7uLr6v+FfWD/aFo0/3hlO/95Zjj/bFwx/6irmv/a7fX/1+To/8/a2/+nqZz/ubus
/2RUKf9kUif/tLiv/87j7P/Q4uX/w8vI/2VTNP9bPBP/b2NM/9Lg4f+is7nt3uzu7tHWy/9zYzn/
bmE5/29lQv9yZ0P/cGM8/5qWfv/d6+3/2+bn/93q7v+Rj33/srao/5GOcf9bSBn/pKGP/9Xm7f/L
3uX/0d3d/3RoTf9aQhj/XUkp/8PKxP+xxMvt4/Hz7ru/sf9rXjP/dWMy/42GZf/ByLj/eXFQ/4R7
Xf/Z4t3/2Oju/+Lu8f+trqP/h4Fq/8HIuP9fUyr/i4Bm/9zm5//N3eb/1uTp/4yGb/9aRBn/XkMb
/7Cvpf/A1drt5vT37rW2of9tYDL/emk4/393VP/U3M//x87D/4N9af/S1s3/3uvw/+Dp8v/Kz87/
fXJa/72+sP+bmYj/enBV/9jg3v/Q3+v/1+bv/6Okl/9gRh7/X0IZ/6Cckf/E2t3t6PX47rq7p/9w
ZTX/gHE9/3ttPf+DfVv/2eDT/+Lr7f/a5uz/3urt/9vq8f/Y4uH/i4Zu/4aCbf/W2dD/ytPQ/9Hg
5v/R4Ob/1ebu/7u/tP9iTif/WUEZ/5qWi//J297t6fb47sLCtP91aDf/gXQ+/4V5Q/99dED/iopo
/9nh2f/q+Pz/4/Dy/93t8//p9PH/o6CG/3dwVP+fnY7/3urr/9zr8f/Y5ef/3u71/62tov9aSCP/
WEUc/6inm//J297t7PX57tjazv99cT3/gXVC/4J7SP+EgEj/f3pG/46IYv++wq//2OLZ/97m4//G
yr//kYlu/4h9Yf+Eel//mpiH/8TKxP/U3Nr/vcTG/4iCd/9zYUP/Xk0q/7y+sv/A0tjt9PT47u7z
8P+MiVz/gHJA/4t8Sf+GgEv/h4JQ/4V/T/+EfVH/koxk/5iQbf+KgmD/ioFg/4yEZP+KhGT/hH1i
/4Z+aP+Qh3j/g31t/4R8a/+HfHD/hX5w/9La1f+7zM7t9/f67vr///+2tp7/d3I4/4mBQP+Gfk3/
hoBQ/4iCVP+LhFf/i4NZ/4uEXP+Ph2L/j4Zk/42GZf+Khmb/ioRp/4qCav+Hfmv/in5s/4p+bv9/
dGr/qKur/9Lj6f/A0dft+vv97vf9///l6ub/iolc/4B6O/+Gf0v/hoBQ/4iCVP+KhFj/jIVb/46I
X/+RimP/kYlk/4+IZv+Mh2j/jIVq/4yDbf+IgW7/i4Ju/4h7av+JhXv/y9XY/83d4//a5ujt/P39
7vn+///z+v//0dHA/355Sf+DfkL/hoFR/4eCVf+JhVf/jIZa/42IX/+Qi2P/kYpl/5CKZ/+NiWj/
jIdq/4qFbP+JhGz/hoBq/4B7bf+9wr3/1eLi/9rl5P/2+fnt/f397v/////2+Pv/9vz9/8bJsf9/
fUj/f31F/4iEU/+Mg1n/jIRe/4yHX/+PjGD/kIpl/5GKaf+QiGr/jYZr/4qFbf+Hf2f/gn1s/7G4
tf/Z5un/z9zc//X7+v/9/f3t/f397v/////+/v3/8/f9//b7/v/Q08H/kI5i/313S/+Jf1L/joRa
/4yIXv+PjF//kItj/5GLZ/+OiGf/i4Nn/4Z7ZP+Oinz/vsTA/93p7P/T3+P/6fLz///////9/f3t
/f397v///////v7//Pz///X4/f/4/f//6ero/7e3pv+SkW//h4Na/4eBWf+Iglj/ioNe/4qDY/+I
hWj/kJF7/7G0pv/Y4Nz/3ert/9nl6P/u9fP//P/+///////9/f3t/f399P//////////////////
///+////9/////z////x9fH/2tzS/8rLuf+/wK3/wL+v/8nIvv/T19P/4+vr/+r3+//o8vb/7PL1
//v////////////////////9/f3z/f393v39/e79/f3u/f397v39/e79/f3u+P387vb6+e70+Pju
9Pn77vL4/e7x9/zu7vf67u32+e7p8/fu5+3y7ujx9O719/ju/f397v39/e79/f3u/f397v39/e79
/f3eKAAAABAAAAAgAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP39/d79/f3u/f397u72
9+7H1tfussTH7rvJzu69zNbuvMvU7rbIzO6gsrjup7W57s7a3e77/f3u/f397v39/d79/f3z////
/+719v/N3eL/ydnf/9Tl6f+inpD/fGtQ/31uVf+UjX3/0uDj/8LS2f+jtLv/wc7R///////9/f30
/f397fL4+f/P3uH/rbSs/66xrv/X6vH/sbSs/1pAF/9PNAv/gXVb/9fl6f/S3+T/1OLp/6e1vP/B
ztD/+fz87vf5+e3f7vP/tL25/1xKH/+Wkn//2env/9fm7P+Jg27/VzsM/4Z8Yf/W5en/z9vg/5WT
iP/DzMj/q8DH/87Z2+7o8fPt0t/h/3hoRf9eRRP/iYFl/9rn7f/V5ez/vsfC/2ZRJv9vYD7/y9ja
/9jp7v9/c1n/bFg5/8HO0f+svcHu5PH27aysnP9nVSv/cFos/3xxTf/P3+L/1+bs/77FwP+SjXH/
YEwg/7zFwv/Y7fT/o6OW/00tBP+bmIn/t8rP7t3q6u2PhWT/bF40/4V/X/91akX/xs3F/+T0+f+v
sqj/paaS/21hN/+pqJn/2e35/7i/uv9YQRj/fm9T/77O0+7Y497thXxT/3RjM/+7v63/pqaT/7e4
q//l8/r/x8vJ/5eTf/+cmoX/mZSA/9vq9f/K1dn/bls2/3FZN/+7ycru2+Xk7YuBWf97azX/gXlP
/8rRxf/l8ff/4e/2/97q7P+Mh2//rq6g/9fj5f/X5+7/2Obq/3dpSf9oVTL/u8jJ7unu8u2ZkGj/
fXE7/4B4Qf+HhFj/wca1/93n4//T2dL/kopu/4R8Yv+2urH/1N7d/7q/v/9vYEX/em1O/8TQ0O74
+v3tt7aa/3xvNv+IgEv/hH5N/4R+T/+UjWb/kIdl/4uCYf+Jg2P/hH1i/42Fc/+GfW3/gHRm/6en
n//H2Nnu+fz97eXq5f+FgUr/gntB/4aBUv+Kg1b/i4RY/4+IYP+RiWT/jIdn/4yEav+If2v/iHxp
/4h/c//H09f/z9/l7vv8/e3/////x8m1/3x4P/+CfUn/ioRX/4yFXP+PimH/kYtm/4+Jaf+Mh2v/
h4Fn/4B6Z/+0ubX/3Onp/+719e79/f3t//////j9///HyrX/iIVV/4F5S/+IgFb/i4hc/46JYv+M
hWP/hX1h/4uEcf+2vLf/2OXp/+/39//9/f3u/f398////////////////+jr6P+7u6b/op9+/5uX
c/+dl3n/op+J/7S4qv/Y4N7/6PP4//X8+////////f399P39/dz9/f3t/f397fz9/e34/f3t+f39
7ezz8+3g5+ft3+bm7ebr7e3p9Pft7fb47fj5+u39/f3t/f397f39/d0AAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')
	#endregion
	$MainDialog.MinimumSize = '800, 600'
	$MainDialog.Name = "MainDialog"
	$MainDialog.StartPosition = 'CenterScreen'
	$MainDialog.Text = "AppBot V1.4 - Streaming Profiler to App-V5 (SP3) "
	$MainDialog.add_Load($OnLoadFormEvent)
	$MainDialog.add_Shown($MainDialog_Shown)
	#
	# progressbaroverlay1
	#
	$progressbaroverlay1.Location = '518, 12'
	$progressbaroverlay1.Name = "progressbaroverlay1"
	$progressbaroverlay1.Size = '239, 23'
	$progressbaroverlay1.TabIndex = 2
	#
	# splitcontainer1
	#
	$splitcontainer1.Dock = 'Fill'
	$splitcontainer1.Location = '0, 54'
	$splitcontainer1.Name = "splitcontainer1"
	$splitcontainer1.Orientation = 'Horizontal'
	[void]$splitcontainer1.Panel1.Controls.Add($tabcontrol)
	[void]$splitcontainer1.Panel2.Controls.Add($LogOutBox)
	$splitcontainer1.Size = '921, 537'
	$splitcontainer1.SplitterDistance = 323
	$splitcontainer1.TabIndex = 1
	#
	# toolstrip1
	#
	$toolstrip1.BackColor = 'CornflowerBlue'
	$toolstrip1.ImageScalingSize = '32, 32'
	[void]$toolstrip1.Items.Add($toolstripsplitbutton1)
	[void]$toolstrip1.Items.Add($PathText)
	[void]$toolstrip1.Items.Add($FileBut)
	[void]$toolstrip1.Items.Add($StartBut)
	[void]$toolstrip1.Items.Add($toolstripbuttonHelp)
	$toolstrip1.LayoutStyle = 'HorizontalStackWithOverflow'
	$toolstrip1.Location = '0, 0'
	$toolstrip1.Name = "toolstrip1"
	$toolstrip1.Size = '921, 54'
	$toolstrip1.TabIndex = 0
	$toolstrip1.Text = "r"
	#
	# LogOutBox
	#
	$LogOutBox.Dock = 'Fill'
	$LogOutBox.Location = '0, 0'
	$LogOutBox.Name = "LogOutBox"
	$LogOutBox.Size = '921, 210'
	$LogOutBox.TabIndex = 0
	$LogOutBox.Text = ""
	#
	# tabcontrol
	#
	$tabcontrol.Controls.Add($tabBaseData)
	$tabcontrol.Controls.Add($tabShortcuts)
	$tabcontrol.Controls.Add($tabpage3)
	$tabcontrol.Controls.Add($tabpage4)
	$tabcontrol.Controls.Add($tabpage2)
	$tabcontrol.Controls.Add($tabpage1)
	$tabcontrol.Dock = 'Fill'
	$tabcontrol.Location = '0, 0'
	$tabcontrol.Name = "tabcontrol"
	$tabcontrol.SelectedIndex = 0
	$tabcontrol.Size = '921, 323'
	$tabcontrol.TabIndex = 0
	#
	# tabBaseData
	#
	$tabBaseData.Controls.Add($groupbox1)
	$tabBaseData.Controls.Add($checkboxConvertToAppV5)
	$tabBaseData.Controls.Add($buttonBrowseFolderRoot)
	$tabBaseData.Controls.Add($labelMSIAPPLICATIONROOTDI)
	$tabBaseData.Controls.Add($textboxFolderRootDir)
	$tabBaseData.Controls.Add($labelRoot)
	$tabBaseData.Controls.Add($comboboxInstallDir)
	$tabBaseData.Controls.Add($comboboxVersion)
	$tabBaseData.Controls.Add($comboboxDisplayName)
	$tabBaseData.Controls.Add($checkboxActiveSetup)
	$tabBaseData.Controls.Add($check64BitBox)
	$tabBaseData.Controls.Add($checkboxCreateMsiDialogs)
	$tabBaseData.Controls.Add($RandomCheckGuidBox)
	$tabBaseData.Controls.Add($labelInstallDir)
	$tabBaseData.Controls.Add($labelDisplayName)
	$tabBaseData.Controls.Add($ManufacturerBox)
	$tabBaseData.Controls.Add($GenUpgradeCodeBut)
	$tabBaseData.Controls.Add($UpgradeCodeBox)
	$tabBaseData.Controls.Add($labelManufacturer)
	$tabBaseData.Controls.Add($LanguageComb)
	$tabBaseData.Controls.Add($labelLanguage)
	$tabBaseData.Controls.Add($labelVersion)
	$tabBaseData.Controls.Add($labelUpgradeCode)
	$tabBaseData.Controls.Add($PackagenameBox)
	$tabBaseData.Controls.Add($labelPackagename)
	$tabBaseData.Controls.Add($GenProductCodeBut)
	$tabBaseData.Controls.Add($labelProductcode)
	$tabBaseData.Controls.Add($ProductcodeBox)
	$tabBaseData.Location = '4, 26'
	$tabBaseData.Name = "tabBaseData"
	$tabBaseData.Padding = '3, 3, 3, 3'
	$tabBaseData.Size = '913, 293'
	$tabBaseData.TabIndex = 0
	$tabBaseData.Text = "Base data"
	$tabBaseData.UseVisualStyleBackColor = $True
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($SelectTemplatePath)
	$groupbox1.Controls.Add($textboxTemplate)
	$groupbox1.Controls.Add($checkboxAppVTemplate)
	$groupbox1.Controls.Add($checkboxFullLoad)
	$groupbox1.Location = '437, 167'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '346, 112'
	$groupbox1.TabIndex = 48
	$groupbox1.TabStop = $False
	$groupbox1.Text = "Sequencing parameter"
	#
	# SelectTemplatePath
	#
	$SelectTemplatePath.Location = '310, 68'
	$SelectTemplatePath.Name = "SelectTemplatePath"
	$SelectTemplatePath.Size = '30, 27'
	$SelectTemplatePath.TabIndex = 50
	$SelectTemplatePath.Text = "..."
	$SelectTemplatePath.UseVisualStyleBackColor = $True
	$SelectTemplatePath.add_Click($SelectTemplatePath_Click)
	#
	# textboxTemplate
	#
	$textboxTemplate.AutoCompleteMode = 'SuggestAppend'
	$textboxTemplate.AutoCompleteSource = 'FileSystemDirectories'
	$textboxTemplate.HideSelection = $False
	$textboxTemplate.Location = '16, 70'
	$textboxTemplate.Name = "textboxTemplate"
	$textboxTemplate.Size = '287, 25'
	$textboxTemplate.TabIndex = 49
	#
	# checkboxAppVTemplate
	#
	$checkboxAppVTemplate.Location = '17, 42'
	$checkboxAppVTemplate.Name = "checkboxAppVTemplate"
	$checkboxAppVTemplate.Size = '223, 24'
	$checkboxAppVTemplate.TabIndex = 48
	$checkboxAppVTemplate.Text = "App-V Template"
	$checkboxAppVTemplate.UseVisualStyleBackColor = $True
	$checkboxAppVTemplate.add_CheckedChanged($checkboxAppVTemplate_CheckedChanged)
	#
	# checkboxFullLoad
	#
	$checkboxFullLoad.Location = '17, 24'
	$checkboxFullLoad.Name = "checkboxFullLoad"
	$checkboxFullLoad.Size = '197, 24'
	$checkboxFullLoad.TabIndex = 47
	$checkboxFullLoad.Text = "FullLoad"
	$checkboxFullLoad.UseVisualStyleBackColor = $True
	#
	# checkboxConvertToAppV5
	#
	$checkboxConvertToAppV5.Font = "Segoe UI, 9.75pt, style=Bold"
	$checkboxConvertToAppV5.ForeColor = 'Red'
	$checkboxConvertToAppV5.Location = '453, 135'
	$checkboxConvertToAppV5.Name = "checkboxConvertToAppV5"
	$checkboxConvertToAppV5.Size = '372, 26'
	$checkboxConvertToAppV5.TabIndex = 0
	$checkboxConvertToAppV5.Text = "Convert to App-V 5 (only on a Sequencer System)"
	$checkboxConvertToAppV5.UseVisualStyleBackColor = $True
	$checkboxConvertToAppV5.add_CheckedChanged($checkboxConvertToAppV5_CheckedChanged)
	#
	# buttonBrowseFolderRoot
	#
	$buttonBrowseFolderRoot.Location = '723, 51'
	$buttonBrowseFolderRoot.Name = "buttonBrowseFolderRoot"
	$buttonBrowseFolderRoot.Size = '30, 26'
	$buttonBrowseFolderRoot.TabIndex = 4
	$buttonBrowseFolderRoot.Text = "..."
	$buttonBrowseFolderRoot.UseVisualStyleBackColor = $True
	$buttonBrowseFolderRoot.add_Click($buttonBrowseFolderRoot_Click)
	#
	# labelMSIAPPLICATIONROOTDI
	#
	$labelMSIAPPLICATIONROOTDI.Location = '453, 20'
	$labelMSIAPPLICATIONROOTDI.Name = "labelMSIAPPLICATIONROOTDI"
	$labelMSIAPPLICATIONROOTDI.Size = '363, 23'
	$labelMSIAPPLICATIONROOTDI.TabIndex = 45
	$labelMSIAPPLICATIONROOTDI.Text = "MSI [APPLICATIONROOTDIRECTORY] - Source"
	#
	# textboxFolderRootDir
	#
	$textboxFolderRootDir.AutoCompleteMode = 'SuggestAppend'
	$textboxFolderRootDir.AutoCompleteSource = 'FileSystemDirectories'
	$textboxFolderRootDir.Location = '453, 51'
	$textboxFolderRootDir.Name = "textboxFolderRootDir"
	$textboxFolderRootDir.Size = '264, 25'
	$textboxFolderRootDir.TabIndex = 3
	#
	# labelRoot
	#
	$labelRoot.Location = '400, 56'
	$labelRoot.Name = "labelRoot"
	$labelRoot.Size = '47, 23'
	$labelRoot.TabIndex = 44
	$labelRoot.Text = "Root:"
	#
	# comboboxInstallDir
	#
	$comboboxInstallDir.FormattingEnabled = $True
	$comboboxInstallDir.Location = '127, 82'
	$comboboxInstallDir.Name = "comboboxInstallDir"
	$comboboxInstallDir.Size = '238, 25'
	$comboboxInstallDir.TabIndex = 43
	#
	# comboboxVersion
	#
	$comboboxVersion.FormattingEnabled = $True
	$comboboxVersion.Location = '127, 175'
	$comboboxVersion.Name = "comboboxVersion"
	$comboboxVersion.Size = '238, 25'
	$comboboxVersion.TabIndex = 42
	#
	# comboboxDisplayName
	#
	$comboboxDisplayName.FormattingEnabled = $True
	$comboboxDisplayName.Location = '127, 51'
	$comboboxDisplayName.Name = "comboboxDisplayName"
	$comboboxDisplayName.Size = '238, 25'
	$comboboxDisplayName.TabIndex = 41
	#
	# checkboxActiveSetup
	#
	$checkboxActiveSetup.Location = '453, 83'
	$checkboxActiveSetup.Name = "checkboxActiveSetup"
	$checkboxActiveSetup.Size = '287, 19'
	$checkboxActiveSetup.TabIndex = 39
	$checkboxActiveSetup.Text = "ActiveSetup"
	$checkboxActiveSetup.UseVisualStyleBackColor = $True
	#
	# check64BitBox
	#
	$check64BitBox.Location = '453, 120'
	$check64BitBox.Name = "check64BitBox"
	$check64BitBox.Size = '204, 18'
	$check64BitBox.TabIndex = 38
	$check64BitBox.Text = "64 Bit (source architektur)"
	$check64BitBox.UseVisualStyleBackColor = $True
	#
	# checkboxCreateMsiDialogs
	#
	$checkboxCreateMsiDialogs.Location = '663, 120'
	$checkboxCreateMsiDialogs.Name = "checkboxCreateMsiDialogs"
	$checkboxCreateMsiDialogs.Size = '153, 18'
	$checkboxCreateMsiDialogs.TabIndex = 37
	$checkboxCreateMsiDialogs.Text = "Create msi Dialogs"
	$checkboxCreateMsiDialogs.UseVisualStyleBackColor = $True
	$checkboxCreateMsiDialogs.add_CheckedChanged($checkboxCreateMsiDialogs_CheckedChanged)
	#
	# RandomCheckGuidBox
	#
	$RandomCheckGuidBox.Location = '453, 101'
	$RandomCheckGuidBox.Name = "RandomCheckGuidBox"
	$RandomCheckGuidBox.Size = '287, 19'
	$RandomCheckGuidBox.TabIndex = 36
	$RandomCheckGuidBox.Text = "Gen random GUIDS (use this careful)"
	$RandomCheckGuidBox.UseVisualStyleBackColor = $True
	#
	# labelInstallDir
	#
	$labelInstallDir.Location = '21, 85'
	$labelInstallDir.Name = "labelInstallDir"
	$labelInstallDir.Size = '100, 23'
	$labelInstallDir.TabIndex = 34
	$labelInstallDir.Text = "InstallDir:"
	#
	# labelDisplayName
	#
	$labelDisplayName.Location = '21, 54'
	$labelDisplayName.Name = "labelDisplayName"
	$labelDisplayName.Size = '100, 23'
	$labelDisplayName.TabIndex = 32
	$labelDisplayName.Text = "Display Name:"
	#
	# ManufacturerBox
	#
	$ManufacturerBox.Location = '127, 237'
	$ManufacturerBox.Name = "ManufacturerBox"
	$ManufacturerBox.Size = '238, 25'
	$ManufacturerBox.TabIndex = 28
	#
	# GenUpgradeCodeBut
	#
	$GenUpgradeCodeBut.Location = '371, 144'
	$GenUpgradeCodeBut.Name = "GenUpgradeCodeBut"
	$GenUpgradeCodeBut.Size = '36, 25'
	$GenUpgradeCodeBut.TabIndex = 23
	$GenUpgradeCodeBut.Text = "°°"
	$GenUpgradeCodeBut.UseVisualStyleBackColor = $True
	$GenUpgradeCodeBut.add_Click($GenUpgradeCodeBut_Click)
	#
	# UpgradeCodeBox
	#
	$UpgradeCodeBox.Location = '127, 144'
	$UpgradeCodeBox.Name = "UpgradeCodeBox"
	$UpgradeCodeBox.Size = '238, 25'
	$UpgradeCodeBox.TabIndex = 21
	#
	# labelManufacturer
	#
	$labelManufacturer.Location = '21, 240'
	$labelManufacturer.Name = "labelManufacturer"
	$labelManufacturer.Size = '100, 50'
	$labelManufacturer.TabIndex = 31
	$labelManufacturer.Text = "Manufacturer:"
	#
	# LanguageComb
	#
	$LanguageComb.FormattingEnabled = $True
	$LanguageComb.Location = '127, 206'
	$LanguageComb.Name = "LanguageComb"
	$LanguageComb.Size = '238, 25'
	$LanguageComb.TabIndex = 26
	#
	# labelLanguage
	#
	$labelLanguage.Location = '21, 209'
	$labelLanguage.Name = "labelLanguage"
	$labelLanguage.Size = '77, 23'
	$labelLanguage.TabIndex = 30
	$labelLanguage.Text = "Language:"
	#
	# labelVersion
	#
	$labelVersion.Location = '21, 181'
	$labelVersion.Name = "labelVersion"
	$labelVersion.Size = '83, 23'
	$labelVersion.TabIndex = 29
	$labelVersion.Text = "Version:"
	#
	# labelUpgradeCode
	#
	$labelUpgradeCode.Location = '21, 148'
	$labelUpgradeCode.Name = "labelUpgradeCode"
	$labelUpgradeCode.Size = '100, 23'
	$labelUpgradeCode.TabIndex = 27
	$labelUpgradeCode.Text = "UpgradeCode:"
	#
	# PackagenameBox
	#
	$PackagenameBox.Location = '127, 20'
	$PackagenameBox.Name = "PackagenameBox"
	$PackagenameBox.Size = '238, 25'
	$PackagenameBox.TabIndex = 18
	#
	# labelPackagename
	#
	$labelPackagename.Location = '21, 23'
	$labelPackagename.Name = "labelPackagename"
	$labelPackagename.Size = '100, 23'
	$labelPackagename.TabIndex = 25
	$labelPackagename.Text = "Packagename:"
	#
	# GenProductCodeBut
	#
	$GenProductCodeBut.Location = '371, 113'
	$GenProductCodeBut.Name = "GenProductCodeBut"
	$GenProductCodeBut.Size = '36, 25'
	$GenProductCodeBut.TabIndex = 20
	$GenProductCodeBut.Text = "°°"
	$GenProductCodeBut.UseVisualStyleBackColor = $True
	$GenProductCodeBut.add_Click($GenProductCodeBut_Click)
	#
	# labelProductcode
	#
	$labelProductcode.Location = '21, 117'
	$labelProductcode.Name = "labelProductcode"
	$labelProductcode.Size = '100, 23'
	$labelProductcode.TabIndex = 22
	$labelProductcode.Text = "Productcode:"
	#
	# ProductcodeBox
	#
	$ProductcodeBox.Location = '127, 113'
	$ProductcodeBox.Name = "ProductcodeBox"
	$ProductcodeBox.Size = '238, 25'
	$ProductcodeBox.TabIndex = 19
	#
	# tabShortcuts
	#
	$tabShortcuts.Controls.Add($splitcontainer2)
	$tabShortcuts.Location = '4, 26'
	$tabShortcuts.Name = "tabShortcuts"
	$tabShortcuts.Padding = '3, 3, 3, 3'
	$tabShortcuts.Size = '833, 285'
	$tabShortcuts.TabIndex = 1
	$tabShortcuts.Text = "Shortcuts"
	$tabShortcuts.UseVisualStyleBackColor = $True
	#
	# splitcontainer2
	#
	$splitcontainer2.Dock = 'Fill'
	$splitcontainer2.FixedPanel = 'Panel2'
	$splitcontainer2.IsSplitterFixed = $True
	$splitcontainer2.Location = '3, 3'
	$splitcontainer2.Name = "splitcontainer2"
	$splitcontainer2.Orientation = 'Horizontal'
	[void]$splitcontainer2.Panel1.Controls.Add($ShortcutList)
	$splitcontainer2.Panel2.BackColor = 'CornflowerBlue'
	[void]$splitcontainer2.Panel2.Controls.Add($buttonSelectIcon)
	[void]$splitcontainer2.Panel2.Controls.Add($buttonEditShortcut)
	[void]$splitcontainer2.Panel2.Controls.Add($buttonRemoveShortcut)
	[void]$splitcontainer2.Panel2.Controls.Add($buttonAddShortcut)
	$splitcontainer2.Size = '827, 279'
	$splitcontainer2.SplitterDistance = 242
	$splitcontainer2.TabIndex = 0
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($splitcontainer3)
	$tabpage3.Location = '4, 26'
	$tabpage3.Name = "tabpage3"
	$tabpage3.Size = '833, 285'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = "FileSystem Exclusion"
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# splitcontainer3
	#
	$splitcontainer3.Dock = 'Fill'
	$splitcontainer3.FixedPanel = 'Panel2'
	$splitcontainer3.IsSplitterFixed = $True
	$splitcontainer3.Location = '0, 0'
	$splitcontainer3.Name = "splitcontainer3"
	$splitcontainer3.Orientation = 'Horizontal'
	[void]$splitcontainer3.Panel1.Controls.Add($FileExclList)
	$splitcontainer3.Panel2.BackColor = 'CornflowerBlue'
	[void]$splitcontainer3.Panel2.Controls.Add($EditFileExclBut)
	[void]$splitcontainer3.Panel2.Controls.Add($RemoveFileExclBut)
	[void]$splitcontainer3.Panel2.Controls.Add($AddFileExclBut)
	$splitcontainer3.Size = '833, 285'
	$splitcontainer3.SplitterDistance = 248
	$splitcontainer3.TabIndex = 1
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($splitcontainer4)
	$tabpage4.Location = '4, 26'
	$tabpage4.Name = "tabpage4"
	$tabpage4.Size = '833, 285'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = "Registry Exclusion"
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# splitcontainer4
	#
	$splitcontainer4.Dock = 'Fill'
	$splitcontainer4.FixedPanel = 'Panel2'
	$splitcontainer4.IsSplitterFixed = $True
	$splitcontainer4.Location = '0, 0'
	$splitcontainer4.Name = "splitcontainer4"
	$splitcontainer4.Orientation = 'Horizontal'
	[void]$splitcontainer4.Panel1.Controls.Add($RegExclList)
	$splitcontainer4.Panel2.BackColor = 'CornflowerBlue'
	[void]$splitcontainer4.Panel2.Controls.Add($EditRegExclBut)
	[void]$splitcontainer4.Panel2.Controls.Add($RemoveRegExclBut)
	[void]$splitcontainer4.Panel2.Controls.Add($AddRegExclBut)
	$splitcontainer4.Size = '833, 285'
	$splitcontainer4.SplitterDistance = 248
	$splitcontainer4.TabIndex = 1
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($splitcontainer5)
	$tabpage2.Location = '4, 26'
	$tabpage2.Name = "tabpage2"
	$tabpage2.Size = '833, 285'
	$tabpage2.TabIndex = 4
	$tabpage2.Text = "PathSubstitution"
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# splitcontainer5
	#
	$splitcontainer5.Dock = 'Fill'
	$splitcontainer5.FixedPanel = 'Panel2'
	$splitcontainer5.IsSplitterFixed = $True
	$splitcontainer5.Location = '0, 0'
	$splitcontainer5.Name = "splitcontainer5"
	$splitcontainer5.Orientation = 'Horizontal'
	[void]$splitcontainer5.Panel1.Controls.Add($PathSubstList)
	$splitcontainer5.Panel2.BackColor = 'CornflowerBlue'
	[void]$splitcontainer5.Panel2.Controls.Add($EditPathSubBut)
	[void]$splitcontainer5.Panel2.Controls.Add($RemovePathSubBut)
	[void]$splitcontainer5.Panel2.Controls.Add($AddPathSubBut)
	$splitcontainer5.Size = '833, 285'
	$splitcontainer5.SplitterDistance = 248
	$splitcontainer5.TabIndex = 1
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($splitcontainer6)
	$tabpage1.Location = '4, 26'
	$tabpage1.Name = "tabpage1"
	$tabpage1.Size = '833, 285'
	$tabpage1.TabIndex = 5
	$tabpage1.Text = "Reg Substitution"
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# splitcontainer6
	#
	$splitcontainer6.Dock = 'Fill'
	$splitcontainer6.FixedPanel = 'Panel2'
	$splitcontainer6.IsSplitterFixed = $True
	$splitcontainer6.Location = '0, 0'
	$splitcontainer6.Name = "splitcontainer6"
	$splitcontainer6.Orientation = 'Horizontal'
	[void]$splitcontainer6.Panel1.Controls.Add($RegSubstList)
	$splitcontainer6.Panel2.BackColor = 'CornflowerBlue'
	[void]$splitcontainer6.Panel2.Controls.Add($EditRegSubBut)
	[void]$splitcontainer6.Panel2.Controls.Add($RemoveRegSubBut)
	[void]$splitcontainer6.Panel2.Controls.Add($AddRegSubBut)
	$splitcontainer6.Size = '833, 285'
	$splitcontainer6.SplitterDistance = 248
	$splitcontainer6.TabIndex = 1
	#
	# toolstripsplitbutton1
	#
	[void]$toolstripsplitbutton1.DropDownItems.Add($newProject)
	[void]$toolstripsplitbutton1.DropDownItems.Add($ToolStripMenuItemSavePrpject)
	[void]$toolstripsplitbutton1.DropDownItems.Add($ToolStripMenuItemOpenProject)
	[void]$toolstripsplitbutton1.DropDownItems.Add($exitToolStripMenuItem)
	#region Binary Data
	$toolstripsplitbutton1.Image = [System.Convert]::FromBase64String('
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
PwWIA/4YAAAAAElFTkSuQmCC')
	#endregion
	$toolstripsplitbutton1.ImageTransparentColor = 'Magenta'
	$toolstripsplitbutton1.Name = "toolstripsplitbutton1"
	$toolstripsplitbutton1.Size = '54, 51'
	$toolstripsplitbutton1.Text = "Menu"
	$toolstripsplitbutton1.TextImageRelation = 'ImageAboveText'
	#
	# newProject
	#
	#region Binary Data
	$newProject.Image = [System.Convert]::FromBase64String('
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
zlipvwEsQoMDz+mRYQAAAABJRU5ErkJggg==')
	#endregion
	$newProject.Name = "newProject"
	$newProject.Size = '168, 38'
	$newProject.Text = "New Project"
	$newProject.add_Click($newProject_Click)
	#
	# ToolStripMenuItemSavePrpject
	#
	$ToolStripMenuItemSavePrpject.Name = "ToolStripMenuItemSavePrpject"
	$ToolStripMenuItemSavePrpject.Size = '168, 38'
	$ToolStripMenuItemSavePrpject.Text = "Save Project"
	$ToolStripMenuItemSavePrpject.add_Click($ToolStripMenuItemSavePrpject_Click)
	#
	# ToolStripMenuItemOpenProject
	#
	$ToolStripMenuItemOpenProject.Name = "ToolStripMenuItemOpenProject"
	$ToolStripMenuItemOpenProject.Size = '168, 38'
	$ToolStripMenuItemOpenProject.Text = "Open Project"
	$ToolStripMenuItemOpenProject.add_Click($ToolStripMenuItemOpenProject_Click)
	#
	# PathText
	#
	$PathText.Name = "PathText"
	$PathText.Size = '300, 54'
	#
	# FileBut
	#
	#region Binary Data
	$FileBut.Image = [System.Convert]::FromBase64String('
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
XTkAAAAASUVORK5CYII=')
	#endregion
	$FileBut.ImageTransparentColor = 'Magenta'
	$FileBut.Name = "FileBut"
	$FileBut.RightToLeft = 'No'
	$FileBut.Size = '102, 51'
	$FileBut.Text = "Open CAS Profile"
	$FileBut.TextImageRelation = 'ImageAboveText'
	$FileBut.ToolTipText = "Open a Citrix profile"
	$FileBut.add_Click($FileBut_Click)
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = "exitToolStripMenuItem"
	$exitToolStripMenuItem.Size = '168, 38'
	$exitToolStripMenuItem.Text = "Exit"
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# StartBut
	#
	#region Binary Data
	$StartBut.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAUWSURBVFhH7Zd9TJVlGMafraK/2moz21r1X2vL
JV8C+QGKmpIioUFDicLKjylpsVqaNUNTKZEjuIUgpbIllAvIQEsUPHhQvr/8SOAomppggIAHjkCc
q/t634PSccYh1K2te/uN5zzvfV/X/TznPc/7ov6Pf4gHSw0+mdWJ41G9baJGVeIEjUqS4ID9GhnI
Z23p1nHNovWQLul8uFQavNF8MAp1qX4wbZ6Auq99cS3LH22Z/mglPzggc7zGHOZqNVJLDWpRU5ce
Olwq4j1xrSwB7ftmoj3nZXTkzoY57SUR9UX9zum4vj8QnbmBMq/DMed4jTnMZQ1rqUEtalJbt7hz
uFTEuaHLvA+Wg0Gw5M2D5VAIug6HwloQihtHXkNj+mwUbfHD8S2TUPWVvwbHnOM15jCXNazVNESL
mtSmh251e4i5K/paa9Fjmi9EoOdYJNrzFuBs+hxUJ89AccIU1KYG4GLWPPQUvYkbJh2OOcdrzGEu
a1hLDU1LNKlND3rplrfCpcrgCaAbrQdCtOLSxCk4EjsRJdum4nymrKZwIfrLl+LPsiXoK12M3hKh
2I6MOcdrzGEua1hLDWpRk9r0oBc9dWu524/Hee0rTfBFzqrnZQW+aMh4BRbTO8Dp94BTK4GTK4AT
7wK1g6ghUXYcrjGXNawVDWpRk9r0oBc96c0GHqk0eKDvQjZ6zmXhxrlsWM9mo9ucha4GkglL/b+D
tdSgFjWpTQ960ZPebGAUvxf0d+PqHk9c/W6CMFEn4y4xoEdt8aCX/V4YxQZGV8SNBaxX8MfeSWjJ
nI6WrBn3BtGmB73oSW97A66wddShLXsq2n6ahbacwHsDtcWDXvYdsDewxQ22ljI5OOTg2R+E9gPB
d4UOofPAXA2ONW3xoBc9/9ZAf7MRnb8EoTMvRAgdMdcF6+Ew9OeHa3BsobZ40MuhAXfYLuXIyfUq
LPmSmD9/xHTnLwCMkXhhg8L8RBf5HI7egnB0iYftUq404D64AQ/YLn6ProIwdBlfFyKcxmp8A9ZC
OREd6D0aCRxbAu+NCh9nSBMGF6BoEXqN4eK1VxrQfoYDDXii//xuWE0iVrRQeMspeo/JYVW8FChd
JiwX5FC6iRxGFdHw+Vzh5IXV+CBdISb1aT3/t29RqT+c9AbKpQGcTUJP8dvCImHxkPSVLAHKorD2
m6fgtk7BPUbBYxCeMucleMv41MUYGM+EIVqa+Cz1GWkgDbUGn8ENjJMG4uUsX4q+smVOYSuXVVZH
w1UMGluTUdMUiNqmYGHuIIJRc2UOfv19G5IKFAobIhC9V2FTugfMW/0GfQXxXoA5FraaFeivXukU
qHlfzvpV2spPN21A0lGF7UKyA5zbbpJxkY6pMRIf/aiwJm7UrQb4xoLzG4C61c5Tv0Z2bZ221WWX
lyOpWIyEZEdKdFLsf3dVPIxc8xhM+1LdbODxvPXuJjZRLjvhLFXxPmgwTIKP/MyMl+cipUphxx1I
qdDZUamws1Zuxp8VJn+ijPRmA3wijREmC9OGSYDvFwqHml7E7nqFNEfqZMVnFFJP6Ow6LTfhQQW/
DzXzsYL2NOQzmQN2wy0ZDs9O/lQVBch2zoy9nRmbFKauV9htFvMGWfmhm+YeAp+E2vvASGKo3QsI
kEb2XJaVH7nN/AFhxDHU7j03e7PCxuOyG2tVi3z2FO6auTMxOiheYVas6pDxeOEJ4b6ZMx4T3AUv
4Ulh2P8hjTT45vuonftu/l8Ipf4CqAcEFUaHFrsAAAAASUVORK5CYII=')
	#endregion
	$StartBut.ImageTransparentColor = 'Magenta'
	$StartBut.Name = "StartBut"
	$StartBut.Size = '36, 51'
	$StartBut.Text = "Start"
	$StartBut.TextImageRelation = 'ImageAboveText'
	$StartBut.ToolTipText = "Start transformation"
	$StartBut.add_Click($StartBut_Click)
	#
	# toolstripbuttonHelp
	#
	$toolstripbuttonHelp.Alignment = 'Right'
	$toolstripbuttonHelp.DisplayStyle = 'Image'
	#region Binary Data
	$toolstripbuttonHelp.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$toolstripbuttonHelp.ImageTransparentColor = 'Magenta'
	$toolstripbuttonHelp.Margin = '310, 1, 0, 2'
	$toolstripbuttonHelp.Name = "toolstripbuttonHelp"
	$toolstripbuttonHelp.RightToLeft = 'No'
	$toolstripbuttonHelp.Size = '36, 51'
	$toolstripbuttonHelp.Text = "Help"
	$toolstripbuttonHelp.add_Click($toolstripbuttonHelp_Click)
	#
	# FileExclList
	#
	$FileExclList.Dock = 'Fill'
	$FileExclList.GridLines = $True
	$FileExclList.Location = '0, 0'
	$FileExclList.Name = "FileExclList"
	$FileExclList.Size = '833, 248'
	$FileExclList.TabIndex = 4
	$FileExclList.UseCompatibleStateImageBehavior = $False
	$FileExclList.View = 'List'
	#
	# RegExclList
	#
	$RegExclList.Dock = 'Fill'
	$RegExclList.GridLines = $True
	$RegExclList.Location = '0, 0'
	$RegExclList.Name = "RegExclList"
	$RegExclList.Size = '833, 248'
	$RegExclList.TabIndex = 1
	$RegExclList.UseCompatibleStateImageBehavior = $False
	$RegExclList.View = 'List'
	#
	# PathSubstList
	#
	$PathSubstList.Dock = 'Fill'
	$PathSubstList.GridLines = $True
	$PathSubstList.Location = '0, 0'
	$PathSubstList.Name = "PathSubstList"
	$PathSubstList.Size = '833, 248'
	$PathSubstList.TabIndex = 1
	$PathSubstList.UseCompatibleStateImageBehavior = $False
	$PathSubstList.View = 'List'
	#
	# RegSubstList
	#
	$RegSubstList.Dock = 'Fill'
	$RegSubstList.GridLines = $True
	$RegSubstList.Location = '0, 0'
	$RegSubstList.Name = "RegSubstList"
	$RegSubstList.Size = '833, 248'
	$RegSubstList.TabIndex = 1
	$RegSubstList.UseCompatibleStateImageBehavior = $False
	$RegSubstList.View = 'List'
	#
	# EditFileExclBut
	#
	$EditFileExclBut.Location = '222, 4'
	$EditFileExclBut.Name = "EditFileExclBut"
	$EditFileExclBut.Size = '100, 25'
	$EditFileExclBut.TabIndex = 7
	$EditFileExclBut.Text = "Edit"
	$EditFileExclBut.UseVisualStyleBackColor = $True
	#
	# RemoveFileExclBut
	#
	$RemoveFileExclBut.Location = '115, 4'
	$RemoveFileExclBut.Name = "RemoveFileExclBut"
	$RemoveFileExclBut.Size = '100, 25'
	$RemoveFileExclBut.TabIndex = 6
	$RemoveFileExclBut.Text = "Remove"
	$RemoveFileExclBut.UseVisualStyleBackColor = $True
	#
	# AddFileExclBut
	#
	$AddFileExclBut.Location = '8, 4'
	$AddFileExclBut.Name = "AddFileExclBut"
	$AddFileExclBut.Size = '100, 25'
	$AddFileExclBut.TabIndex = 5
	$AddFileExclBut.Text = "Add"
	$AddFileExclBut.UseVisualStyleBackColor = $True
	#
	# EditRegExclBut
	#
	$EditRegExclBut.Location = '222, 4'
	$EditRegExclBut.Name = "EditRegExclBut"
	$EditRegExclBut.Size = '100, 25'
	$EditRegExclBut.TabIndex = 6
	$EditRegExclBut.Text = "Edit"
	$EditRegExclBut.UseVisualStyleBackColor = $True
	#
	# RemoveRegExclBut
	#
	$RemoveRegExclBut.Location = '115, 4'
	$RemoveRegExclBut.Name = "RemoveRegExclBut"
	$RemoveRegExclBut.Size = '100, 25'
	$RemoveRegExclBut.TabIndex = 5
	$RemoveRegExclBut.Text = "Remove"
	$RemoveRegExclBut.UseVisualStyleBackColor = $True
	#
	# AddRegExclBut
	#
	$AddRegExclBut.Location = '8, 4'
	$AddRegExclBut.Name = "AddRegExclBut"
	$AddRegExclBut.Size = '100, 25'
	$AddRegExclBut.TabIndex = 4
	$AddRegExclBut.Text = "Add"
	$AddRegExclBut.UseVisualStyleBackColor = $True
	#
	# EditPathSubBut
	#
	$EditPathSubBut.Location = '222, 4'
	$EditPathSubBut.Name = "EditPathSubBut"
	$EditPathSubBut.Size = '100, 25'
	$EditPathSubBut.TabIndex = 6
	$EditPathSubBut.Text = "Edit"
	$EditPathSubBut.UseVisualStyleBackColor = $True
	#
	# RemovePathSubBut
	#
	$RemovePathSubBut.Location = '115, 4'
	$RemovePathSubBut.Name = "RemovePathSubBut"
	$RemovePathSubBut.Size = '100, 25'
	$RemovePathSubBut.TabIndex = 5
	$RemovePathSubBut.Text = "Remove"
	$RemovePathSubBut.UseVisualStyleBackColor = $True
	#
	# AddPathSubBut
	#
	$AddPathSubBut.Location = '8, 4'
	$AddPathSubBut.Name = "AddPathSubBut"
	$AddPathSubBut.Size = '100, 25'
	$AddPathSubBut.TabIndex = 4
	$AddPathSubBut.Text = "Add"
	$AddPathSubBut.UseVisualStyleBackColor = $True
	#
	# EditRegSubBut
	#
	$EditRegSubBut.Location = '222, 4'
	$EditRegSubBut.Name = "EditRegSubBut"
	$EditRegSubBut.Size = '100, 25'
	$EditRegSubBut.TabIndex = 6
	$EditRegSubBut.Text = "Edit"
	$EditRegSubBut.UseVisualStyleBackColor = $True
	#
	# RemoveRegSubBut
	#
	$RemoveRegSubBut.Location = '115, 4'
	$RemoveRegSubBut.Name = "RemoveRegSubBut"
	$RemoveRegSubBut.Size = '100, 25'
	$RemoveRegSubBut.TabIndex = 5
	$RemoveRegSubBut.Text = "Remove"
	$RemoveRegSubBut.UseVisualStyleBackColor = $True
	#
	# AddRegSubBut
	#
	$AddRegSubBut.Location = '8, 4'
	$AddRegSubBut.Name = "AddRegSubBut"
	$AddRegSubBut.Size = '100, 25'
	$AddRegSubBut.TabIndex = 4
	$AddRegSubBut.Text = "Add"
	$AddRegSubBut.UseVisualStyleBackColor = $True
	#
	# ShortcutList
	#
	$ShortcutList.CheckBoxes = $True
	$ShortcutList.Dock = 'Fill'
	$ShortcutList.FullRowSelect = $True
	$ShortcutList.GridLines = $True
	$ShortcutList.ImeMode = 'AlphaFull'
	$ShortcutList.Location = '0, 0'
	$ShortcutList.MultiSelect = $False
	$ShortcutList.Name = "ShortcutList"
	$ShortcutList.Size = '827, 242'
	$ShortcutList.Sorting = 'Ascending'
	$ShortcutList.TabIndex = 1
	$ShortcutList.UseCompatibleStateImageBehavior = $False
	$ShortcutList.View = 'Details'
	#
	# buttonAddShortcut
	#
	$buttonAddShortcut.Enabled = $False
	$buttonAddShortcut.Location = '8, 4'
	$buttonAddShortcut.Name = "buttonAddShortcut"
	$buttonAddShortcut.Size = '100, 25'
	$buttonAddShortcut.TabIndex = 6
	$buttonAddShortcut.Text = "Add"
	$buttonAddShortcut.UseVisualStyleBackColor = $True
	#
	# buttonRemoveShortcut
	#
	$buttonRemoveShortcut.Enabled = $False
	$buttonRemoveShortcut.Location = '115, 4'
	$buttonRemoveShortcut.Name = "buttonRemoveShortcut"
	$buttonRemoveShortcut.Size = '100, 25'
	$buttonRemoveShortcut.TabIndex = 7
	$buttonRemoveShortcut.Text = "Remove"
	$buttonRemoveShortcut.UseVisualStyleBackColor = $True
	#
	# buttonEditShortcut
	#
	$buttonEditShortcut.Enabled = $False
	$buttonEditShortcut.Location = '222, 5'
	$buttonEditShortcut.Name = "buttonEditShortcut"
	$buttonEditShortcut.Size = '100, 25'
	$buttonEditShortcut.TabIndex = 8
	$buttonEditShortcut.Text = "Edit"
	$buttonEditShortcut.UseVisualStyleBackColor = $True
	#
	# selectFolderDialog
	#
	#
	# openfiledialogProfile
	#
	$openfiledialogProfile.FileName = "openfiledialog1"
	$openfiledialogProfile.InitialDirectory = "c:\"
	#
	# openProjectDialog
	#
	$openProjectDialog.FileName = "openProjectDialog"
	#
	# folderbrowserdialogRoot
	#
	#
	# ShortcutIconsImageList
	#
	$ShortcutIconsImageList.ColorDepth = 'Depth8Bit'
	$ShortcutIconsImageList.ImageSize = '32, 32'
	$ShortcutIconsImageList.TransparentColor = 'Transparent'
	#
	# buttonSelectIcon
	#
	$buttonSelectIcon.Location = '328, 5'
	$buttonSelectIcon.Name = "buttonSelectIcon"
	$buttonSelectIcon.Size = '100, 25'
	$buttonSelectIcon.TabIndex = 9
	$buttonSelectIcon.Text = "Select Icon"
	$buttonSelectIcon.UseVisualStyleBackColor = $True
	$buttonSelectIcon.add_Click($buttonSelectIcon_Click)
	#
	# OpenIconDialog
	#
	$OpenIconDialog.FileName = "OpenIconDialog"
	#
	# openTemplateDialog
	#
	$openTemplateDialog.DefaultExt = "txt"
	$openTemplateDialog.Filter = "Text File (.txt)|*.txt|All Files|*.*"
	$openTemplateDialog.ShowHelp = $True
	$splitcontainer6.ResumeLayout()
	$tabpage1.ResumeLayout()
	$splitcontainer5.ResumeLayout()
	$tabpage2.ResumeLayout()
	$splitcontainer4.ResumeLayout()
	$tabpage4.ResumeLayout()
	$splitcontainer3.ResumeLayout()
	$tabpage3.ResumeLayout()
	$splitcontainer2.ResumeLayout()
	$tabShortcuts.ResumeLayout()
	$groupbox1.ResumeLayout()
	$tabBaseData.ResumeLayout()
	$tabcontrol.ResumeLayout()
	$splitcontainer1.ResumeLayout()
	$MainDialog.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainDialog.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainDialog.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainDialog.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainDialog.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainDialog.ShowDialog()
}
#endregion Source: CtxStr2Msi_Form.psf

#region Source: EditBox.ps1
	#Generated Form Function
	
	
	function GenerateEditForm {
	Param (
	   [String[]] $Fields
	   )
	
	
	
	#$Global:EdittextBox = @()
	$Global:result = @()
	
	#$Global:result.Clear()
	
	#region Generated Form Objects
	$EditForm = New-Object System.Windows.Forms.Form
	$Editpanel1 = New-Object System.Windows.Forms.Panel
	$EditCancelBut = New-Object System.Windows.Forms.Button
	$EditOKBut = New-Object System.Windows.Forms.Button
	$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
	#endregion Generated Form Objects
	
	$OnLoadForm_StateCorrection=
	{#Correct the initial state of the form to prevent the .Net maximized form issue
		$EditForm.WindowState = $InitialFormWindowState
	}
	 
	#----------------------------------------------
	#region Generated Form Code
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 106
	$System_Drawing_Size.Width = 418
	$EditForm.ClientSize = $System_Drawing_Size
	$EditForm.ControlBox = $False
	$EditForm.DataBindings.DefaultDataSourceUpdateMode = 0
	$EditForm.Name = "EditForm"
	$EditForm.Text = "Edit"
	#$EditForm.set_startPosition( $MainDialog.get_StartPosition())
	#$EditForm.set_Location($MainDialog.get_Location())
	$EditForm.StartPosition = 'CenterParent'    
	
	$EdittextBox = @()
	
	for($i=0; $i -lt $Fields.count;$i++){
	  
	  $EdittextBox += New-Object System.Windows.Forms.TextBox
	  $EdittextBox[$i].DataBindings.DefaultDataSourceUpdateMode = 0
	  $EdittextBox[$i].Dock = 1
	  $System_Drawing_Point = New-Object System.Drawing.Point
	  $System_Drawing_Point.X = 0
	  $System_Drawing_Point.Y = 0#20
	  $EdittextBox[$i].Location = $System_Drawing_Point
	  $EdittextBox[$i].Name = "EdittextBox$i"
	  $System_Drawing_Size = New-Object System.Drawing.Size
	  $System_Drawing_Size.Height = 20
	  $System_Drawing_Size.Width = 418
	  $EdittextBox[$i].Size = $System_Drawing_Size
	  $EdittextBox[$i].TabIndex = $Fields.count-$i
	  $EdittextBox[$i].text = $Fields[$Fields.count-$i-1]
			
	  $EditForm.Controls.Add($EdittextBox[$i])
	}
	
	#$EdittextBox[$Fields.count-1].focus = $true
	
	
	$EditOKBut_OnClick= 
	{
	  $EditForm.Close()
	  for($i=$Fields.count-1;$i -ge 0;$i--){
	    $Global:result += $EdittextBox[$i].text
	  }
	 
	}
	
	$EditCancelBut_OnClick= 
	{
	
	 $EditForm.Close()
	 $Global:result = $Null
	  
	}
	
	
	
	$Editpanel1.DataBindings.DefaultDataSourceUpdateMode = 0
	$Editpanel1.Dock = 2
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 0
	$System_Drawing_Point.Y = 71
	$Editpanel1.Location = $System_Drawing_Point
	$Editpanel1.Name = "Editpanel1"
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 35
	$System_Drawing_Size.Width = 418
	$Editpanel1.Size = $System_Drawing_Size
	$Editpanel1.TabIndex = 0
	
	$EditForm.Controls.Add($Editpanel1)
	
	$EditCancelBut.DataBindings.DefaultDataSourceUpdateMode = 0
	$EditCancelBut.Dock = 4
	
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 275
	$System_Drawing_Point.Y = 0
	$EditCancelBut.Location = $System_Drawing_Point
	$EditCancelBut.Name = "EditCancelBut"
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 35
	$System_Drawing_Size.Width = 143
	$EditCancelBut.Size = $System_Drawing_Size
	$EditCancelBut.TabIndex = 1
	$EditCancelBut.Text = "Cancel"
	$EditCancelBut.UseVisualStyleBackColor = $True
	$EditCancelBut.add_Click($EditCancelBut_OnClick)
	
	$Editpanel1.Controls.Add($EditCancelBut)
	
	
	$EditOKBut.DataBindings.DefaultDataSourceUpdateMode = 0
	$EditOKBut.Dock = 3
	
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 0
	$System_Drawing_Point.Y = 0
	$EditOKBut.Location = $System_Drawing_Point
	$EditOKBut.Name = "EditOKBut"
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 35
	$System_Drawing_Size.Width = 132
	$EditOKBut.Size = $System_Drawing_Size
	$EditOKBut.TabIndex = 0
	$EditOKBut.Text = "OK"
	$EditOKBut.UseVisualStyleBackColor = $True
	$EditOKBut.add_Click($EditOKBut_OnClick)
	
	$Editpanel1.Controls.Add($EditOKBut)
	
	
	#endregion Generated Form Code
	
	
	#Save the initial state of the form
	$InitialFormWindowState = $EditForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$EditForm.add_Load($OnLoadForm_StateCorrection)
	#Show the Form
	$EditForm.ShowDialog()| Out-Null
	
	  return $result 
	
	} #End Function
	
	#Call the Function
	#GenerateEditForm(("Test","Test2", "Test3"))
	
	#endregion Source: EditBox.ps1

#region Source: Ctx2msi_Files.ps1
	#=====================================================================================================
	#
	# Citrix Streaming 2 Msi Converter
	# copyright 2013 Andreas Nick Nick Informationstechnik GmbH 
	# http://www.nick-it.de
	#
	# Version V0.8
	#
	# Legal
	# This  scritp is copyrighted material.  They may only be downloaded from the
	# links I provide.  You may download them to use, if you want to do
	# anything else with it, you have to ask me first.  Full terms and conditions are
	# available on the download page on the blog http://software-virtualisierung.des
	#
	#=====================================================================================================
	
	#Historie 
	# #11.05.2014 $keyXmlElement = CreateWixRegKey -tree $tree -element $Component -Hive "HKLM" -Key (CreateWixStringfromReglookup -str (decode-RegLockupKey -AppvString ($regKey[0])))  war nur der Key, ergänzt (decode-RegLockupKey -AppvString ($regKey[0]))
	# 11.05.2014 Only one Directory for App-V! $CtxStrInstallDir = ($tmp[0]) #+"\"+($tmp[1])
	
	
	#Libaries
	[System.Reflection.Assembly]::LoadWithPartialName("System.web")
	
	
	# Variables & constants 
	
	#Komisch, der baut hier einen"." mit ein!
	#$rootDir = Split-Path -Path $MyInvocation.MyCommand.Definition
	
	
	$Global:UseRandomGUIDS = $false
	$Global:LogPath =""
	$Global:LogFile =""
	
	$Global:FileTable = @{ }
	$Global:ShortPathTable = @{ }
	
	#=====================================================================================================
	
		   
	#Remove Folder Entrys!
	$RemoveDirList = @("\\Profile\\","\\LocalAppDataLow\\","\\AppData\\","\\DesktopFolder\\","\\Common%20AppData\\") #put "All" here
	# Fix for this: error LGHT0204 : ICE18: KeyPath for Component: 'COM_SystemFolder_ed3262c4' is Directory: 'SystemFolder'. The Directory/Component pair must be listed in the CreateFolders table.
	$CreateFolderKeys =@("SystemFolder")
	
	#Hier ein Reg EIntrag unter HKLM!
	$RemoveDirListHKLM = @("\\Common%20AppData\\") #,"\\AppData\\") #Generate Keys in for HKLM
	
	#RegKeys - Parameter!
	
	 $Applicationname  = ""
	
	# MSI Format ###########################################################################################
	$InstallerVersion = "300"
	$Compressed="yes"
	$Cabinet="Install.cab"
	$EmbedCab="yes"
	$Global:Platform="x86"
	$Global:CreateMsiDialogs="False"
	#######################################################################################################
	
	
	#=====================================================================================================
	# #Generate Guid from a String
	#=====================================================================================================
	
	function ToHashGuid([string] $src)
	{
	    $stringbytes = [system.Text.Encoding]::UTF8.GetBytes($src)
	    $hashedBytes = (New-Object System.Security.Cryptography.SHA1CryptoServiceProvider).ComputeHash($stringbytes) 
		[system.Array]::Resize([ref]$hashedBytes,16)
		$guid = [System.Guid]($hashedBytes)
		Return $guid.ToString()
		
		#Write-Host $hashedBytes
	}
	
	#=====================================================================================================
	# Create a valid GUID
	#=====================================================================================================
	function GetGuid_Wix([String] $src){
		$guid =""
		$random = $false
	  	if($Global:UseRandomGUIDS -eq $false){
		  	
			if($src -eq ""){
		    	$guid = [String]([System.Guid]::NewGuid()).ToString()			
				$random = $True
	
		  	} else {
	    		$guid = toHashGuid($src)
	
		  }
	  	} else {
	    	$guid = [String]([System.Guid]::NewGuid()).ToString()				
			$random = $true
	  	}
	    return $guid
	}
	
	
	
	function CreateWixXml([XML] $WiXXml, [STRING] $Productcode, [STRING] $UpgradeCode, [STRING] $Version, [STRING] $Name, [String] $Manufacturer, [String] $Language = "1033"){
	  
	  $decl = $WiXXml.CreateXmlDeclaration("1.0", "UTF-8", $null)
	  $rootNode = $WiXXml.CreateElement("Wix","http://schemas.microsoft.com/wix/2006/wi")
	  $WiXXml.InsertBefore($decl, $WiXXml.DocumentElement)
	  $root=$WiXXml.AppendChild($rootNode);
	  
	  $eNS = $WiXXml.DocumentElement.NamespaceURI
	  $e = $WiXXml.CreateElement("Product",$eNS)
	  $e.SetAttribute("Id",$Productcode)
	  $e.SetAttribute("UpgradeCode",$UpgradeCode)
	  
	  $e.SetAttribute("Version",$Version)
	  
	  #Codepage="windows-1252" #German Codepage
	  $e.SetAttribute("Codepage","windows-1252") #1033 english
	    
	  #$e.SetAttribute("Language","1031") #1033 english
	  $e.SetAttribute("Language",$Language) #1033 english
	  
	  
	  $e.SetAttribute("Name",$Name)
	  $e.SetAttribute("Manufacturer",$Manufacturer)
	  $root= $root.AppendChild($e)
	  
	  #<Package InstallerVersion="300" Compressed="yes"/>
	  $e = $WiXXml.CreateElement("Package",$eNS)
	  $e.SetAttribute("InstallerVersion",$InstallerVersion)
	  $e.SetAttribute("Platform", $Platform)	
	  $e.SetAttribute("InstallScope", "perMachine")	
	  $e.SetAttribute("Compressed",$Compressed)
	  $root.AppendChild($e)
	  
	  #<Media Id="1" Cabinet="putty.cab" EmbedCab="yes" />
	  $e = $WiXXml.CreateElement("Media",$eNS)
	  $e.SetAttribute("Id","1")
	  $e.SetAttribute("Cabinet",$Cabinet)
	  $e.SetAttribute("EmbedCab",$EmbedCab)
	  $root.AppendChild($e)
	  
	  #CreateTargetDir
	  $e = $WiXXml.CreateElement("Directory",$eNS)
	  $e.SetAttribute("Id","TARGETDIR")
	  $e.SetAttribute("Name","SourceDir")
	  $root.AppendChild($e)
	  
	  #	
	  #	
	  #Dialog Entries
	  #
	  #	
	  if($Global:CreateMsiDialogs -eq "True"){
	     
	  #Licence File
	  #<WixVariable Id="WixUILicenseRtf" Value="bobpl.rtf" />
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUILicenseRtf")
	  $e.SetAttribute("Value","$rootDir\GenLicence.rtf")
	  $root.AppendChild($e)
	
	  #Custom Dialogs
	  #<WixVariable Id="WixUIBannerBmp" Value="path\banner.bmp" />
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUIBannerBmp")
	  $e.SetAttribute("Value","$rootDir\Dialogs\WixUIBannerBmp.bmp")
	  $root.AppendChild($e)
	  
	  #<WixVariable Id="WixUIDialogBmp" Value="path\dialog.bmp" />
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUIDialogBmp")
	  $e.SetAttribute("Value","$rootDir\Dialogs\WixUIDialogBmp.bmp")
	  $root.AppendChild($e)
	
	  #<WixVariable Id="WixUIExclamationIco" Value="path\exclamation.ico" />
	  #<WixVariable Id="WixUIInfoIco" Value="path\information.ico" />
	  #<WixVariable Id="WixUINewIco" Value="path\new.ico" />
	  #<WixVariable Id="WixUIUpIco" Value="path\up.ico" />
	  #WixUIExclamationIco 32 by 32 pixels, exclamation mark icon. 
	  #WixUIInfoIco 32 by 32 pixels, information sign icon. 
	  #WixUINewIco 16 by 16 pixels, new folder icon. 
	  #WixUIUpIco 16 by 16 pixels, parent folder icon. 
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUIExclamationIco")
	  $e.SetAttribute("Value","$rootDir\Dialogs\f32x32.ico")
	  $root.AppendChild($e)
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUIInfoIco")
	  $e.SetAttribute("Value","$rootDir\Dialogs\f32x32.ico")
	  $root.AppendChild($e)
	
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUINewIco")
	  $e.SetAttribute("Value","$rootDir\Dialogs\f16x16.ico")
	  $root.AppendChild($e)
	
	  $e = $WiXXml.CreateElement("WixVariable",$eNS)
	  $e.SetAttribute("Id","WixUIUpIco")
	  $e.SetAttribute("Value","$rootDir\Dialogs\f16x16.ico")
	  $root.AppendChild($e)
	
	  #Ad/remove software Icon
	  #<Icon Id="icon.ico" SourceFile="MySourceFiles\icon.ico"/>
	  #<Property Id="ARPPRODUCTICON" Value="icon.ico" />
	  $e = $WiXXml.CreateElement("Icon",$eNS)
	  $e.SetAttribute("Id","icon.ico")
	  $e.SetAttribute("SourceFile","$rootDir\Dialogs\f32x32.ico")
	  $root.AppendChild($e) 
	  $e = $WiXXml.CreateElement("Property",$eNS)
	  $e.SetAttribute("Id","ARPPRODUCTICON")
	  $e.SetAttribute("Value","icon.ico")
	  $root.AppendChild($e) 
	     
	  #UI Elements 
	  $e = $WiXXml.CreateElement("UI",$eNS)
	  $sub = $root.AppendChild($e) 
	  $e = $msixml.CreateElement("UIRef",$eNS)
	  $e.SetAttribute("Id","WixUI_Mondo")
	  $sub.AppendChild($e) 
	
	  #<MajorUpgrade
	  #Schedule="afterInstallInitialize"
	  #DowngradeErrorMessage="A later version of [ProductName] is already installed. Setup will now exit.">
	
	  $e = $WiXXml.CreateElement("MajorUpgrade",$eNS)
	  $e.SetAttribute("Schedule","afterInstallInitialize")
	  $e.SetAttribute("DowngradeErrorMessage","A later version of [ProductName] is already installed. Setup will now exit.")
	  $root.AppendChild($e)
	  
	  #PerMachine Installation
	  #<Property Id="ALLUSERS" Value="1" /> 
	  #$e = $WiXXml.CreateElement("Property",$eNS)
	  #$e.SetAttribute("Id","ALLUSERS")
	  #$e.SetAttribute("Value","1")
	  #$root.AppendChild($e)
		
	  }
		
	  
	  Return $root
	}
	
	
	function ID_Replace( [String] $ID){
	 
	 $Wert="LEER"
	 $ID = $ID -replace "%20","_"
	 $ID = $ID -replace "%7B",""
	 $ID = $ID -replace "%7D",""
	 $ID = $ID -replace "%2","_"
	 $ID=$ID -replace "[^a-zA-Z_0-9]",""	
	 return $ID
	}
	
	function decodeName([String] $Name){
	
	 #Don't deeded for Citrix Streaming!   
	 #$Name = [System.Web.HttpUtility]::UrlDecode("$Name")
	    
	 Return $Name
	}
	
	function CreateWixComment([xml] $tree, [System.Xml.XmlElement] $element,[String] $Text){
	   $e = $tree.CreateComment($Text)
	   $tree.InsertBefore($element,$e)
	}
	
	function CreateWixMainDirectory([xml] $tree, [System.Xml.XmlElement] $element, [String] $Folder){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("Directory",$eNS)
	  if($Folder.Length -gt 60){
	      $Folder = $Folder.Substring(0,60)
	  }
	  $e.SetAttribute("Id",$Folder)
	  $newElement=$element.AppendChild($e)
	  return $newElement
	}
	
	
	#Generate no Guid
	function CreateWixVFSDirectory([xml] $tree, [System.Xml.XmlElement] $element, [String] $Folder, [String] $Name){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("Directory",$eNS)
	  $e.SetAttribute("Id",$Folder)
	  $e.SetAttribute("Name",$Name)
	  $newElement=$element.AppendChild($e)
	  return $newElement
	}
	
	
	#Generate a Guid!
	function CreateWixDirectory([xml] $tree, [System.Xml.XmlElement] $element, [String] $Folder, [String] $Name, [String] $Path){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("Directory",$eNS)
	  $elem = (GetGuid_Wix -src "$Path$Folder").split("-")
	  $e.SetAttribute("Name",(decodeName $Name))
	    
	  if($Folder.Length -gt 30){
	      $Folder = $Folder.Substring(0,30)
	  }
	  $e.SetAttribute("Id","DIR_" + (ID_Replace $Folder) + "_" + $elem[0])
	
	  $newElement=$element.AppendChild($e)
	  return $newElement
	}
	
	function CreateWixDirectoryOhneGuid([xml] $tree, [System.Xml.XmlElement] $element, [String] $Folder, [String] $Name, [String] $Path){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("Directory",$eNS)
	  $e.SetAttribute("Name",(decodeName $Folder))
	
	  if($Folder.Length -gt 30){
	      $Folder = $Folder.Substring(0,30)
	  } 
	  $e.SetAttribute("Id", (ID_Replace $Folder))
	  $newElement=$element.AppendChild($e)
	  return $newElement
	}
	
	
	function CreateWixComponent([xml] $tree, [System.Xml.XmlElement] $element, [String] $Component, [String] $Path){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("Component",$eNS)
	  $elem = (GetGuid_Wix -src "$path$Component").split("-")
	
	    if($Component.Length -gt 30){
	        $Component = $Component.Substring(0,30)
		}
	
	  $e.SetAttribute("Id", "COM_"+ (ID_Replace $Component)+ "_" +$elem[0])
	  $e.SetAttribute("Guid", (GetGuid_Wix -src "$path$Component"))
	  if($Platform -eq "x64"){
	    $e.SetAttribute("Win64","yes") 		
	  } else {
	    $e.SetAttribute("Win64","no")
	  }
	  $newElement=$element.AppendChild($e) 
	  return  $newElement
	}
	
	
	#######################################################################################################
	#
	# function : Create a xml registry key witch value
	#
	#######################################################################################################
	function CreateWixRegKeyValue([xml] $tree, [System.Xml.XmlElement] $element, [String] $Hive, [String] $Key, [String] $Value, [String] $Type){
	  
	  $e = $tree.CreateElement("RegistryKey",$eNS)
	  $e.SetAttribute("Root",$Hive)
	  $e.SetAttribute("Key",$Key)
	  $sub=$element.AppendChild($e) 
	  $e = $tree.CreateElement("RegistryValue",$eNS)
	  $e.SetAttribute("Value",$Value)
	  $e.SetAttribute("Type",$Type)
	  $sub.AppendChild($e) 
	}
	
	#######################################################################################################
	#
	# function : Create a xml registry key with a KeyPath Entry
	#
	#######################################################################################################
	function CreateWixRegKeyKeyPath([xml] $tree, [System.Xml.XmlElement] $element, [String] $Hive, [String] $Key, [String] $Value, [String] $Type){
	  
	  $e = $tree.CreateElement("RegistryKey",$eNS)
	  $e.SetAttribute("Root",$Hive)
	  $e.SetAttribute("Key",$Key)
	  $sub=$element.AppendChild($e) 
	  $e = $tree.CreateElement("RegistryValue",$eNS)
	  $e.SetAttribute("Value",$Value)
	  $e.SetAttribute("Type",$Type)
	  $e.SetAttribute("KeyPath","yes")
	  $sub.AppendChild($e) 
	  return $sub
	}
	
	function CreateWixRegKeyKeyPathName([xml] $tree, [System.Xml.XmlElement] $element, [String] $Hive, [String] $Key, [String] $Name, [String] $Value, [String] $Type){
	  
	  $e = $tree.CreateElement("RegistryKey",$eNS)
	  $e.SetAttribute("Root",$Hive)
	  $e.SetAttribute("Key",$Key)
	  $sub=$element.AppendChild($e) 
	  $e = $tree.CreateElement("RegistryValue",$eNS)
	  $e.SetAttribute("Value",$Value)
	  $e.SetAttribute("Name",$Name)	
	  $e.SetAttribute("Type",$Type)
	  $e.SetAttribute("KeyPath","yes")
	  $sub.AppendChild($e) 
	  return $sub
	}
	
	
	#######################################################################################################
	#
	# function : Create empty registry key
	#
	#######################################################################################################
	function CreateWixRegKey([xml] $tree, [System.Xml.XmlElement] $element, [String] $Hive, [String] $Key){
	 try{
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("RegistryKey",$eNS)
	  $e.SetAttribute("Root",$Hive)
	  $e.SetAttribute("Key",$Key)
	  # do we need this?	
	  #if($Hive -eq "HKCU"){
	  #  $e.SetAttribute("Action","createAndRemoveOnUninstall")
	  #}
	  $sub = $element.AppendChild($e)
	  Return $sub
	  } catch{
		  LogInfo -Path $LogFile -Wert "ERROR" -Ausg "Cant create registry key $Hive $Key"	
		  Return $null 	
	  }
	}
	
	#######################################################################################################
	#
	# function : Create a xml registry key
	#
	#######################################################################################################
	function CreateWixRegValue([xml] $tree, [System.Xml.XmlElement] $element, [String] $name, [String] $Value, [String] $Type){
	 try{
	
	    if(($name -eq "") -and ($Value -eq "")){
	  		return $null
	    }
			
	    if($name -ne "*"){
	      $eNS = $tree.DocumentElement.NamespaceURI
	      $e = $tree.CreateElement("RegistryValue",$eNS)
	      if($name -ne ""){ #default Key, name is empty!
	        $e.SetAttribute("Name",$name)
	      }
	      $e.SetAttribute("Value",$Value)
	
	      $e.SetAttribute("Type",$Type)
	      $sub=$element.AppendChild($e)
	      Return $sub
	    }	
	  } catch{
		  LogInfo -Path $LogFile -Wert "ERROR" -Ausg "Cant create registry value $name $Value"	
		  Return $null 	
	  }		
	}
	
	function CreateWixRegValueKeyPath([xml] $tree, [System.Xml.XmlElement] $element, [String] $name, [String] $Value, [String] $Type){
	
	  if(($name -eq "") -and ($Value -eq "")){
			return $null
	  }
			
	  if($name -ne "*"){
	    $eNS = $tree.DocumentElement.NamespaceURI
	    $e = $tree.CreateElement("RegistryValue",$eNS)
	    if($name -ne ""){ #default Key, name is empty!
	      $e.SetAttribute("Name",$name)
	    }
	    $e.SetAttribute("Value",$Value)
	    $e.SetAttribute("Type",$Type)
	    $e.SetAttribute("KeyPath","yes")
			
	    $sub=$element.AppendChild($e)
	    Return $sub
	  }	
	}
	
	
	#######################################################################################################
	#
	# function : Create a xml "Multi" registry key
	#
	#######################################################################################################
	function CreateWixRegMultiValue([xml] $tree, [System.Xml.XmlElement] $element, [String] $name, [String[]] $Values){
	  
	  if(($name -eq "") -and ($Values -eq "")){
			return $null
	  }
		
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("RegistryValue",$eNS)
	  if($name -ne ""){ #default Key, name is empty!
	    $e.SetAttribute("Name",$name)
	  }
	  $e.SetAttribute("Action","append")	
	  $e.SetAttribute("Type","multiString")
	  $sub=$element.AppendChild($e)
		
	  for($i=0;$i -lt $Values.count;$i++){	
		$e = $tree.CreateElement("MultiStringValue",$eNS)
		$e.SetAttribute("Name",$name)
	    $e.SetAttribute("Action","append")	 
		$e.SetAttribute("Type","multiString")
		$e.InnerText = $Values[$i]	
		$sub.AppendChild($e)	
	  }
	  Return $sub
	}
	
	
	
	#######################################################################################################
	#
	# function : Create a "RemoveFolder" entry for Uninstall
	#
	#######################################################################################################
	function CreateWixRemoveFolder([xml] $tree, [System.Xml.XmlElement] $element, [String] $ID, [String] $MainPath, [String] $ComponentName){  
	  $eNS = $tree.DocumentElement.NamespaceURI
	  #-----------------------> Need a Regestry Key ----------------->
	  $regPath="Software\nick-it\$Applicationname\Uninstall\"+(GetGuid_Wix -src $ComponentName).toString()
	   
	  if ($RemoveDirListHKLM | Where {$MainPath -Match $_}){
	    CreateWixRegKeyKeyPath -tree $tree -element $element -Hive "HKLM" -Key  $regPath -Value "1" -Type "string"
	  } else {
	    CreateWixRegKeyKeyPath -tree $tree -element $element -Hive "HKCU" -Key $regPath -Value "1" -Type "string"
	  }
	  
	  #Add KeyPath=toComponent
	  
	  #$element.SetAttribute("KeyPath","yes")
	  
	  $e = $tree.CreateElement("RemoveFolder",$eNS)
	  $e.SetAttribute("Id", $ID)
	  $e.SetAttribute("On","uninstall")
	  $newElement=$element.AppendChild($e) 
	  return  $newElement
	}
	
	#######################################################################################################
	#
	# function : Create a wix file entry
	#
	#######################################################################################################
	
	function CreateWixFile([xml] $tree, [System.Xml.XmlElement] $element, [String] $File,[String] $Source, [String] $BasePath){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("File",$eNS)
	  $elem = (GetGuid_Wix -src "$Source").split("-")
	  
	  #Cut name. Error when to long
	  $KName = ID_Replace $File
	  if($KName.length -ge 11){
	    $KName = $KName.SubString(0,10)
		$KName = $KName -replace "\+",""
	  }
	  $e.SetAttribute("Id","File_" + $KName +"_"+$elem[0] )
	  $Name =  (decodeName $File )
	  #if($Name -match "notepad"){
	  #      Write-Host "Gefunden"
	#	}
	  $e.SetAttribute("Name", $Name)
	  $e.SetAttribute("Source",$Source)
	  $element.AppendChild($e) 
	    
	  #Store in FileTable
	    Try {
	        #We save only needed Components!
	        #if ($Name -match "\w*(.DLL|.EXE|.OCX)") {
	            #GetShortpath
	            $fso = New-Object -ComObject Scripting.FileSystemObject
	            $f = $fso.GetFile($Source)
	            $ShortPath = $f.ShortPath
	            $ShortPath = $ShortPath -replace "~1", "" -replace "~2", "" -replace "~3", ""
	            $Global:ShortPathTable.Add($ShortPath, "File_" + $KName + "_" + $elem[0])
	            #Write-Host "Added $ShortPath"
	        
	            $Global:FileTable.Add($Name, "File_" + $KName +"_"+$elem[0])
	        #}
	    }
	    catch {
	        #
	        #!!!!!!!!!!!! Doppelter Eintrag  Vielleicht einen Teil des Pfades mit speichern?
	        #
	        if ($Name -match "\w*(.DLL|.EXE|.OCX)") {
	            LogInfo -Path $LogFile -Wert "WARNING" -Ausg "File $name with source $Source exist twice - we set only one entry for the registry shortpath file assosiation!"
	        }
	    }
	    
	    Return $element
	}
	
	#######################################################################################################
	#
	# function : Create a xml fontfile entry
	#
	#######################################################################################################
	
	function CreateWixFontFile([xml] $tree, [System.Xml.XmlElement] $element, [String] $File,[String] $Source){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("File",$eNS)
	  $elem = (GetGuid_Wix -src "$Source").split("-")
	  $e.SetAttribute("Id","File_" + (ID_Replace $File) + "_" + $elem[0] )
	  $e.SetAttribute("Name", (decodeName $File ))
	  #$e.SetAttribute("KeyPath","yes")
	  $e.SetAttribute("Source",$Source)
	  $e.SetAttribute("TrueType","yes")
	  $element.AppendChild($e) 
	  Return $element
	}
	
	#######################################################################################################
	#
	# function : Create a wiy Directory entry
	#
	#######################################################################################################
	function CreateWixDir([xml] $tree, [System.Xml.XmlElement] $element, [string[]]$exclude ,  $path, [String] $BasePath){
	 foreach ($File in Get-ChildItem $path){
	   if ($exclude | Where {$File.FullName -match $_}) { continue }		
	   if (!(Test-Path $File.FullName -PathType Container)){ 
	    CreateWixFile $tree $element $File.name "$path\$File" -BasePath $BasePath| Out-Null
	   }
	 }
	}
	
	
	
	
	#######################################################################################################
	#
	# function : Create a start menu shortcut
	#
	#######################################################################################################
	function create-WixStartMenuShortcut{
	    param(
	       [xml] $tree,
	       [System.Xml.XmlElement] $element,
	       [System.Xml.XmlElement] $Component,
	       [String] $appname,
	       [String] $Description, 
	       [String] $Target, 
	       [String] $WorkingDir
	    
	    )
	    
		$eNS = $tree.DocumentElement.NamespaceURI
		$e = $tree.CreateElement("Shortcut",$eNS)
	    $id= (ID_Replace -ID "ApplicationStartMenuShortcut_$appname")
	    if($id.length -gt 70){$id=$id.Substring(0,70)}
	    $e.SetAttribute("Id",$id )
	    $e.SetAttribute("Name",$appname)
	    if($Description -ne ""){
	        $e.SetAttribute("Description",$Description)
		}
		$e.SetAttribute("Target",$Target)
	    if($WorkingDir -ne ""){
		    $e.SetAttribute("WorkingDirectory",$WorkingDir)
		}
	    $Component.AppendChild($e)
	}
	
	
	#######################################################################################################
	#
	# function : Test for directorys without files
	#
	#######################################################################################################
	function NoFilesTest($path){
	  $Merker=0
	  foreach ($File in Get-ChildItem $path){
	    if (!(Test-Path $File.FullName -PathType Container)){ 
		 #File gefunden
		 Return 1
		 }
	  }
	  Return $Merker
	}
	
	#######################################################################################################
	#
	# function : Test for Sub directoys
	#
	#######################################################################################################
	function HasSubDirectorys($path){
	  $Merker=0
	  foreach ($File in Get-ChildItem $path){
	    if ((Test-Path $File.FullName -PathType Container)){ 
		 #File gefunden
		 Return 1
		 }
	  }
	  Return $Merker
	}
	
	#
	#Replace a string in a value from a substitutiontable 
	#
	
	function Substitute-VarPath{
	param (
	[String] $Value,
	[hashtable] $Substitution
	    )
	    foreach($key in $Substitution.Keys){
	        $match = $key -replace "\$","\\"
	        if($Value -match $match){
	            $Value=$Value -replace $match,("["+$Substitution[$key]+"]")
	            break
			}
		}
	return $Value
	}
	
	
	
	#######################################################################################################
	#
	# function : Substitute some Key Values
	#
	#######################################################################################################
	
	function CreateWixStringfromReglookup([String] $str)
	{
	   [String] $result = ""
	                        
	   #User
	   $str = $str -replace "/REGISTRY/USER/CurrentUser_Classes/_wow6432Node/","SOFTWARE/Classes/"
	   $str = $str -replace "/REGISTRY/USER/CurrentUser_Classes/_ow6432node/","SOFTWARE/Classes/"		
	   $str = $str -replace "/REGISTRY/USER/CurrentUser_Classes/","SOFTWARE/Classes/"		
	   
	   $str = $str -replace "/REGISTRY/USER/CurrentUser/",""
	   $str = $str -replace "/REGISTRY/USER/.DEFAULT/","REGISTRY/USER/"
	   $str = $str -replace "SOFTWARE/Classes/_wow6432Node/","SOFTWARE/Classes/"
	   #Machine   	
	                        #/REGISTRY/MACHINE/SOFTWARE/_ow6432Node/
	   $str = $str -replace	"/REGISTRY/MACHINE/SOFTWARE/_ow6432Node/Classes/","SOFTWARE/Classes/"
	   $str = $str -replace "/REGISTRY/MACHINE/SOFTWARE/_ow6432Node/","SOFTWARE/"    
	
	   $str = $str -replace "/REGISTRY/MACHINE/",""
		
	   $result = $str -replace "/","\"
	   return $result
	   
	  #r/Win32Assemblies/[{AppVPackageRoot}{|}]|OFFICE11|ADDINS|MSOSEC.DLL,KEY,  #######	{AppVPackageRoot}
		
	}
	
	
	
	#######################################################################################################
	#
	# function : getFileIDFromPath
	#
	#######################################################################################################
	
	
	function get-FileIDFromPath {
	    param (
	    [String] $Path
	        
	    )
	    
	    $Matcher = $Path -replace "~1", "" -replace "~2", "" -replace "~3", "" -replace "#1", "" -replace "#2", "" -replace "#3", "" -replace ":", ""
	    $Matcher = get-Matcher -str $Matcher
	    [String[]] $ResArray = @()
	    $ResArray = $Global:ShortPathTable.Keys | ? { $_ -match $Matcher }
	    
	    if ($ResArray.Count -ge 1) {
	        if ($ResArray.Count -gt 1) {
	            LogInfo -Path $Global:LogFile -Wert "ERROR" -Ausg "More than one entry for FilePath in the registry found $Path"
	        }
	        
	        Return $Global:ShortPathTable[$ResArray[0]]
	    }
	    else {
	        
	        LogInfo -Path $Global:LogFile -Wert "ERROR" -Ausg "FilePath in registry not found $Path"
	        return $null
	    }
	}
	
	
	#######################################################################################################
	#
	# function : Substitute Values
	#
	#######################################################################################################
	
	function get-RegStbstitution($Value,  $RegSubstitution, $line, $MatchShortpath = $false, $MultiString = $false){
	
		
		$match = $false
		$item=""
	
	    #`$ is the Escape Sequence for powershell $$ ist the escape sequence für Wix! double doof!!!
	    # "[\[]" (without quotes) for the open square bracket. 
	    # "[\]]" (without quotes) for the ending square bracket. 
	    $Value = $Value  -replace "\$\(",'$$$$(' #mybe, this can produce a wrong key!
	
	    
	    if($Value -match "(\[)|(\])"){
	        $N=""
	        for($i=0;$i -lt $Value.length;$i++){
	
	              if($Value[$i] -eq "[" ){
	                 $N+='[\[]'
				  } else {
	              if($Value[$i] -eq "]" ){
	                 $N+='[\]]'  
				  } else {
	                 $N+=$Value[$i]   
				  }}
	         }
	        $Value = $N
		}
	                    
	    
	    $result =$Value
	    
	    $break=$false
	  	foreach($item in $RegSubstitution.Keys){	
			if($result -match ($item)){ #get-Matcher -str
	            $result = $result -replace $item,$RegSubstitution.get_item($item)
			    $result = $result -replace "\\\\","\"
	            LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg ("Replace registry value $Value with " + $RegSubstitution.get_item($item) + " in Line $line")
	            
	            #Das können ja nicht nur Multistrings sein!
	            if (!$MultiString) {
	                return $result
	            }
	            else {
	                LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg ("match :" + $item + "->" + $RegSubstitution.get_item($item))
	                $break = $true
	            }
	        }
	    }
	    
	    if ($break) {
	        return $result
	    }
	    
	    #Find and Substitute Shortpath Element
	    if ($MatchShortpath) {
	        #New Matcher, only a shortPath with an EXE, DLL an OCX
	        #"C:\PROGRA~2\MICROS#1\OFFICE11\OUTLRPC.DLL"
		    if(($Value -match "\\\w+~\d{1}\\") -and ($Value -match "([a-zA-Z]:){1}(\\.+\\)(\w+\.\w{3})")){ #"([a-zA-Z]:){1}(\\\w+|\\\w+~\d{1}|\\\w+#\d{1})+\\(\w*\.\w{3})")) { #"\w{1}:\\\w*~\d{1}.*\\\w*\.\w{3}"){
	            #Get Filename and Path
	            $expression = $matches[0]
	            #[String[]] $PathEntrys = $expression.Split("\")
	            
	            $FileID = get-FileIDFromPath -Path $expression
	
	            #$FileName = ($PathEntrys[$PathEntrys.count - 1])
	            
	            #$FileID=$Global:FileTable[$FileName]
	            
	            $expression = get-Matcher -str $expression
	            LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg "Replace registry shortpath $Value with FileID [!$FileID] in Line $line"
	            
	            $result = $Value -replace $expression, "[!$FileID]"
	            Write-Host "------->Value " $Value "Expression -------->" $expression "Result -------->" $result
	          }
		}
		return $result
	}
	
	
	#=====================================================================================================
	# Decode a Reglookup APPV String
	#=====================================================================================================
	
	function decode_RegLookup_Appv{
	param( [String] $AppvString,
	         $RegSubstitution, 
		    $line,
	        $MatchShortpath = $false,
	        $Multistring = $false
		)
	    
	    $OutString =""
	    $count = $AppvString.Length
	    for ($index = 0; $index -lt $count; $index++) {
	      switch ($AppvString.Chars($index)) {
	        '%' {
			    $conv= $AppvString.get_Chars($index+1)+$AppvString.get_Chars($index+2)
				if($conv -ne "00"){
	              $OutString += [CHAR]([CONVERT]::toint16($conv,16))
	            }
	            $index+=2
	           
	            break
	        }
	        default {
	            $OutString += $AppvString.get_Chars($index)
	            break
	        }
	      } 
	
		}
		
		$OutString = get-RegStbstitution -Value $OutString -RegSubstitution $RegSubstitution -line $line -MatchShortpath $MatchShortpath -MultiString $Multistring
		return $OutString
	}
	
	
	#OnlyDecode
	function decode-RegLockupKey {
	    param (
	    [String] $AppvString
	    )
	
	$OutString = ""
	    $count = $AppvString.Length
	    for ($index = 0; $index -lt $count; $index++) {
	        switch ($AppvString.Chars($index)) {
	            '%' {
	                $conv = $AppvString.get_Chars($index + 1) + $AppvString.get_Chars($index + 2)
	                if ($conv -ne "00") {
	                    $OutString += [CHAR]([CONVERT]::toint16($conv, 16))
	                }
	                $index += 2
	                
	                break
	            }
	            default {
	                $OutString += $AppvString.get_Chars($index)
	                break
	            }
	        }
	        
	    }
	    
	    return $OutString
	}
	
	
	#######################################################################################################
	#
	# function : Create wix registry from appv regestry.dat file
	
	#######################################################################################################
	#region RegKeys
	function Create-CtxStr2msiRegKeys
	{
	    param (
	        [xml] $tree,
	        [System.Xml.XmlElement] $element,
	        [String] $regFile,
	        [String[]] $exclude,
	        [System.Xml.XmlElement] $feature,
	         $RegSubstitution
	    )
	    
	    
		 [System.Xml.XmlElement] $keyXmlElement
	
		 #Keys, we don't need!
		 $exclude_Keys = @("//RuleFile","PATH","/","/REGISTRY","/REGISTRY/MACHINE","/REGISTRY/MACHINE/SOFTWARE","/REGISTRY/MACHINE/SYSTEM","/REGISTRY/USER",
	                       "/REGISTRY/USER/S-1-5-19","/REGISTRY/USER/CurrentUser","/REGISTRY/USER/CurrentUser_Classes","/REGISTRY/MACHINE/software/_ow6432node")
		  
		  
		 # CreateReglook File
		 # supress warnings ....
		 if( test-path  "$GLOBAL:LogPath\regout.txt") {Remove-Item -Path "$GLOBAL:LogPath\regout.txt" -Force}
		
		 LogInfo -Path $LogFile -Wert "INFO" -Ausg "Using reglookup! http://projects.sentinelchicken.org/reglookup/"
		 LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg "Create regdump with reglookup.exe. Please wait..."
	
		$job=Start-Job -ScriptBlock {param($rootDir, $regFile, $LogPath)
		 & "$rootDir\tool\reglookup\reglookup.exe" "$regFile"  | Add-content ("$LogPath"+"Regout.txt")
		 } -ArgumentList $rootDir,$regFile,$LogPath | Wait-Job
	
		 #No output of warnings
		 #Can't get a String!
		 #Receive-Job -Job $job
		  
		 #ReadReglook File and analyse it
		 [array] $regFile = Get-Content ("$LogPath"+"Regout.txt")
	    
		 
		#Progressbar
		 if($progressbaroverlay1){
		   $progressbaroverlay1.Maximum = $regFile.count
	       $progressbaroverlay1.Style = "Block"
	       $progressbaroverlay1.Value = 0
		   $progressbaroverlay1.Step = 1
		   $progressbaroverlay1.TextOverlay = "Processing Registry..."
		 }
		                      
	     $Component = CreateWixComponent -tree $tree -element $tree.Wix.Product.Directory -Component "RegKeys" -Path ""
		 
		
		$LineNo=0
		foreach($line in $regFile) { 
	        
	    if($progressbaroverlay1){
		   $progressbaroverlay1.PerformStep() 	
		   [System.Windows.Forms.Application]::DoEvents() 
		}
			
		 $regKey = $line.split(",")
		 
		 #Exlude Hives
		 #Nun die ganze Line!
		 if ( $exclude | Where {$line -match $_}) { continue }	
		 #Exclude Keys
		 if ( $exclude_Keys | Where {($regKey[0]) -match ("^"+$_+"$")}) { continue }
	
		 #decodeKey
		 $keyElem = $regKey[0].split("/") 
		 
			
		switch ($($regKey[1])) {
			{$_ -match ("^KEY$")} {
		       if ($regKey[0] -match ("^/REGISTRY/MACHINE/")){
		         $keyXmlElement = CreateWixRegKey -tree $tree -element $Component -Hive "HKLM" -Key (CreateWixStringfromReglookup -str (decode-RegLockupKey -AppvString ($regKey[0]))) #11.05.2014 war nur der Key, ergänzt (decode-RegLockupKey -AppvString ($regKey[0]))
		       } else { if ($regKey[0] -match ("^/REGISTRY/USER/")){
		         $keyXmlElement = CreateWixRegKey -tree $tree -element $Component -Hive "HKCU" -Key (CreateWixStringfromReglookup -str (decode-RegLockupKey -AppvString ($regKey[0]))) #11.05.2014 war nur der Key, ergänzt (decode-RegLockupKey -AppvString ($regKey[0]))
			   } else { #Unknown		
			     LogInfo -Path $LogFile -Wert "ERROR" -Ausg "Unprocessed reg hive $regKey[0]  $regKey[1]"			
			     }			
		       }  			
			break		
			}
			{$_ -match ("^SZ$")} {
		       #!!! Name empty = reg standard entry 
		       $val = decode_RegLookup_Appv -AppvString $($regKey[2]) -RegSubstitution $RegSubstitution -line $LineNo -MatchShortpath $true	
		       $name = decode_RegLookup_Appv -AppvString $($keyElem[$keyElem.count-1]) -RegSubstitution $RegSubstitution -line $LineNo	
	                
		      CreateWixRegValue -tree $tree -element $keyXmlElement -name $name -Value $val  -Type "string" | Out-Null
			break		
			}
	            
	            { $_ -match ("^MULTI_SZ") } {
	                #Write-Host "----------->" $($regKey[2])
	                $val = $($regKey[2])
	                if ($val  -match "C:\\Program Files \(x86\)\\Common Files") {
	                    Write-Host "Match"
	                }
	                
	                
	                $multi = decode_RegLookup_Appv -AppvString $($regKey[2]) -RegSubstitution $RegSubstitution -line $LineNo -Multistring $true
	                $name = decode_RegLookup_Appv -AppvString $($keyElem[$keyElem.count - 1]) -RegSubstitution $RegSubstitution -line $LineNo
	
	                
	           [String []] $val = $multi.split("|")
	                CreateWixRegMultiValue -tree $tree -element $keyXmlElement -name $name -Values $val  | Out-Null	
			break
			}
				
			{$_ -match ("^EXPAND_SZ")} { 
		       $val = decode_RegLookup_Appv -AppvString $($regKey[2]) -RegSubstitution $RegSubstitution -line $LineNo	
		       $name = decode_RegLookup_Appv -AppvString $($keyElem[$keyElem.count-1]) -RegSubstitution $RegSubstitution -line $LineNo
	
	                
	                CreateWixRegValue -tree $tree -element $keyXmlElement -name $name -Value $val  -Type "expandable" | Out-Null			
			break
			}
	
			{$_ -match ("^BINARY")} {
					
				$val = decode_RegLookup_Binary($($regKey[2]))	
		        $name = decode_RegLookup_Appv -AppvString $($keyElem[$keyElem.count-1]) -RegSubstitution $RegSubstitution -line $LineNo	
	            
	
	            CreateWixRegValue -tree $tree -element $keyXmlElement -name $name -Value $val  -Type "binary" | Out-Null				
			break
			}
			{$_ -match ("^DWORD")} {
				$val = [convert]::ToInt32($($regKey[2]),16)
		        $name = decode_RegLookup_Appv -AppvString $($keyElem[$keyElem.count-1]) -RegSubstitution $RegSubstitution -line $LineNo	
	            
		        CreateWixRegValue -tree $tree -element $keyXmlElement -name $name -Value $val  -Type "integer" | Out-Null					
			break
			}
			default {
				LogInfo -Path $LogFile -Wert "IMPORTANT INFO:" -Ausg "Key $regKey[0] with name ""$($keyElem[$keyElem.count-1])"" and Value ""$($regKey[2])"" in not in the msi"
			}
		  }	
			
		$LineNo++	
	   }
	   AddWiXFeature  -tree $tree -element $feature -Id $Component.Id
	}
	
	
	#endregion
	
	#Create Active Setup Registry entries
	function create-WixActionSetup( [xml] $tree, [System.Xml.XmlElement] $element,  [System.Xml.XmlElement] $feature){
	
		#if($Projectfile.CtxStr2msi.AppActiveSetup -eq "True"){
	        LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg "Create ActiveSetup keys..."	
			$Component = CreateWixComponent -tree $msixml -element $element -Component "AvtiveSetup" -Path ""
			$keyXmlElement = CreateWixRegKey -tree $tree -element $Component -Hive "HKLM"  -Key "SOFTWARE\Microsoft\Active Setup\Installed Components\[PackageCode]"
			CreateWixRegValueKeyPath -tree $tree -element $keyXmlElement -name "StubPath" -Type "string" -Value "msiexec /fup [ProductCode] /qb-!"  
			CreateWixRegValue -tree $tree -element $keyXmlElement -Name "[ProductName] [ProductVerion] Configuration" -Type "string" -Value "[ProductName]" 
		    CreateWixRegValue -tree $tree -element $keyXmlElement -Name "Version" -Type "string" -Value "[ProductVerion]" 
			 AddWiXFeature  -tree $tree -element $feature -Id $Component.Id
		#}
	}
	
	function CreateWiXFeature ([xml] $tree, [System.Xml.XmlElement] $element, [STRING] $Title){
	  
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("Feature",$eNS)
	  $e.SetAttribute("Id","MainApplication")
	  $e.SetAttribute("Title", $Title)
	  $e.SetAttribute("Level", "1")
	  $element = $element.AppendChild($e)
	  Return $element
	}
	
	function AddWiXFeature ([xml] $tree, [System.Xml.XmlElement] $element, [STRING] $Id){
	  $eNS = $tree.DocumentElement.NamespaceURI
	  $e = $tree.CreateElement("ComponentRef",$eNS)
	  $e.SetAttribute("Id", $Id)
	  $element = $element.AppendChild($e)
	  Return $element
	}
	
	
	function Create-WixXmlFromSpecialDir{
		Param(
		[xml] $tree, 
		[System.Xml.XmlElement] $element, 
		$path = $pwd, 
		[string[]]$exclude ,
	     $specialFolder,
	        [System.Xml.XmlElement] $feature,
	    [String] $BasePath
		)
		
		#################################
		# Root Dir has files? 
		# Das wird aktuell im Hauptprogramm nicht ber�cksichtigt!
		#################################
	    if(NoFilesTest "$path"){
		  $Co = CreateWixComponent -tree $tree -element $element -Component "MainAppRoot" -Path "$path"	
		  AddWiXFeature  -tree $tree -element $feature -Id $Co.id
		  
		  foreach ($File in Get-ChildItem "$path"){
		    if ($exclude | Where {$File.FullName -match $_}) { continue }
				
	        if (!(Test-Path $File.FullName -PathType Container)){
	                CreateWixFile -tree $tree -element $Co -File $File.name "$path\$File" -BasePath $BasePath | Out-Null
	        }
	      }
		} 
		
		Create-WixSpecialFileFolderStructure -tree $tree -element $element -path $path -exclude $exclude -specialFolder $specialFolder -feature $feature -BasePath $BasePath
	}	
	
	
	function Create-WixSpecialFileFolderStructure([xml] $tree, [System.Xml.XmlElement] $element, $path = $pwd, [string[]]$exclude,  $specialFolder, [System.Xml.XmlElement] $feature, [String] $BasePath)
	{ 
	    foreach ($item in Get-ChildItem $path)
	    {
			
	        if ($exclude | Where {$item.FullName -match $_}) { continue }
	
	        if (Test-Path $item.FullName -PathType Container) 
	        {
				
				#Special Folders
				$break = $false
	
				foreach($key in $specialFolder.Keys) {
				 if ($item.FullName -match $key) { 
				   $Element1 = $null
				   $Element1 = $tree.SelectSingleNode("/*/*/*/*[@Id="""+($specialFolder[$key])+"""]")	  	
				   #Create, if special entry not exist!		
				   if(!$Element1){
				      $Element1 = CreateWixVfsDirectory -tree $msixml -element $msixml.Wix.product.Directory -Folder $specialFolder[$key] -Name $specialFolder[$key]   
				   }
		           Create-WixXmlFromSpecialDir -tree $msixml -element $Element1 -path $item.FullName  -exclude $exclude -specialFolder $specialFolder -feature $Feature -BasePath $BasePath
				   $break=$true	
				   continue	
				 }
				}
			     
			    if($break){continue}
			    
				$newElement = CreateWixDirectory -tree $tree -element $element -Folder $item.PSChildName -Name $item.PSChildName -Path $item.FullName
				
				#Create Componet
				if(NoFilesTest $item.FullName){
				  $Component = CreateWixComponent -tree $tree -element $newElement -Component $item.PSChildName -Path $item.FullName
				  AddWiXFeature  -tree $tree -element $feature -Id $Component.Id
					   
				  if($RemoveDirList | where {$item.FullName -match $_}){
					 CreateWixRemoveFolder -tree $tree -element $Component -ID $newElement.Id -MainPath $path -ComponentName $item.FullName
				  }
				   #Create Files
				   #	
	                CreateWixDir -tree $tree -element $Component -exclude $exclude -path $item.FullName [String] $BasePath
				} 
				else{
			      #Empty Directory
			      #Is Directory in USERPROFILE?
	
			      if($RemoveDirList | where {$item.FullName -match $_}){
	
				    #Create Component for Directory
					$Component = CreateWixComponent -tree $tree -element $newElement -Component $item.PSChildName -Path $item.FullName
				    AddWiXFeature  -tree $tree -element $feature -Id $Component.Id
					CreateWixRemoveFolder -tree $tree -element $Component -ID $newElement.Id -MainPath $path -ComponentName $item.FullName
				  }
			    }
				
	            Create-WixSpecialFileFolderStructure -tree $tree -element $newElement  -path $item.FullName -exclude $exclude -feature $feature -BasePath $BasePath
				$newElement = $newElement.get_ParentNode()
				
	        } 
	    } 
	} 
	
	
	
	
	
	#=====================================================================================================
	#
	# Create the Msi for Citrix Streaming
	#
	#=====================================================================================================
	
	function Generate-CtxStrMSIXml{
	param( [xml] $Projectfile 
	     )
	
	    if($progressbaroverlay1){
	       $progressbaroverlay1.Style = "Block"
	       $progressbaroverlay1.Value = 0
		}
	
		$ProjectPath = $Projectfile.CtxStr2msi.ProjectRoot 
		$Global:LogPath = "$ProjectPath\Logs\"
		$Global:LogFile = "$ProjectPath\Logs\CtxStr2XML.log"
	    
	    $Global:FileTable = @{} #Store every file for Comparsion
	    $Global:ShortPathTable = @{ } #Store every file for Comparsion
		
	    if(Test-Path -Path "$ProjectPath\Logs"){
	        Remove-Item -Path "$ProjectPath\Logs" -Force -Recurse | Out-Null
	    }
		
		New-Item -ItemType directory -Path "$ProjectPath\Logs" -Force | Out-Null	
		$CtxStrsourceFiles = $Projectfile.CtxStr2msi.CtxStrDevicePath
		
		$Ctxstr2msiFile = $Projectfile.CtxStr2msi.CtxStrSourcefile
		
		$CtxStrPackagename = $Projectfile.CtxStr2msi.CtxStrPackagename
		$CtxStrProductcode = $Projectfile.CtxStr2msi.CtxStrProductcode 
		$CtxStrUpgradecode = $Projectfile.CtxStr2msi.CtxStrUpgradecode 
		$CtxStrVersion = $Projectfile.CtxStr2msi.CtxStrVersion 
		$CtxStrManufacturer = $Projectfile.CtxStr2msi.CtxStrManufacturer
		$CtxStrDisplayName = $Projectfile.CtxStr2msi.CtxStrDisplayName
		$CtxStrInstallDir = $Projectfile.CtxStr2msi.CtxStrInstallDir
	    $Applicationname = "$CtxStrDisplayName"
		$CtxStrInstallRootDir = $Projectfile.CtxStr2msi.CtxStrInstallRootDir #Application main Directory
		$CtxStrPath = $Projectfile.CtxStr2msi.CtxStrPath
		$CtxStrLanguage = $Projectfile.CtxStr2msi.CtxStrLanguage
	    
	    #Set Language - only German and English
	    $Language = if(($Projectfile.CtxStr2msi.CtxStrLanguage) -eq "de,1031") {"1031"} else {"1033"}
		
		#Plattform
		if ($Global:Projectxml.CtxStr2msi.CtxStrApp64Bit -eq "True"){
			$Global:Platform = "x64"
		}
	
		#Dialogs
	    if ($Global:Projectxml.CtxStr2msi.CtxStrAppMsiDialogs -eq "True") {
	        $Global:CreateMsiDialogs = "True"
	    }
	    else {
	        $Global:CreateMsiDialogs = "False"
	    }
	    
	    $Global:CreateMsiDialog
		
		if(($Projectfile.CtxStr2msi.CtxStrHashGuid) -eq "True"){
		  $Global:UseRandomGUIDS = $True
		}
		
		#Delete old log
		if(test-path $Global:LogFile) { Remove-Item -Path $LogFile -Force}
		
	    
	    #-------------------------------------------------------------
	    # Read exclusion and supstitution tables
	    # 
	    #-------------------------------------------------------------
	    
		
		$DirExclusion = @()
	    $DirSubstitution = [ORDERED] @{}
	    
	    
		$RegExclusion = @()
	    $RegSubstitution = [ORDERED] @{}
	    
	    
		
	    #Create Directorys exclusion Table
		$temp = Get-XmlTableMatrix -tree $Projectfile  -Key "CtxStr_EXCLUDE_DIR" #Directorys to exclude
		foreach($item in $temp){
		  if(($item[0]) -eq "True"){
		   $DirExclusion += ($item[1])
		  }
		}
		
		LogInfo -Path $LogFile -Wert "INFO" -Ausg "Exclude Directorys : $DirExclusion"
	    
		#Create Substitution Table
		$temp = Get-XmlTableMatrix -tree $Projectfile  -Key "CtxStr_PATH_SUBST" #Directorys to exclude
		foreach($item in $temp){
		  if($item[0] -eq "True"){
		   $DirSubstitution.add($item[1],$item[2])
		   LogInfo -Path $LogFile -Wert "INFO" -Ausg ("Add directorys substitution: "+$item[1] +"->" +$item[2])
		  }
		}	
		
	    # Create Registry exclusion Table
		
		$temp = Get-XmlTableMatrix -tree $Projectfile  -Key "CtxStr_EXCLUDE_REG_HIVES" #keys to exclude
		foreach($item in $temp){
		  if(($item[0]) -eq "True"){
		   $RegExclusion += ($item[1])
		   LogInfo -Path $LogFile -Wert "INFO" -Ausg ("Reg Exclustion: "+$item[1])
		  }
		}	
		#Cretae Registry Substitution
		$temp = Get-XmlTableMatrix -tree $Projectfile  -Key "CtxStr_REG_SUBST" #Directorys to exclude
		foreach($item in $temp){
		  if($item[0] -eq "True"){
		   	# Special for the Installdir!
		   	# ProgramFilesFolder - gets the well-known folder for CSIDL_PROGRAM_FILESX86. 
	       	# ProgramFiles64Folder - gets the well-known folder for CSIDL_PROGRAM_FILES. 
	       	# ProgramFiles6432Folder 	
			
	            
	        #2013-11-18 - Glaube, den Teil kann man vergessen!    
		   	if(	$item[2] -eq "[INSTALLDIRSUBROOT]"){ 
				#delete last Slath
				$temproot =	$CtxStrInstallDir
				#Write-Host "---------- InstallRoot :$CtxStrInstallDir"""
				if($CtxStrInstallDir[$CtxStrInstallDir.Lenght-1] -eq "\"){
				  $temproot = $CtxStrInstallDir.Substring(0,$CtxStrInstallDir.length-1)	
				}
				
				if($Global:Platform	-eq "x86"){
				  $item[2] = "[ProgramFilesFolder]$temproot"
				} else {
				  $item[2] = "[ProgramFiles64Folder]$temproot"	
				}
			}
		   		
		   $RegSubstitution.add($item[1],$item[2])
		   LogInfo -Path $LogFile -Wert "INFO" -Ausg ("Add registry substitution: "+$item[1] +"->" +$item[2])
		  }
		}
		
		    LogInfo -Path $LogFile -Wert "INFO" -Ausg "Create wix xml"
	
	    #-------------------------------------------------------------
	    # #Create WiX-xml 
	    # 
	    #-------------------------------------------------------------
	
	 	
		$msixml = New-Object xml 
		CreateWixXml -WiXXml  $msixml -Productcode $CtxStrProductcode -UpgradeCode $CtxStrUpgradecode -Version $CtxStrVersion -Name $CtxStrDisplayName -Manufacturer $CtxStrManufacturer -Language $Language
	
	    #Special for 64Bit!
		if($Global:Platform	-eq "x86"){
		  	CreateWixMainDirectory -tree $msixml -element $msixml.Wix.product.Directory -Folder "ProgramFilesFolder"
		} else {
		    CreateWixMainDirectory -tree $msixml -element $msixml.Wix.product.Directory -Folder "ProgramFiles64Folder"
		}
		
		#Create folder name
		[String[]] $CtxStrRootPath = $CtxStrInstallDir.split("\")
		$CtxStrRootPath = $CtxStrRootPath | where {$_ -ne ""}
		if(($CtxStrRootPath.count) -eq 0){
			$CtxStrRootPath.add("my-nick-it-application")
		}
		
		CreateWixMainDirectory -tree $msixml -element $msixml.Wix.product.Directory.Directory -Folder "APPLICATIONROOTDIRECTORY"
	    Write-Host "PATH ROOT:" $CtxStrRootPath[0]
	    #break
	    
	    $msixml.Wix.product.Directory.Directory.Directory.SetAttribute("Name", $CtxStrRootPath[0])
		$Feature = CreateWiXFeature -tree $msixml -element $msixml.Wix.product "Main Application"
	    
		#
		#Create Application Folders
		#
		$element = $msixml.Wix.product.Directory.Directory.Directory
	    $applicationrootelement = $element
	
		for($v=1; $v -lt $CtxStrRootPath.count ;$v++){
	      $element = CreateWixDirectory -tree $msixml -element $element -Folder ($CtxStrRootPath[$v]) -Name ($CtxStrRootPath[$v]) -Path ($CtxStrRootPath[$v]) 
		}
		
		
	    LogInfo -Path $LogFile -Wert "INFO" -Ausg "Process streaming Device directory"
	    Create-WixXmlFromSpecialDir -tree $msixml -element $element -path "$CtxStrInstallRootDir" -exclude $DirExclusion -feature $Feature -specialFolder @{ } -BasePath $CtxStrsourceFiles
		
		#Exclude Main Directory for Special Folders
		$MainExclude = $CtxStrInstallRootDir -replace (get-matcher -str $CtxStrsourceFiles ),""
		$MainExclude = "\\"+(get-Matcher -str $MainExclude )
		$DirExclusion += $MainExclude
	    
	    Create-WixXmlFromSpecialDir -tree $msixml -element $msixml.Wix.product.Directory -path ("$CtxStrsourceFiles" + "Device\C") -exclude $DirExclusion -specialFolder $DirSubstitution -feature $Feature -BasePath $CtxStrsourceFiles
	
	    
		#Special for Fonts
	    LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg "Process the fonts..."	
	    
	    $Element1 = $msixml.SelectSingleNode("/*/*/*/*[@Id=""FontsFolder""]")	  	
		  #Create, if special entry not exist!		
		    if($Element1){
			  foreach($Filenode in $Element1.Component.File){
			    $Filenode.SetAttribute("TrueType","yes")
			  }
			
		}
	
	    #-------------------------------------------------------------
	    # Create Registry Keys       
		#
		# ToDo: Need to be seperatet HKLM and HKCU!
		#-------------------------------------------------------------
	    # Main registry substitutin
	    
	    $CtxStrInstallRootDir -match "^.*\\Device\\"
	    $expression = get-Matcher -str $matches[0] 
	    $RootSubst = $CtxStrInstallRootDir -replace $expression,""
	    $RootSubst = $RootSubst -replace "c\\", "c:\" -replace "\\", "\\" -replace "\(", "\(" -replace "\)", "\)"
	    #2014 - 04 - 26#09-55-50 : INFO  Process the fonts...
	    #Value: [ProgramFilesFolder]\CorelDRAW Graphics Suite X5\
	    #RootSubt: c:\\program files \(x86\)\\corel
	    #Must be "[ProgramFilesFolder]\CorelDRAW Graphics Suite X5"
	    $tempstr = $CtxStrInstallDir -replace "^\\","" -replace "\\$",""
	    
	    $val = "[ProgramFilesFolder]$tempstr\"
	    $val = $val -replace "\\\\","\"
	    
	    
	    #This entry has to be the first entry!
	    
	    $tempregSubst = [ORDERED] @{ }
	    
	    $tempregSubst.Add(($RootSubst + "\\"), $val)
	    
	    foreach($key in $RegSubstitution.keys){
	        $tempregSubst.Add($key, ($RegSubstitution[$key]))
	    }
	    
	    $RegSubstitution = $null
	    $RegSubstitution = $tempregSubst
	    
	    #foreach ($item in $RegSubstitution.Keys) {
	    #    Write-Host "Item: " $item "Key" $RegSubstitution.Values[$item]
	    #}
	    
	    
	    #Write-Host "Value :" $val
	    #Write-Host "RootSubt :" $RootSubst
	    #break
	    
	    
	    LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg "Processing registry Please wait..."	
	    Create-CtxStr2msiRegKeys -tree $msixml  -element $msixml.Wix.product.Directory -RegFile ("$CtxStrsourceFiles"+"InstallRoot.dat") -exclude $RegExclusion -featur  $Feature -RegSubstitution $RegSubstitution
		
	
	    #-------------------------------------------------------------
	    # Create Shortcuts
	    # First install the Icon Files
	    #-------------------------------------------------------------
	    
	    $Iconlement = CreateWixDirectory -tree $msixml -element $element -Folder "Icons" -Name "Icons" -Path "Icons"
	    $iconpath = $Projectfile.CtxStr2msi.ProjectRoot+"\icons"
	    #Write-Host "-------->"$iconpath
	    Create-WixXmlFromSpecialDir -tree $msixml -element $Iconlement -path $iconpath -exclude $DirExclusion -specialFolder $DirSubstitution -feature $Feature -BasePath $CtxStrsourceFiles
	    #
	    # detect foldername for the Application Shortcuts
	    #
	    $elem = $CtxStrInstallDir.split("\")
	    $elem=$elem | where {$_ -ne ""}
	    if($elem -ne $null){
	        If( $elem.GetType().Name -eq "String"){$StartFoldername = $elem} 
	        else {
	            if($elem.count -gt 1){
	                $StartFoldername =  ($elem[$elem.count-1])
	            } else {
	                $StartFoldername = ($elem[0])
		        }
	        }
	    } else {
	        $StartFoldername = "NIT-Applicationfolder"
	    }
	
	    #Write-Host "--> InstallDir" $CtxStrInstallDir "Elem[1]" $elem[1]
	    
	    
	    $newElement = CreateWixDirectoryOhneGuid -tree $msixml -element $applicationrootelement -Folder "ProgramMenuFolder" -Name "ProgramMenuFolder" -Path "Startmenue"
		#$newElement2 = CreateWixDirectory -tree $msixml -element $newElement -Folder $StartFoldername -Name $StartFoldername -Path $StartFoldername
	    #The "New" is for generating a "new" ID!
	    $newElement2 = CreateWixDirectory -tree $msixml -element $newElement -Folder  ("new"+$StartFoldername) -Name  $StartFoldername -Path $StartFoldername
		$Component = CreateWixComponent -tree  $msixml -element $newElement2 -Component "ApplicationShortcut" -Path "ApplicationShortcut"
	
	    $temp = Get-XmlTableMatrix -tree $Projectfile  -Key "CtxStr_Shortcuts" 
		foreach($item in $temp){
		  if(($item[0]) -eq "True"){
		   LogInfo -Path $LogFile -Wert "INFO" -Ausg ("Create Start Menu Shortcut for: "+$item[1])
	       
	       #Match and substitute Working Directory     
	       $WorkingDirectory = $item[4]
	       if($item[4] -ne ""){ 
	         #Todo : eigentlich hier das korrekte Verzeichnis identifizieren!       
	         #       Dazu deine ID Generieren oder gleich einen Wert in die Verknüpfungtabelle eintragen      
	         $file =  $FileTable[(Split-Path ($item[3]) -Leaf)]    
	         $xPath = "//*[@Id='"+$file+"']" 
	         #Write-Host "----------------------->" $xPath       
	         $node = $msixml.SelectSingleNode($xPath) 
	         $WorkingDirectory = $node.ParentNode.ParentNode.Id
		   }
	            
	       create-WixStartMenuShortcut -tree $msixml -element $newElement2 -Component $Component -appname $item[1] -Description $item[1] -Target ("[#"+$FileTable[(Split-Path ($item[3]) -Leaf)]+"]") -WorkingDir $WorkingDirectory
		  }
		}	
	    CreateWixRemoveFolder -tree $msixml -element $Component -ID $Component.id -ComponentName "ApplicationShortcut_$appname" -MainPath "ApplicationShortcut_$appname"
	
	
	    AddWiXFeature -tree $msixml -id $Component.id -element $feature 
	
	    
	
	    
		
	    #-------------------------------------------------------------
		#
		# Create Active Setup Entries
		#
	    #-------------------------------------------------------------
	    if($Projectfile.CtxStr2msi.AppActiveSetup -eq "True"){
	        create-WixActionSetup -tree $msixml  -element $msixml.Wix.product.Directory -featur  $Feature
		}
	
	    
	    
	 	$msixml.Save("$LogPath\$CtxStrPackagename.xml")
		LogInfo -Path $Global:LogFile -Wert "INFO" -Ausg "Wix ist creating the msi. Please wait..."	
	        
	        
	    #Progressbar
		 if($progressbaroverlay1){
		   $progressbaroverlay1.Style = "Marquee"
		   $progressbaroverlay1.TextOverlay = "Creating the msi..."
		 }
	
	    #-------------------------------------------------------------
		#
		# Generate the msi from the wix.xml	
		#
	    #-------------------------------------------------------------
	
		[String] $candle = "$rootDir\wixbin\candle.exe"
	    [Array] $arguments = "-out", """$LogPath$CtxStrPackagename.wixobj""" , """$LogPath$CtxStrPackagename.xml""" 
		if(test-path "$LogPath$CtxStrPackagename.candle.log"){remove-item "$LogPath$CtxStrPackagename.candle.log" -force}
		& $candle $arguments | Out-File "$LogPath$CtxStrPackagename.candle.log"
	        
	    #Create the msi
	    LogInfo -Path $LogFile -Wert "INFO" -Ausg "build MSI"
		if(Test-Path "$ProjectPath\$CtxStrPackagename.msi") {Remove-Item -Path "$ProjectPath\$CtxStrPackagename.msi" } 
	    if(test-path "$LogPath$CtxStrPackagename.msi.log"){remove-item "$CtxStrPackagename.msi.log" -force}
	
	    $ScriptblockLight = {    
	        param(
	          [String] $rootDir,
	          [String] $LogPath,
	          [String] $CtxStrPackagename,
	          [String] $ProjectPath
	        )
	        [String] $light = "$rootDir\wixbin\light.exe"
	        [Array] $arguments = """$LogPath$CtxStrPackagename.wixobj""","-sice:ICE91","-sice:ICE03","-sice:ICE60","-ext","WixUIExtension","-ext","WixUtilExtension","-out", """$ProjectPath\$CtxStrPackagename.msi""" 
		    & $light $arguments | Out-File "$LogPath$CtxStrPackagename.msi.log"
		}
	
	    $job = Start-Job -scriptblock $ScriptblockLight -ArgumentList "$rootDir", "$LogPath","$CtxStrPackagename","$ProjectPath" 
	    
	    while($job.state -ne "Completed"){
	        [System.Windows.Forms.Application]::DoEvents()
	        Start-Sleep -Milliseconds 50  
		}
	    
	    Stop-Job $job
	    Receive-Job $job
		
	    [System.Reflection.Assembly]::LoadWithPartialName("System.web")
		$htmlPath=  [System.Web.HttpUtility]::UrlPathEncode($ProjectPath)
		LogInfo -Path $LogFile -Wert "INFO" -Ausg "Finished msi creation. You can find the msi in the project folder or show the logs if nothing is created"
	    LogInfo -Path $LogFile -Wert "INFO" -Ausg "You can find the Result in the folder file:////$htmlPath"
	    
	    
	    
	    if($progressbaroverlay1){
		   $progressbaroverlay1.Style = "Block"
		   $progressbaroverlay1.TextOverlay = "Finished MSI Creation"
		}
	    
	    #-------------------------------------------------------------
		#
		# Build App-V
		#
	    #-------------------------------------------------------------
	    
	    if($Projectfile.CtxStr2msi.CtxStrCreateAppV -eq "True"){
	        
	        LogInfo -Path $LogFile -Wert "INFO" -Ausg "Creating App-V 5 files"
	      	
	        if($progressbaroverlay1){
		        $progressbaroverlay1.Style = "Marquee"
		        $progressbaroverlay1.TextOverlay = "Creating App-V File"
			}
	        
	        #Create App-V Directory
	        if(Test-Path "$ProjectPath\$CtxStrPackagename-appv"){ Remove-Item -Path "$ProjectPath\$CtxStrPackagename-appv" -Force -Recurse}
	        Start-Sleep -Seconds 1
	        New-Item "$ProjectPath\$CtxStrPackagename-appv" -Type directory -Force
	        $scriptBlock = {
	            param (
	                [string] $Name,
	                [String] $OutputPath,
	                [String] $Installer,
	                [String] $PrimaryVirtualApplicationDirectory,
	                [Boolean] $FullLoad = $false,
	                [Boolean] $Template = $false,
	                [String] $TemplatePath = ""
	            )
	            
	            Import-Module AppVSequencer
	            if ($FullLoad -and $Template) {
	                New-AppvSequencerPackage -Name "$Name" -OutputPath "$OutputPath" -Installer "$Installer" -PrimaryVirtualApplicationDirectory "$PrimaryVirtualApplicationDirectory" -FullLoad -TemplateFilePath "$TemplatePath"
	            }
	            else {
	                if ($FullLoad -and (!$Template)) {
	                    New-AppvSequencerPackage -Name "$Name" -OutputPath "$OutputPath" -Installer "$Installer" -PrimaryVirtualApplicationDirectory "$PrimaryVirtualApplicationDirectory" -FullLoad
	                }
	                else {
	                    if ((!$FullLoad) -and $Template) {
	                        New-AppvSequencerPackage -Name "$Name" -OutputPath "$OutputPath" -Installer "$Installer" -PrimaryVirtualApplicationDirectory "$PrimaryVirtualApplicationDirectory" -TemplateFilePath "$TemplatePath"
	                    }
	                    else {
	                        New-AppvSequencerPackage -Name "$Name" -OutputPath "$OutputPath" -Installer "$Installer" -PrimaryVirtualApplicationDirectory "$PrimaryVirtualApplicationDirectory"
	                    }
	                }
	                
	            }
	            #
	            #Deinstall from app-v installed Msi
	            #
	            if(Test-Path "$Installer"){
	                [String] $msiexec = "$env:SystemRoot\system32\msiexec.exe"
	                [Array] $arguments = "/X","""$Installer""","/qb"
		            & $msiexec $arguments 
				}
	            
			}
	        #$CtxStrRootPath #Nick-it\.....
	        #Detect Sequenceing Plattform!
	        $PrimVirtAppDir = "C:\Program Files"
	        
	        if ([System.IntPtr]::Size -eq 4) { "32" } else { 
	            if($Projectfile.CtxStr2msi.CtxStrApp64Bit -ne "True"){
	                $PrimVirtAppDir = "C:\Program Files (x86)"        
			    }
	        }
	        
	        #App-V Accept only two Directorys after the Root!
	        [String []]$tmp = $CtxStrInstallDir.split("\")
	        $tmp = $tmp | where {$_ -ne ""}
	        if($tmp.count -gt 1){
	            $CtxStrInstallDir = $tmp[0] #($tmp[0])+"\"+($tmp[1])
			}
	        
	        
	        $PrimVirtAppDir +="\$CtxStrInstallDir"
	        $PrimVirtAppDir = $PrimVirtAppDir -replace "\\\\","\" -replace "\\$",""
	        
	        $TemplatePath = $Projectfile.CtxStr2msi.AppVTemplatePath
	        
	        LogInfo -Path $LogFile -Wert "INFO" -Ausg "App-V 5 creation. Please wait. This can take a long time...."
	        LogInfo -Path $LogFile -Wert "INFO" -Ausg ("Parameter: "+"$CtxStrPackagename "+" $ProjectPath\$CtxStrPackagename-appv"+" $ProjectPath\$CtxStrPackagename.msi"+" $PrimVirtAppDir"+ ($Projectfile.CtxStr2msi.FullLoad -eq "True")+ ($Projectfile.CtxStr2msi.AppVTemplate -eq "True")+ " $TemplatePath")
	        $job = Start-Job -scriptblock $scriptBlock -ArgumentList "$CtxStrPackagename", "$ProjectPath\$CtxStrPackagename-appv", "$ProjectPath\$CtxStrPackagename.msi", "$PrimVirtAppDir", ($Projectfile.CtxStr2msi.FullLoad -eq "True"), ($Projectfile.CtxStr2msi.AppVTemplate -eq "True"), "$TemplatePath"
	        
	        while($job.state -ne "Completed"){
	          [System.Windows.Forms.Application]::DoEvents()
	          Start-Sleep -Milliseconds 50  
		    }
	        Stop-Job $job
	        Receive-Job $job 2> "$LogPath\AppV.log"
	        if($progressbaroverlay1){
		        $progressbaroverlay1.Style = "Block"
		        $progressbaroverlay1.TextOverlay = "Finished App-V Creation"
		    }
		    LogInfo -Path $LogFile -Wert "INFO" -Ausg "Finished App-V 5 creation. You can find the Files in the project folder or show the logs if nothing is created"
	        LogInfo -Path $LogFile -Wert "INFO" -Ausg "You can find the Result in the folder file:////$htmlPath"
		}
	}
	#endregion Source: Ctx2msi_Files.ps1

#region Source: CtxStr_IconBin.ps1
	#=====================================================================================================
	#
	# Citrix Streaming 2 Msi Converter "Icon Extractor"
	# copyright 2013 Andreas Nick Nick Informationstechnik GmbH 
	# http://www.nick-it.de
	#
	# Version V0.5
	#
	# Legal
	# This  scritp is copyrighted material.  They may only be downloaded from the
	# links I provide.  You may download them to use, if you want to do
	# anything else with it, you have to ask me first.  Full terms and conditions are
	# available on the download page on the blog http://software-virtualisierung.des
	#
	#=====================================================================================================
	
	
	
	function ExtractCtxIcon{
	param(
	   [STRING] $BinPath,
		[INT] $Offset,
		[INT] $Size,
		[STRING] $Outfile
	     )
	
		# Read the entire file to an array of bytes.
		
		$handle = [System.IO.File]::OpenRead("$BinPath")
		[byte[]] $Buffer = New-Object byte[] ($Size)
		$handle.set_Position($Offset)
	    $handle.Read($Buffer,0,$Size)
	    $handle.Close()
	
		[BYTE[]] $icon = @()
		#Write-Host "Create header"
		#Header for Citrix icon
		[System.Byte[]] $CtxIconHeader =   #22 Bytes
		0x00, 0x00, #  Reserved. Must always be 0. 
		0x01, 0x00, #Specifies image type: 1 for icon (.ICO) image
		0x01, 0x00, #Specifies number of images in the file. #Kein Multiimage!
		#-------image / images Header
		0x20, # Image Width
		0x20, # Image Higth
		0x10, # Specifies number of colors in the color palette. Should be 0 if the image does not use a color palette.
		0x00, # Reserved. Should be 0
		0x01, 0x00, # In ICO format: Specifies color planes. Should be 0 or 1
		0x04, 0x00, # In ICO format: Specifies bits per pixel #Citrix 4 Bits
		0xE8, 0x02, 0x00,0x00, # Image Size = 640... 512=0x00,0x20 # 680=0yA8 0x02
		0x16, 0x00, 0x00, 0x00, # Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file = 22
	
		#Bitmap Header
		0x28, 0x00, 0x00, 0x00, # 40 (Gr��e der BITMAPINFOHEADER-Struktur in Byte)
		0x20, 0x00, 0x00, 0x00, #Der Betrag gibt die H�he der Bitmap in Pixel an. 
		0x40, 0x00, 0x00, 0x00, # H�he der Bitmap in Pixel an. 
		0x01, 0x00, #Planes 1 (Stand in einigen �lteren Formaten wie PCX f�r die Anzahl der Farbebenen, wird aber f�r BMP nicht verwendet)
		0x04, 0x00, #18 00 24 bits Number of bits per pixel 
	
		#0 (BI_RGB): Bilddaten sind unkomprimiert.
		#1 (BI_RLE8): Bilddaten sind laufl�ngenkodiert f�r 8 bpp. Nur erlaubt wenn biBitCount=8 und biHeight positiv.
		#2 (BI_RLE4): Bilddaten sind laufl�ngenkodiert f�r 4 bpp. Nur erlaubt wenn biBitCount=4 und biHeight positiv.
		#3 (BI_BITFIELDS): Bilddaten sind unkomprimiert und benutzerdefiniert (mittels Farbmasken) kodiert. Nur erlaubt wenn biBitCount=16 oder 32; 
		0x00, 0x00, 0x00, 0x00,
		0x80, 0x02, 0x00, 0x00, #Size of the raw data in the pixel array (including padding) Wenn biCompression=BI_RGB: Entweder 0 oder die Gr��e der Bilddaten in Byte. Ansonsten: Gr��e der Bilddaten in Byte.
		0x00, 0x00, 0x00, 0x00, #Horizontale Aufl�sung des Zielausgabeger�tes in Pixel pro Meter; wird aber f�r BMP-Dateien meistens auf 0 gesetzt.
		0x00, 0x00, 0x00, 0x00, #Horizontale Aufl�sung des Zielausgabeger�tes in Pixel pro Meter; wird aber f�r BMP-Dateien meistens auf 0 gesetzt.
		#Wenn biBitCount=4 oder 8: die Anzahl der Eintr�ge der Farbtabelle; 0 bedeutet die maximale Anzahl (2, 16 oder 256).
		#Ansonsten: Die Anzahl der Eintr�ge der Farbtabelle (0=keine Farbtabelle). Auch wenn sie in diesem Fall nicht notwendig ist, kann dennoch eine f�r die Farbquantisierung empfohlene Farbtabelle angegeben werden.
		0x00, 0x00, 0x00, 0x00,
		#Wenn biBitCount=1, 4 oder 8: Die Anzahl s�mtlicher im Bild verwendeten Farben; 0 bedeutet alle Farben der Farbtabelle.
		#Ansonsten: Wenn eine Farbtabelle vorhanden ist und diese s�mtliche im Bild verwendeten Farben enth�lt: deren Anzahl.
		#Ansonsten: 0.
		0x00, 0x00, 0x00, 0x00,
	
		#Pakette invert
		#Blau #Green #Red  64Bytes
		0x00,0x00,0x00,0x00, # 0 Firefox Black
		0x00,0x00,0x80,0x00, # 1 Firefox Dark red F
		0x00,0x80,0x00,0x00, # 7 Excel drak green
		0x00,0x80,0x80,0x00, # 3 Dark Yelow Firefox
		0x80,0x00,0x00,0x00, # 4 Firefox DarkBlue
		0x80,0x00,0x80,0x00, # 5 
		0x80,0x80,0x00,0x00, # 6 Firefox Dark Tail
		0x80,0x80,0x80,0x00,
		0xC0,0xC0,0xC0,0x00, # 8 Firefox Grey
		0x00,0x00,0xFF,0x00, # 9 Firefox red
		0x80,0x80,0x80,0x00, # 10 A Dark gray 0,ff,00,00
		0x00,0xFF,0xFF,0x00, # 11 B Yellowok
		0xFF,0x00,0x00,0x00, # 12 C Anwendung Blau! ff,00,00,00
		0xff,0xFF,0x00,0x00, # 13 D Purple #0,ff,0,ff
		0xFF,0xFF,0x00,0x00, # 14 E Firefox Light Tail OK
		0xff,0xff,0xff,0x00  # 15 F Firfox White OK
		[byte] $bitmask = 0
		[byte[]] $bytemask = @() #512 Bytes 
		#Get Bitmask
		#Write-Host "Create mask"
		for($i=0;$i -lt 128 ;$i++){
		  $bitmask = $Buffer[$i]
		  for($x=3;$x -ge 0; $x--){	
			[byte]	$t1 = 0
		    $b1 = ($bitmask -shr ($x*2+1)) -band 1
		    $t1 = ($b1 * 0xf0)
		    $b1 = ($bitmask -shr ($x*2)) -band 1 #shr nur mit Powershell3!
			$t1 = $t1 + ($b1 * 0xf) 		
		    $bytemask += $t1 
		 }
		}
		#Write-Host "CopyHeader"
		for($i=0; $i -lt $CtxIconHeader.count;$i++){
		  $icon +=  $CtxIconHeader[$i]
		}
	
		#Write-Host "Count:" $CtxIconHeader.length
		#Write-Host "CopyIcon"
		for($y=31;$y -ge 0; $y--){
			for($x=0;$x -lt 16; $x++){
			  $icon +=  ($Buffer[128+($y*16)+$x] -bor $bytemask[(($y)*16)+($x)])
			}
		}
		for($i=0; $i -lt 128 ;$i++){
		  $icon +=  0
		}
		[System.IO.File]::WriteAllBytes("$Outfile", $icon)
	}
	
	function ExtractCtxIcon2{
	param(
	    [STRING] $BinPath,
		[INT] $Offset,
		[INT] $Size,
		[STRING] $Outfile
	     )
	
		# Read the entire file to an array of bytes.
		
		$handle = [System.IO.File]::OpenRead("$BinPath")
		[byte[]] $Buffer = New-Object byte[] ($Size)
		$handle.set_Position($Offset)
	    $handle.Read($Buffer,0,$Size)
	    $handle.Close()
	
		[BYTE[]] $icon = @()
		#Write-Host "Create header"
		#Header for Citrix icon
		[System.Byte[]] $CtxIconHeader =   #22 Bytes
		0x00, 0x00, #  Reserved. Must always be 0. 
		0x01, 0x00, #Specifies image type: 1 for icon (.ICO) image
		0x01, 0x00, #Specifies number of images in the file. #Kein Multiimage!
		#-------image / images Header
		0x20, # Image Width
		0x20, # Image Higth
		0x10, # Specifies number of colors in the color palette. Should be 0 if the image does not use a color palette.
		0x00, # Reserved. Should be 0
		0x01, 0x00, # In ICO format: Specifies color planes. Should be 0 or 1
		0x04, 0x00, # In ICO format: Specifies bits per pixel #Citrix 4 Bits
		0xE8, 0x02, 0x00,0x00, # Image Size = 640... 512=0x00,0x20 # 680=0yA8 0x02
		0x16, 0x00, 0x00, 0x00, # Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file = 22
	
		#Bitmap Header
		0x28, 0x00, 0x00, 0x00, # 40 (Gr��e der BITMAPINFOHEADER-Struktur in Byte)
		0x20, 0x00, 0x00, 0x00, #Der Betrag gibt die H�he der Bitmap in Pixel an. 
		0x40, 0x00, 0x00, 0x00, # H�he der Bitmap in Pixel an. 
		0x01, 0x00, #Planes 1 (Stand in einigen �lteren Formaten wie PCX f�r die Anzahl der Farbebenen, wird aber f�r BMP nicht verwendet)
		0x04, 0x00, #18 00 24 bits Number of bits per pixel 
	
		#0 (BI_RGB): Bilddaten sind unkomprimiert.
		#1 (BI_RLE8): Bilddaten sind laufl�ngenkodiert f�r 8 bpp. Nur erlaubt wenn biBitCount=8 und biHeight positiv.
		#2 (BI_RLE4): Bilddaten sind laufl�ngenkodiert f�r 4 bpp. Nur erlaubt wenn biBitCount=4 und biHeight positiv.
		#3 (BI_BITFIELDS): Bilddaten sind unkomprimiert und benutzerdefiniert (mittels Farbmasken) kodiert. Nur erlaubt wenn biBitCount=16 oder 32; 
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, #Size of the raw data in the pixel array (including padding) Wenn biCompression=BI_RGB: Entweder 0 oder die Gr��e der Bilddaten in Byte. Ansonsten: Gr��e der Bilddaten in Byte.
		0x00, 0x00, 0x00, 0x00, #Horizontale Aufl�sung des Zielausgabeger�tes in Pixel pro Meter; wird aber f�r BMP-Dateien meistens auf 0 gesetzt.
		0x00, 0x00, 0x00, 0x00, #Horizontale Aufl�sung des Zielausgabeger�tes in Pixel pro Meter; wird aber f�r BMP-Dateien meistens auf 0 gesetzt.
		#Wenn biBitCount=4 oder 8: die Anzahl der Eintr�ge der Farbtabelle; 0 bedeutet die maximale Anzahl (2, 16 oder 256).
		#Ansonsten: Die Anzahl der Eintr�ge der Farbtabelle (0=keine Farbtabelle). Auch wenn sie in diesem Fall nicht notwendig ist, kann dennoch eine f�r die Farbquantisierung empfohlene Farbtabelle angegeben werden.
		0x00, 0x00, 0x00, 0x00,
		#Wenn biBitCount=1, 4 oder 8: Die Anzahl s�mtlicher im Bild verwendeten Farben; 0 bedeutet alle Farben der Farbtabelle.
		#Ansonsten: Wenn eine Farbtabelle vorhanden ist und diese s�mtliche im Bild verwendeten Farben enth�lt: deren Anzahl.
		#Ansonsten: 0.
		0x00, 0x00, 0x00, 0x00,
	
		#Pakette invert
		#Blau #Green #Red  64Bytes
		0x00,0x00,0x00,0x00, # 0 Firefox Black
		0x00,0x00,0x80,0x00, # 1 Firefox Dark red F
		0x00,0x80,0x00,0x00, # 7 Excel drak green
		0x00,0x80,0x80,0x00, # 3 Dark Yelow Firefox
		0x80,0x00,0x00,0x00, # 4 Firefox DarkBlue
		0x00,0xff,0x00,0x00, # 5 Green
		0x80,0x80,0x00,0x00, # 6 Firefox Dark Tail
		0x80,0x80,0x80,0x00,
		0xC0,0xC0,0xC0,0x00, # 8 Firefox Grey
		0x00,0x00,0xFF,0x00, # 9 Firefox red
		0x80,0x80,0x80,0x00, # 10 A Dark gray
		0x00,0xFF,0xFF,0x00, # 11 B Yellow
		0xFF,0x00,0x00,0x00, # 12 C Anwendung Blau!
		0xff,0xFF,0x00,0x00, # 13 D Purple
		0xFF,0xFF,0x00,0x00, # 14 E Firefox Light Tail
		0xff,0xff,0xff,0x00  # 15 F Firfox White
		[byte] $bitmask = 0
		[byte[]] $bytemask = @() #512 Bytes 
		#Get Bitmask
	
		for($i=0;$i -lt 128 ;$i++){
		  $bitmask = 255#$Buffer[$i]
		  for($x=3;$x -ge 0; $x--){	
	#		[byte]	$t1=0
	#	    $b1 =($bitmask -shr ($x*2+1)) -band 1
	#	    $t1 = ($b1 * 0x0f)
	#	    $b1 = ($bitmask -shr ($x*2)) -band 1
	#		$t1 = $t1 + ($b1 * 0xf0) 		
		    $bytemask += $t1 
		 }
		}
		
		for($i=0; $i -lt $CtxIconHeader.count;$i++){
		  $icon +=  $CtxIconHeader[$i]
		}
	
		for($y=31;$y -ge 0; $y--){
			for($x=0;$x -lt 16; $x++){
			  $icon +=  ($Buffer[130+((31-$y)*16)+$x] -bor $bytemask[(($y)*16)+($x)])
			}
		}
		for($i=0; $i -lt 128 ;$i++){
		  $icon +=  0
		}
		[System.IO.File]::WriteAllBytes("$Outfile", $icon)
	}
	
	function ExtractCtxIcon3{
	param(
	    [STRING] $BinPath,
		[INT] $Offset,
		[INT] $Size,
		[STRING] $Outfile
	     )
		
		$handle = [System.IO.File]::OpenRead("$BinPath")
		[byte[]] $Buffer = New-Object byte[] ($Size)
		$handle.set_Position($Offset)
	    $handle.Read($Buffer,0,$Size)
	    $handle.Close()
	    [System.IO.File]::WriteAllBytes("$Outfile", $Buffer)
	}
	
	
	function  Extract-CitrixIcons{
	Param(
	   [STRING] $BinPath,
	   [STRING] $ProfilePath,
	   [STRING] $OutPath
	     )
	
	  $IconCount = Count-Icons($ProfilePath)
	   	#Progressbar
		 if($progressbaroverlay1){
		   $progressbaroverlay1.Maximum = $IconCount
	       $progressbaroverlay1.Style = "Block"
	       $progressbaroverlay1.Value = 0
		   $progressbaroverlay1.Step = 1
		   $progressbaroverlay1.TextOverlay = "Processing Icons from icon.bin file..."
		 }
	 
	    
	  #New-Item c:\temp\icons -type directory -force 
	
	  $ctxProfile = New-Object xml
	  $ctxProfile.Load("$ProfilePath")
	
	  #$IconPath = "c:\temp\icons\"+$ctxProfile.Package.Targets.Target.Guid
	  $IconPath =  $OutPath
	    
	  New-Item $IconPath -type directory -force 
	
	
	  foreach($Appnode in $ctxProfile.package.apps.ChildNodes){
	    $i=0    
	    New-Item ($IconPath+"\"+$Appnode.name) -type directory -force 
	    foreach($Iconsnode in $Appnode.icons.ChildNodes){
	       if($Iconsnode.Size -eq 640){
		     ExtractCtxIcon -BinPath "$BinPath" -Offset $Iconsnode.Offset -Size $Iconsnode.Size -Outfile ("$IconPath"+"\"+$Appnode.name+"\Icon_$i.ico")
	  	     $i++
	  	   } else {
		      #Write-Host -Offset ($Iconsnode.Offset+4) -Size (([INT]$Iconsnode.Size)-4) 
		     	ExtractCtxIcon3 -BinPath "$BinPath" -Offset (([INT]$Iconsnode.Offset)+4) -Size (([INT]$Iconsnode.Size)-4) -Outfile ("$IconPath"+"\"+$Appnode.name+"\Icon_$i.ico")
		     $i++
		   }
	       if($progressbaroverlay1){
		      $progressbaroverlay1.PerformStep() 	
		      [System.Windows.Forms.Application]::DoEvents() 
			}
		}     
	    }
	    #break
	}
	
	
	function Count-Icons{
	param(
	    [STRING] $ProfilePath
	    
	     )
	    
	    $ctxProfile = New-Object xml
	    $ctxProfile.Load("$ProfilePath")
	    $i=0
	    foreach($Appnode in $ctxProfile.package.apps.ChildNodes){
	      foreach($Iconsnode in $Appnode.icons.ChildNodes){
		   $i++
		   }
	     }
	    return $i
	}
	
	#Write-Host "A1"
	#endregion Source: CtxStr_IconBin.ps1

#region Source: commandline.pss
function Call-commandline_pss
{
	#----------------------------------------------
	#region Import Assemblies
	#----------------------------------------------
	[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies
	
	##########################################################################
	# Created with: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.29
	# Created on:   21.02.2014 09:50
	# Created by:   Andreas
	# Organization: 
	##########################################################################
	
	
	#$Commandline = ("-test1","test1","-test1","test1")
	
	
	function Parse-Commandline 
	{ 
	<#
		.SYNOPSIS
			Parses the Commandline of a package executable
	
		.DESCRIPTION
			Parses the Commandline of a package executable
	
		.PARAMETER  Commandline
			The Commandline of the package executable
	
		.EXAMPLE
			$arguments = Parse-Commandline -Commandline $Commandline
	
		.INPUTS
			System.String
	
		.OUTPUTS
			System.Collections.Specialized.StringCollection
	#>
	
		[OutputType([System.Collections.Specialized.StringCollection])]
	    Param([string]$CommandLine) 
		
	    $Arguments = New-Object System.Collections.Specialized.StringCollection 
		
		if($CommandLine)
		{
		    #Find First Quote 
		    $index = $CommandLine.IndexOf('"') 
	
		    while ( $index -ne -1) 
		    {#Continue as along as we find a quote 
		        #Find Closing Quote 
		        $closeIndex = $CommandLine.IndexOf('"',$index + 1) 
		        if($closeIndex -eq -1) 
		        { 
		            break #Can’t find a match 
		        } 
		        $value = $CommandLine.Substring($index + 1,$closeIndex – ($index + 1)) 
		        [void]$Arguments.Add($value) 
		        $index = $closeIndex 
	
		        #Find First Quote 
		        $index = $CommandLine.IndexOf('"',$index + 1) 
		    } 
		}
	    return $Arguments 
	}
	
	function Convert-CommandLineToDictionary 
	{ 
		<#
		.SYNOPSIS
			Parses and converts the commandline of a packaged executable into a Dictionary
	
		.DESCRIPTION
			Parses and converts the commandline of a packaged executable into a Dictionary
	
		.PARAMETER  Dictionary
			The Dictionary to load the value pairs into.
	
		.PARAMETER  CommandLine
			The commandline of the package executable
	
		.PARAMETER  ParamIndicator
			The character used to indicate what is a parameter.
		
		.EXAMPLE
			$Dictionary = New-Object System.Collections.Specialized.StringDictionary
			Convert-CommandLineToDictionary -Dictionary $Dictionary -CommandLine $Commandline  -ParamIndicator '-'
		#>
	    Param(	[ValidateNotNull()]
				[System.Collections.Specialized.StringDictionary]$Dictionary,
				[string]$CommandLine, 
				[char] $ParamIndicator) 
	
		$Params = Parse-Commandline $CommandLine
		
	    for($index = 0; $index -lt $Params.Count; $index++) 
	    { 
	        [string]$param = $Params[$index] 
	        #Clear the values 
	        $key = "" 
	        $value = "" 
	
	        if($param.StartsWith($ParamIndicator)) 
	        { 
	            #Remove the indicator 
	            $key = $param.Remove(0,1) 
	            if($index  + 1 -lt $Params.Count) 
	            { 
	                #Check if the next Argument is a parameter 
	                [string]$param = $Params[$index + 1] 
	                if($param.StartsWith($ParamIndicator) -ne $true ) 
	                { 
	                    #If it isn’t a parameter then set it as the value 
	                    $value = $param 
	                    $index++ 
	                } 
	            } 
	            $Dictionary[$key] = $value 
	        }#else skip 
	    } 
	}
	
	Convert-CommandLineToDictionary -CommandLine}
#endregion Source: commandline.pss

#region Source: MessageFrom.psf
function Call-MessageFrom_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMeesageForm = New-Object 'System.Windows.Forms.Form'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	
	
	#region Control Helper Functions
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	
	
	
	
	$formMeesageForm_Shown={
	    
	    $formMeesageForm.Text ="Hilfe"
		for($i=0; $i-lt $Global:MessageBox.count;$i++){
	        
	        $listbox1.Items.Add(($Global:MessageBox[$i]))
	        
	        
		}
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMeesageForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MessageFrom_listbox1 = $listbox1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$formMeesageForm.remove_Load($FormEvent_Load)
			$formMeesageForm.remove_Shown($formMeesageForm_Shown)
			$formMeesageForm.remove_Load($Form_StateCorrection_Load)
			$formMeesageForm.remove_Closing($Form_StoreValues_Closing)
			$formMeesageForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMeesageForm.SuspendLayout()
	#
	# formMeesageForm
	#
	$formMeesageForm.Controls.Add($listbox1)
	$formMeesageForm.Controls.Add($buttonOK)
	$formMeesageForm.AcceptButton = $buttonOK
	$formMeesageForm.ClientSize = '643, 532'
	$formMeesageForm.Font = "Century Gothic, 9pt"
	$formMeesageForm.FormBorderStyle = 'FixedDialog'
	$formMeesageForm.MaximizeBox = $False
	$formMeesageForm.MinimizeBox = $False
	$formMeesageForm.Name = "formMeesageForm"
	$formMeesageForm.StartPosition = 'CenterScreen'
	$formMeesageForm.Text = "MeesageForm"
	$formMeesageForm.add_Load($FormEvent_Load)
	$formMeesageForm.add_Shown($formMeesageForm_Shown)
	#
	# listbox1
	#
	$listbox1.Font = "Lucida Console, 9pt"
	$listbox1.FormattingEnabled = $True
	$listbox1.ItemHeight = 12
	$listbox1.Location = '15, 16'
	$listbox1.Name = "listbox1"
	$listbox1.SelectionMode = 'None'
	$listbox1.Size = '616, 472'
	$listbox1.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '556, 497'
	$buttonOK.Name = "buttonOK"
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = "OK"
	$buttonOK.UseVisualStyleBackColor = $True
	$formMeesageForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMeesageForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMeesageForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMeesageForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMeesageForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMeesageForm.ShowDialog()
}
#endregion Source: MessageFrom.psf

#region Source: Globals.ps1
	#=====================================================================================================
	#
	# Citrix Streaming 2 Msi Converter
	# copyright 2013 Andreas Nick Nick Informationstechnik GmbH
	# http://www.nick-it.de
	#
	# Version V0.2
	#
	# Legal
	# This  scritp is copyrighted material.  They may only be downloaded from the
	# links I provide.  You may download them to use, if you want to do
	# anything else with it, you have to ask me first.  Full terms and conditions are
	# available on the download page on the blog http://software-virtualisierung.des
	#
	#=====================================================================================================
	
	
	# Historie
	
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	[void][reflection.assembly]::Load('System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	
	function Get-ScriptDirectory {
	    if ($hostinvocation -ne $null) {
	        Split-Path $hostinvocation.MyCommand.path
	    }
	    else {
	        Split-Path $script:MyInvocation.MyCommand.Path
	    }
	}
	
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	function Verify-XmlSignature {
	    Param (
	        [xml] $checkxml,
	        [system.Security.Cryptography.RSA] $Key
	    )
	    [System.Security.Cryptography.Xml.SignedXml] $signedXml = New-Object System.Security.Cryptography.Xml.SignedXml -ArgumentList $checkxml
	    $XmlNodeList = $checkxml.GetElementsByTagName("Signature")
	    $signedXml.LoadXml([System.Xml.XmlElement] ($XmlNodeList[0]))
	    $check = $signedXml.CheckSignature($key)
	    return $check
	}
	
	
	
	$Global:rootDir = $ScriptDirectory
	$rootDir = $ScriptDirectory
	
	#Time Expire
	get-date -UFormat "%Y-%m-%d"
	[String[]] $licfiles= Get-ChildItem "$rootDir\LicenseFolder\*.xml"
	
	if ($licfiles.count -eq 0) {
	    [System.Windows.Forms.MessageBox]::Show("Missing license file!")
	}
	
	[xml] $Global:License = New-Object xml
	$Global:License.Load($licfiles[0])
	#
	##Veryfy License
	[xml] $PublicKey = "<RSAKeyValue><Modulus>o9JRQZxXmff1l73BUySxhIsRzbKjRjWtquI7Tqb3lA1fi4SS15MpyvdTCy2tEoKh3+8Hz5YYKOKQn2x7mwC0YDcKT8HRBdSthNBk+1AePiubsxdTFBsz1mv/5OVneIMYhMHtmB3ddINxcKmKwBvsBOgEv7DIBDkE/etvwP37cT+RP9RfiHD/NkQV9OgcwZMOPbdMbcSch13hHMLHo16EKTLz2WceVpHXxN1x2PCMO693n2lmapUh6KRGY2JXudH7azHutqZO24EPcNRgDF7RiCb2XZjbFSdSHsKnSa6r3bOA1Vzi6ppwjxM1G6wT6DfH5F87BGY3qZS4TyyYz5gKBw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>"
	$rsaProvider = New-Object System.Security.Cryptography.RSACryptoServiceProvider
	$rsaProvider.FromXmlString($PublicKey.InnerXml)
	$Global:check = Verify-XmlSignature -checkxml $Global:License -Key $rsaProvider
	#Write-Host "Licensecheck : $check"
	
	
	if (!(Test-Path "$env:ProgramData\NICKIT\Ctx2Appv")) { New-Item "$env:ProgramData\NICKIT\Ctx2Appv" -Force -Type directory | out-null } 
	if (!(Test-Path "$env:ProgramData\NICKIT\Ctx2Appv\dd")) { Add-Content (Get-Date -UFormat "%Y-%m-%d") -Path "$env:ProgramData\NICKIT\Ctx2Appv\dd" -Force | out-null}
	
	
	
	#GetInstall Date from the executable!
	#[DateTime] $installdate = Get-Date ((get-Item ("$Global:rootDir"+"\AppBot-Ctxstr2appv_32.exe")).LastWriteTime) -UFormat "%Y-%m-%d"
	
	
	[DateTime] $installdate = Get-Date (get-Content -Path "$env:ProgramData\NICKIT\Ctx2Appv\dd") -UFormat "%Y-%m-%d"
	
	$eval = $null
	
	$Global:ueberpruefungsvariante = $false #der Kunde kann ueberprüfen, ob er kaufen will!
	
	if ($Global:check) {
	    if ($Global:License.license.Type -eq "Trial") {
	        $Global:ueberpruefungsvariante = $True
	        $LixText = ($Global:License.Customer)
	        $eval = Get-Date $installdate.AddDays(20) -UFormat "%Y-%m-%d"
	        if ((Get-Date) -gt $eval) {
	            [System.Windows.Forms.MessageBox]::Show("This EALUATION version is expired!`n`nlicense request : info@nick-it.de")
	            break
	        }
	        else {
	            [System.Windows.Forms.MessageBox]::Show("This EALUATION version expire on " + $eval + ".`nThis software intended for testing and not for production environments!`nThe trial version is limited to 50 files in a Citrix Application Profile`n`nlicense request : info@nick-it.de")
	        }
	    }
	}
	
	
	$Global:CommadlineDictionary = $null
	$Global:CommadlineDictionary = New-Object System.Collections.Specialized.StringDictionary
	
	$Global:ProjectDefaultPath = [System.Environment]::GetFolderPath("mydocuments") + "\ctxstr2msi\Projects\"
	$Global:ProjectDefaultPath_oshlash = [System.Environment]::GetFolderPath("mydocuments") + "$ENV:appdata\ctxstr2msi\Projects"
	if (!(Test-Path -Path "$Global:ProjectDefaultPath")) { New-Item -ItemType directory -Path $Global:ProjectDefaultPath -Force | Out-Null }
	
	
	# GLOBAL VARIABLES
	$rootDir = $ScriptDirectory  #Split-Path -Path $MyInvocation.MyCommand.Definition
	
	$Global:ProjectPath = $null
	$Global:ProjectFolder = $null
	$Global:ProjectSettingsFile = $null # File with the Settings for the actual Project
	$Global:LogDir = $null
	$Global:Ctxstr2msisourceFiles = $null #unpacked appv file
	$Global:Ctxstr2msiFile = $null #Path to the appvFile
	$Global:Projectxml = $null
	$Global:FromopenedProject = $false
	$Global:InstallRootDir = $null
	$Global:CtxStrDevicePath = $null
	
	$Global:GUIDPATH = "" #Path for generating the GUIDS
	
	$Global:ignorerrors = $false
	
	function Show-Message([String] $str) {
	    if (!$Global:ignorerrors) {
	        [System.Windows.Forms.MessageBox]::Show($str)
	    }
	}
	
	
	#=====================================================================================================
	# #Generate Guid from a String
	#=====================================================================================================
	
	function ToGuid([string] $src) {
	    $stringbytes = [system.Text.Encoding]::UTF8.GetBytes($src)
	    $hashedBytes = (New-Object System.Security.Cryptography.SHA1CryptoServiceProvider).ComputeHash($stringbytes)
	    [system.Array]::Resize([ref]$hashedBytes, 16)
	    $guid = [System.Guid]($hashedBytes)
	    Return $guid.ToString()
	    
	    #Write-Host $hashedBytes
	}
	
	#=====================================================================================================
	# Create a valid GUID
	#=====================================================================================================
	function GetGuid([String] $src) {
	    if ($src -eq "") {
	        return [String]([System.Guid]::NewGuid()).ToString()
	    }
	    else {
	        return toGuid($src)
	    }
	}
	
	#Cretate patternmatcher from string
	function get-Matcher([String] $str) {
	    $str = $str -replace "\\", "\\"
	    $str = $str -replace "\(", "\("
	    $str = $str -replace "\)", "\)"
	    $str = $str -replace "\+", "\+"
	    $str = $str -replace "\*", "\*"
	    $str = $str -replace '\$', '\$'
	    return $str
	}
	
	
	#=====================================================================================================
	# Create a Table Line in the xml
	#=====================================================================================================
	
	function Set-XmlTableLine {
	    param (
	        [xml] $tree,
	        [System.Xml.XmlElement] $element,
	        [String] $Key,
	        [String[]] $row
	    )
	    
	    $next = $tree.GetElementsByTagName($key)
	    $eNS = $tree.DocumentElement.NamespaceURI
	    
	    if ($next.count -eq "0") {
	        
	        $e = $tree.CreateElement("$key", $eNS)
	        $next = $element.AppendChild($e)
	    }
	    else {
	        $next = $next.Item(0)
	    }
	    
	    $e = $tree.CreateElement("Row", $eNS)
	    
	    for ($i = 0; $i -lt ($row.count); $i++) {
	        $e.SetAttribute("field$i", $row[$i])
	    }
	    
	    $next.AppendChild($e)
	}
	
	
	#=====================================================================================================
	# Create a Array string[][] from a xml Table
	#=====================================================================================================
	
	function Get-XmlTableMatrix {
	    param (
	        [xml] $tree,
	        [String] $Key
	    )
	    
	<#
		For more information on the try, catch and finally keywords, see:
			Get-Help about_try_catch_finally
	#>
	    
	    # Try one or more commands
	    try {
	        $nodes = ($tree.GetElementsByTagName($key)).get_ItemOf(0).ChildNodes
	        $attribs = ($nodes.Item(0)).Get_Attributes()
	        $nodecount = $nodes.count
	        $colcount = $attribs.count
	        $OutMatrix = New-Object 'string[][]' $nodecount, $colcount
	        
	        for ($x = 0; $x -lt $nodecount; $x++) {
	            $attribs = ($nodes.Item($x)).Get_Attributes()
	            #$line =  @()
	            for ($i = 0; $i -lt $colcount; $i++) {
	                $OutMatrix[$x][$i] = [String] ($attribs.Get_ItemOf($i)).get_InnerText()
	            }
	        }
	        return $OutMatrix
	    }
	    
	    catch {
	        Write-Host $_
	    }
	}
	
	#=====================================================================================================
	# Create a xml from a Array string[][]
	#=====================================================================================================
	
	function fill-XmlTable {
	    param (
	        [xml] $tree,
	        [System.Xml.XmlElement] $element,
	        $table, #[String[][]] $table,$test,
	        [String] $Key
	    )
	    for ($i = 0; $i -lt $table.count; $i++) {
	        Set-XmlTableLine -tree $tree -element $element -row ($table[$i]) -Key $key
	    }
	}
	
	
	#=====================================================================================================
	#Create a new Table Entry after an existing in a xml table
	#=====================================================================================================
	
	function Set-XmlTableLineAfter {
	    param (
	        [xml] $tree,
	        [String] $Key,
	        [String[]] $row,
	        [int] $line
	    )
	    
	    $eNS = $tree.DocumentElement.NamespaceURI
	    $e = $tree.CreateElement("Row", $eNS)
	    
	    for ($i = 0; $i -lt ($row.count); $i++) {
	        $e.SetAttribute("field$i", $row[$i])
	    }
	    
	    $a = $tree.GetElementsByTagName($key)
	    $c = $a.get_ItemOf(0).ChildNodes
	    $a.Item(0).InsertAfter($e, $c.get_ItemOf($line)) | Out-Null
	}
	
	#=====================================================================================================
	# Delete a Row in a XML Table
	#=====================================================================================================
	function delete-Xmlrow {
	    param (
	        [xml] $tree,
	        [String] $Key,
	        [int] $row
	    )
	    
	    $a = $tree.GetElementsByTagName($Key)
	    $b = $a.get_ItemOf(0).ChildNodes
	    $a.Item(0).RemoveChild($b.Item($row)) | Out-Null
	}
	
	
	#=====================================================================================================
	# Logging
	#=====================================================================================================
	function LogInfo([String] $Path, [STRING]$Wert, [STRING] $Ausg) {
	    $Timestamp = Get-Date -format 'yyyy-MM-dd#hh-mm-ss'
	    $Ausgabe = "$Timestamp : $Wert  $Ausg"
	    $Ausgabe | Add-Content "$Path"
	    
	    Write-Host $Ausgabe
	    if ($MainDialog -ne $null) {
	        write-logbox $Ausgabe
	    }
	}
	
	
	#=====================================================================================================
	# Decode a Reglookup Binary String
	#=====================================================================================================
	
	function decode_RegLookup_Binary {
	    param ([String] $AppvString)
	    
	    [String]$xByte = ""
	    $OutString = ""
	    $count = $AppvString.Length
	    
	    for ($index = 0; $index -lt $count; $index++) {
	        switch ($AppvString.Chars($index)) {
	            '%' {
	                $xByte = $AppvString.get_Chars($index + 1) + $AppvString.get_Chars($index + 2)
	                
	                $index += 2
	                break
	            }
	            default {
	                $xByte = '{0:x2}' -f [system.Convert]::ToByte($AppvString.get_Chars($index))
	                break
	            }
	        }
	        $OutString += $xByte + ""
	    }
	    return $OutString
	}
	
	
	
	
	#=====================================================================================================
	# Decode a Reglookup String
	#=====================================================================================================
	
	function decode_RegLookupString {
	    param ([String] $str)
	    $OutStr = ""
	    for ($i = 0; $i -lt $str.Length; $i++) {
	        if ($str.get_Chars($i) -eq '%') {
	            $conv = $str.get_Chars($i + 1) + $str.get_Chars($i + 2)
	            $OutStr += [CHAR]([CONVERT]::toint16($conv, 16))
	            $i += 2
	            
	        }
	        else {
	            $OutStr += $str.get_Chars($i)
	        }
	    }
	    Return $OutStr
	}
	
	
	
	[String[]] $Global:HelpText = @(
	" `n",
	"-------------------------------------------------------------------------------------`n",
	"       AppBotStr2AppV :: AppBot Application Streaming to App-V 5`n",
	"       Copyright 2014  Andreas Nick, Nick Informationstechnik GmbH`n",
	"-------------------------------------------------------------------------------------`n",
	" `n",
	"Syntax :: AppBotStr2AppV -ProfilePath <PATH_TO_THE_PROFILE_FILE> ...`n",
	" `n",
	"All parameters:`n",
	" `n",
	"-projectpath :: Path to the projectfolder (created, if not exist).`n",
	"                The defaultpath is %mydocuments%\ctxstr2msi\Projects\PROFILENAME`n",
	" `n",
	"-autostart   :: Automatic start of the conversion`n",
	" `n" +
	"-ConvertAppV ::Try to vonvert to app-v 5 (only on a App-V 5 sequencer`n",
	" `n",
	"-autoexit    :: Automatic exit this application after the conversion`n",
	" `n",
	"-ignorerrors :: No messages and no errors the program go on`n",
	" `n",
	"-------------------------------------------------------------------------------------`n",
	" `n")
	
	
	
	function Show-ErrorMessage {
	    
	    Param ([String] $Message)
	    
	    $Global:MessageBox = @()
	    
	    #$Global:MessageBox += "Error :`n"
	    $Global:MessageBox += " `n"
	    for ([int]$x = 0; $x -lt $Message.Length; $x += 84) {
	        #$Global:MessageBox += $Message
	        $index = $x + 84
	        if ($index -ge $Message.Length) { $index = $Message.Length }
	        Write-Host $x  $index
	        $Global:MessageBox += ($Message.Substring($x, $index - $x))
	    }
	    $Global:MessageBox += " `n"
	    $Global:MessageBox += $Global:HelpText
	    Call-MessageFrom_psf
	    
	}
	
	function Show-MessageBox {
	    Param ([String] $Message)
	    
	    if (!$Global:ignorerrors) {
	        [System.Windows.Forms.MessageBox]::Show($Message)
	    }
	    
	}
	
	#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
